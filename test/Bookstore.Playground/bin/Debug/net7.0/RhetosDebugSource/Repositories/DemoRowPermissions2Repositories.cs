// <autogenerated />
namespace DemoRowPermissions2.Repositories
{
    #pragma warning disable // See configuration setting CommonConcepts:CompilerWarningsInGeneratedCode.

    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Linq.Expressions;
    using System.Runtime.Serialization;
    using Rhetos.Dom.DefaultConcepts;
    using Rhetos.Utilities;

    /*ModuleInfo Using DemoRowPermissions2*/

    public class ModuleRepository
    {
        private readonly Rhetos.Extensibility.INamedPlugins<IRepository> _repositories;

        public ModuleRepository(Rhetos.Extensibility.INamedPlugins<IRepository> repositories)
        {
            _repositories = repositories;
        }

        private Division_Repository _Division_Repository;
        public Division_Repository Division { get { return _Division_Repository ?? (_Division_Repository = (Division_Repository)Rhetos.Extensibility.NamedPluginsExtensions.GetPlugin(_repositories, @"DemoRowPermissions2.Division")); } }

        private Document_Repository _Document_Repository;
        public Document_Repository Document { get { return _Document_Repository ?? (_Document_Repository = (Document_Repository)Rhetos.Extensibility.NamedPluginsExtensions.GetPlugin(_repositories, @"DemoRowPermissions2.Document")); } }

        private DocumentApproval_Repository _DocumentApproval_Repository;
        public DocumentApproval_Repository DocumentApproval { get { return _DocumentApproval_Repository ?? (_DocumentApproval_Repository = (DocumentApproval_Repository)Rhetos.Extensibility.NamedPluginsExtensions.GetPlugin(_repositories, @"DemoRowPermissions2.DocumentApproval")); } }

        private DocumentComment_Repository _DocumentComment_Repository;
        public DocumentComment_Repository DocumentComment { get { return _DocumentComment_Repository ?? (_DocumentComment_Repository = (DocumentComment_Repository)Rhetos.Extensibility.NamedPluginsExtensions.GetPlugin(_repositories, @"DemoRowPermissions2.DocumentComment")); } }

        private DocumentInfo_Repository _DocumentInfo_Repository;
        public DocumentInfo_Repository DocumentInfo { get { return _DocumentInfo_Repository ?? (_DocumentInfo_Repository = (DocumentInfo_Repository)Rhetos.Extensibility.NamedPluginsExtensions.GetPlugin(_repositories, @"DemoRowPermissions2.DocumentInfo")); } }

        private Employee_Repository _Employee_Repository;
        public Employee_Repository Employee { get { return _Employee_Repository ?? (_Employee_Repository = (Employee_Repository)Rhetos.Extensibility.NamedPluginsExtensions.GetPlugin(_repositories, @"DemoRowPermissions2.Employee")); } }

        private Region_Repository _Region_Repository;
        public Region_Repository Region { get { return _Region_Repository ?? (_Region_Repository = (Region_Repository)Rhetos.Extensibility.NamedPluginsExtensions.GetPlugin(_repositories, @"DemoRowPermissions2.Region")); } }

        private RegionSupervisor_Repository _RegionSupervisor_Repository;
        public RegionSupervisor_Repository RegionSupervisor { get { return _RegionSupervisor_Repository ?? (_RegionSupervisor_Repository = (RegionSupervisor_Repository)Rhetos.Extensibility.NamedPluginsExtensions.GetPlugin(_repositories, @"DemoRowPermissions2.RegionSupervisor")); } }

        private DocumentBrowse_Repository _DocumentBrowse_Repository;
        public DocumentBrowse_Repository DocumentBrowse { get { return _DocumentBrowse_Repository ?? (_DocumentBrowse_Repository = (DocumentBrowse_Repository)Rhetos.Extensibility.NamedPluginsExtensions.GetPlugin(_repositories, @"DemoRowPermissions2.DocumentBrowse")); } }

        /*ModuleInfo RepositoryMembers DemoRowPermissions2*/
    }

    /*DataStructureInfo RepositoryAttributes DemoRowPermissions2.Division*/
    public partial class Division_Repository : /*DataStructureInfo OverrideBaseType DemoRowPermissions2.Division*/ Common.OrmRepositoryBase<Common.Queryable.DemoRowPermissions2_Division, DemoRowPermissions2.Division> // Common.QueryableRepositoryBase<Common.Queryable.DemoRowPermissions2_Division, DemoRowPermissions2.Division> // Common.ReadableRepositoryBase<DemoRowPermissions2.Division> // global::Common.RepositoryBase
        , IWritableRepository<DemoRowPermissions2.Division>, IValidateRepository/*DataStructureInfo RepositoryInterface DemoRowPermissions2.Division*/
    {
        private readonly Rhetos.Utilities.ISqlUtility _sqlUtility;
        /*DataStructureInfo RepositoryPrivateMembers DemoRowPermissions2.Division*/

        public Division_Repository(Common.DomRepository domRepository, Common.ExecutionContext executionContext, Rhetos.Utilities.ISqlUtility _sqlUtility/*DataStructureInfo RepositoryConstructorArguments DemoRowPermissions2.Division*/)
        {
            _domRepository = domRepository;
            _executionContext = executionContext;
            this._sqlUtility = _sqlUtility;
            /*DataStructureInfo RepositoryConstructorCode DemoRowPermissions2.Division*/
        }

        public static KeyValuePair<string, Type>[] GetReadParameterTypes()
        {
            return new KeyValuePair<string, Type>[]
            {
                /*DataStructureInfo ReadParameterTypes DemoRowPermissions2.Division*/
            };
        }
        
        public virtual void Save(IEnumerable<DemoRowPermissions2.Division> insertedNew, IEnumerable<DemoRowPermissions2.Division> updatedNew, IEnumerable<DemoRowPermissions2.Division> deletedIds, bool checkUserPermissions = false)
        {
            if (!DomHelper.InitializeSaveMethodItems(ref insertedNew, ref updatedNew, ref deletedIds))
                return;

            /*DataStructureInfo WritableOrm ClearContext DemoRowPermissions2.Division*/

            /*DataStructureInfo WritableOrm ArgumentValidation DemoRowPermissions2.Division*/

            /*DataStructureInfo WritableOrm Initialization DemoRowPermissions2.Division*/

            // Using old data, including lazy loading of navigation properties:

            IEnumerable<Common.Queryable.DemoRowPermissions2_Division> deleted = DomHelper.LoadOldDataWithNavigationProperties(deletedIds, this);
            IEnumerable<Common.Queryable.DemoRowPermissions2_Division> updated = DomHelper.LoadOldDataWithNavigationProperties(updatedNew, this);

            foreach (var newItem in insertedNew.Concat(updatedNew))
                ShortStringPropertyCodeGenerator.CheckMaxLength(newItem.Name, newItem, "DemoRowPermissions2", "Division", "Name");

            /*DataStructureInfo WritableOrm OldDataLoaded DemoRowPermissions2.Division*/

            /*DataStructureInfo WritableOrm ProcessedOldData DemoRowPermissions2.Division*/

            {
                DomHelper.WriteToDatabase(insertedNew, updatedNew, deletedIds, _executionContext.PersistenceStorage, checkUserPermissions, _sqlUtility,
                    out Exception saveException, out Rhetos.RhetosException interpretedException);

                if (saveException != null)
                {
                    if (interpretedException is Rhetos.UserException && Rhetos.Utilities.MsSqlUtility.IsReferenceErrorOnDelete(interpretedException, @"DemoRowPermissions2.Document", @"DivisionID", @"FK_Document_Division_DivisionID"))
                        ((Rhetos.UserException)interpretedException).SystemMessage = @"DataStructure:DemoRowPermissions2.Document,Property:DivisionID,Referenced:DemoRowPermissions2.Division";
                    if (interpretedException is Rhetos.UserException && Rhetos.Utilities.MsSqlUtility.IsReferenceErrorOnDelete(interpretedException, @"DemoRowPermissions2.Employee", @"DivisionID", @"FK_Employee_Division_DivisionID"))
                        ((Rhetos.UserException)interpretedException).SystemMessage = @"DataStructure:DemoRowPermissions2.Employee,Property:DivisionID,Referenced:DemoRowPermissions2.Division";
                    if (interpretedException is Rhetos.UserException && Rhetos.Utilities.MsSqlUtility.IsReferenceErrorOnInsertUpdate(interpretedException, @"DemoRowPermissions2.Region", @"ID", @"FK_Division_Region_RegionID"))
                        ((Rhetos.UserException)interpretedException).SystemMessage = @"DataStructure:DemoRowPermissions2.Division,Property:RegionID,Referenced:DemoRowPermissions2.Region";
                    /*DataStructureInfo WritableOrm OnDatabaseError DemoRowPermissions2.Division*/
                    DomHelper.ThrowInterpretedException(checkUserPermissions, saveException, interpretedException, _sqlUtility, "DemoRowPermissions2.Division");
                }
            }

            deleted = null;
            updated = this.Query(updatedNew.Select(item => item.ID));
            IEnumerable<Common.Queryable.DemoRowPermissions2_Division> inserted = this.Query(insertedNew.Select(item => item.ID));

            bool allEffectsCompleted = false;
            try
            {
                /*DataStructureInfo WritableOrm OnSaveTag1 DemoRowPermissions2.Division*/

                /*DataStructureInfo WritableOrm OnSaveTag2 DemoRowPermissions2.Division*/

                Rhetos.Dom.DefaultConcepts.InvalidDataMessage.ValidateOnSave(insertedNew, updatedNew, this, "DemoRowPermissions2.Division");

                /*DataStructureInfo WritableOrm AfterSave DemoRowPermissions2.Division*/

                allEffectsCompleted = true;
            }
            finally
            {
                if (!allEffectsCompleted)
                    _executionContext.PersistenceTransaction.DiscardOnDispose();
            }
        }

        public IEnumerable<Rhetos.Dom.DefaultConcepts.InvalidDataMessage> Validate(IList<Guid> ids, bool onSave)
        {
            /*DataStructureInfo WritableOrm OnSaveValidate DemoRowPermissions2.Division*/
            yield break;
        }

        /*DataStructureInfo RepositoryMembers DemoRowPermissions2.Division*/
    }

    /*DataStructureInfo RepositoryAttributes DemoRowPermissions2.Document*/
    public partial class Document_Repository : /*DataStructureInfo OverrideBaseType DemoRowPermissions2.Document*/ Common.OrmRepositoryBase<Common.Queryable.DemoRowPermissions2_Document, DemoRowPermissions2.Document> // Common.QueryableRepositoryBase<Common.Queryable.DemoRowPermissions2_Document, DemoRowPermissions2.Document> // Common.ReadableRepositoryBase<DemoRowPermissions2.Document> // global::Common.RepositoryBase
        , IWritableRepository<DemoRowPermissions2.Document>, IValidateRepository/*DataStructureInfo RepositoryInterface DemoRowPermissions2.Document*/
    {
        private readonly Rhetos.Utilities.ISqlUtility _sqlUtility;
        /*DataStructureInfo RepositoryPrivateMembers DemoRowPermissions2.Document*/

        public Document_Repository(Common.DomRepository domRepository, Common.ExecutionContext executionContext, Rhetos.Utilities.ISqlUtility _sqlUtility/*DataStructureInfo RepositoryConstructorArguments DemoRowPermissions2.Document*/)
        {
            _domRepository = domRepository;
            _executionContext = executionContext;
            this._sqlUtility = _sqlUtility;
            /*DataStructureInfo RepositoryConstructorCode DemoRowPermissions2.Document*/
        }

        public static KeyValuePair<string, Type>[] GetReadParameterTypes()
        {
            return new KeyValuePair<string, Type>[]
            {
                new KeyValuePair<string, Type>(@"Common.RowPermissionsReadItems", typeof(Common.RowPermissionsReadItems)),
                new KeyValuePair<string, Type>(@"Common.RowPermissionsWriteItems", typeof(Common.RowPermissionsWriteItems)),
                /*DataStructureInfo ReadParameterTypes DemoRowPermissions2.Document*/
            };
        }
        
        public virtual void Save(IEnumerable<DemoRowPermissions2.Document> insertedNew, IEnumerable<DemoRowPermissions2.Document> updatedNew, IEnumerable<DemoRowPermissions2.Document> deletedIds, bool checkUserPermissions = false)
        {
            if (!DomHelper.InitializeSaveMethodItems(ref insertedNew, ref updatedNew, ref deletedIds))
                return;

            /*DataStructureInfo WritableOrm ClearContext DemoRowPermissions2.Document*/

            /*DataStructureInfo WritableOrm ArgumentValidation DemoRowPermissions2.Document*/

            { 
                var now = SqlUtility.GetDatabaseTime(_executionContext.SqlExecuter);

                foreach (var newItem in insertedNew)
                    if(newItem.Created == null)
                        newItem.Created = now;
            }
            /*DataStructureInfo WritableOrm Initialization DemoRowPermissions2.Document*/

            // Using old data, including lazy loading of navigation properties:

            IEnumerable<Common.Queryable.DemoRowPermissions2_Document> deleted = DomHelper.LoadOldDataWithNavigationProperties(deletedIds, this);
            IEnumerable<Common.Queryable.DemoRowPermissions2_Document> updated = DomHelper.LoadOldDataWithNavigationProperties(updatedNew, this);

            foreach (var newItem in insertedNew.Concat(updatedNew))
                ShortStringPropertyCodeGenerator.CheckMaxLength(newItem.Title, newItem, "DemoRowPermissions2", "Document", "Title");

            if (deletedIds.Count() > 0)
            {
                List<DemoRowPermissions2.DocumentApproval> childItems = _executionContext.Repository.DemoRowPermissions2.DocumentApproval
                    .Query(deletedIds.Select(parent => parent.ID))
                    .Select(child => child.ID).ToList()
                    .Select(childId => new DemoRowPermissions2.DocumentApproval { ID = childId }).ToList();

                if (childItems.Count() > 0)
                    _domRepository.DemoRowPermissions2.DocumentApproval.Delete(childItems);
            }

            if (deletedIds.Count() > 0)
            {
                List<DemoRowPermissions2.DocumentComment> childItems = deletedIds
                    .SelectMany(parent => _executionContext.Repository.DemoRowPermissions2.DocumentComment.Query()
                        .Where(child => child.DocumentID == parent.ID)
                        .Select(child => child.ID)
                        .ToList())
                    .Select(childId => new DemoRowPermissions2.DocumentComment { ID = childId })
                    .ToList();

                if (childItems.Count() > 0)
                    _domRepository.DemoRowPermissions2.DocumentComment.Delete(childItems);
            }

            /*DataStructureInfo WritableOrm OldDataLoaded DemoRowPermissions2.Document*/

            /*DataStructureInfo WritableOrm ProcessedOldData DemoRowPermissions2.Document*/

            {
                DomHelper.WriteToDatabase(insertedNew, updatedNew, deletedIds, _executionContext.PersistenceStorage, checkUserPermissions, _sqlUtility,
                    out Exception saveException, out Rhetos.RhetosException interpretedException);

                if (saveException != null)
                {
                    if (interpretedException is Rhetos.UserException && Rhetos.Utilities.MsSqlUtility.IsReferenceErrorOnInsertUpdate(interpretedException, @"DemoRowPermissions2.Division", @"ID", @"FK_Document_Division_DivisionID"))
                        ((Rhetos.UserException)interpretedException).SystemMessage = @"DataStructure:DemoRowPermissions2.Document,Property:DivisionID,Referenced:DemoRowPermissions2.Division";
                    if (interpretedException is Rhetos.UserException && Rhetos.Utilities.MsSqlUtility.IsReferenceErrorOnDelete(interpretedException, @"DemoRowPermissions2.DocumentApproval", @"ID", @"FK_DocumentApproval_Document_ID"))
                        ((Rhetos.UserException)interpretedException).SystemMessage = @"DataStructure:DemoRowPermissions2.DocumentApproval,Property:ID,Referenced:DemoRowPermissions2.Document";
                    if (interpretedException is Rhetos.UserException && Rhetos.Utilities.MsSqlUtility.IsReferenceErrorOnDelete(interpretedException, @"DemoRowPermissions2.DocumentComment", @"DocumentID", @"FK_DocumentComment_Document_DocumentID"))
                        ((Rhetos.UserException)interpretedException).SystemMessage = @"DataStructure:DemoRowPermissions2.DocumentComment,Property:DocumentID,Referenced:DemoRowPermissions2.Document";
                    /*DataStructureInfo WritableOrm OnDatabaseError DemoRowPermissions2.Document*/
                    DomHelper.ThrowInterpretedException(checkUserPermissions, saveException, interpretedException, _sqlUtility, "DemoRowPermissions2.Document");
                }
            }

            deleted = null;
            updated = this.Query(updatedNew.Select(item => item.ID));
            IEnumerable<Common.Queryable.DemoRowPermissions2_Document> inserted = this.Query(insertedNew.Select(item => item.ID));

            bool allEffectsCompleted = false;
            try
            {
                /*DataStructureInfo WritableOrm OnSaveTag1 DemoRowPermissions2.Document*/

                /*DataStructureInfo WritableOrm OnSaveTag2 DemoRowPermissions2.Document*/

                Rhetos.Dom.DefaultConcepts.InvalidDataMessage.ValidateOnSave(insertedNew, updatedNew, this, "DemoRowPermissions2.Document");

                /*DataStructureInfo WritableOrm AfterSave DemoRowPermissions2.Document*/

                allEffectsCompleted = true;
            }
            finally
            {
                if (!allEffectsCompleted)
                    _executionContext.PersistenceTransaction.DiscardOnDispose();
            }
        }

        public IEnumerable<Rhetos.Dom.DefaultConcepts.InvalidDataMessage> Validate(IList<Guid> ids, bool onSave)
        {
            /*DataStructureInfo WritableOrm OnSaveValidate DemoRowPermissions2.Document*/
            yield break;
        }

        public IQueryable<Common.Queryable.DemoRowPermissions2_Document> Filter(IQueryable<Common.Queryable.DemoRowPermissions2_Document> source, Common.RowPermissionsReadItems parameter)
        {
            /*QueryFilterExpressionInfo BeforeFilter DemoRowPermissions2.Document.'Common.RowPermissionsReadItems'*/
            var filterExpression = GetRowPermissionsReadExpression(source, _domRepository, _executionContext);
            return FilterExpression<Common.Queryable.DemoRowPermissions2_Document>.OptimizedWhere(source, filterExpression);
        }

        public Expression<Func<Common.Queryable.DemoRowPermissions2_Document, bool>> GetRowPermissionsReadExpression(IQueryable<Common.Queryable.DemoRowPermissions2_Document> items, Common.DomRepository repository, Common.ExecutionContext executionContext)
        {
            var filterExpression = new FilterExpression<Common.Queryable.DemoRowPermissions2_Document>();
			filterExpression.Include(GetRowPermissionsRule_SupervisedRegions(executionContext, items, repository));
            filterExpression.Include(GetRowPermissionsRule_WithinDivision(executionContext, items, repository));
            /*RowPermissionsReadInfo ReadFilterExpressions DemoRowPermissions2.Document.'Common.RowPermissionsReadItems'*/
			return filterExpression.GetFilter();
        }

        public IQueryable<Common.Queryable.DemoRowPermissions2_Document> Filter(IQueryable<Common.Queryable.DemoRowPermissions2_Document> source, Common.RowPermissionsWriteItems parameter)
        {
            /*QueryFilterExpressionInfo BeforeFilter DemoRowPermissions2.Document.'Common.RowPermissionsWriteItems'*/
            var filterExpression = GetRowPermissionsWriteExpression(source, _domRepository, _executionContext);
            return FilterExpression<Common.Queryable.DemoRowPermissions2_Document>.OptimizedWhere(source, filterExpression);
        }

        public Expression<Func<Common.Queryable.DemoRowPermissions2_Document, bool>> GetRowPermissionsWriteExpression(IQueryable<Common.Queryable.DemoRowPermissions2_Document> items, Common.DomRepository repository, Common.ExecutionContext executionContext)
        {
            var filterExpression = new FilterExpression<Common.Queryable.DemoRowPermissions2_Document>();
			filterExpression.Exclude(GetRowPermissionsRule_PreviousYears(executionContext, items, repository));
            filterExpression.Include(GetRowPermissionsRule_WithinDivision(executionContext, items, repository));
            /*RowPermissionsWriteInfo WriteFilterExpressions DemoRowPermissions2.Document.'Common.RowPermissionsWriteItems'*/
			return filterExpression.GetFilter();
        }

        private Expression<Func<Common.Queryable.DemoRowPermissions2_Document, bool>> GetRowPermissionsRule_PreviousYears(Common.ExecutionContext context,
            // Additional parameters for backward compatibility, should be removed in future releases:
            IQueryable<Common.Queryable.DemoRowPermissions2_Document> items, Common.DomRepository repository)
        {
            var currentYear = new DateTime(DateTime.Today.Year, 1, 1);
						return item => item.Created < currentYear;
        }

        private Expression<Func<Common.Queryable.DemoRowPermissions2_Document, bool>> GetRowPermissionsRule_SupervisedRegions(Common.ExecutionContext context,
            // Additional parameters for backward compatibility, should be removed in future releases:
            IQueryable<Common.Queryable.DemoRowPermissions2_Document> items, Common.DomRepository repository)
        {
            List<Guid> myRegionIds = context.Repository
                          .DemoRowPermissions2.RegionSupervisor.Query()
                            .Where(rs => rs.Employee.UserName == context.UserInfo.UserName)
                            .Select(rs => rs.Region.ID)
                            .ToList();
						
                        if (myRegionIds.Count == 0)
                            return item => false; // Minor optimization.
						
                        return item => myRegionIds.Contains(item.Division.Region.ID);
        }

        private Expression<Func<Common.Queryable.DemoRowPermissions2_Document, bool>> GetRowPermissionsRule_WithinDivision(Common.ExecutionContext context,
            // Additional parameters for backward compatibility, should be removed in future releases:
            IQueryable<Common.Queryable.DemoRowPermissions2_Document> items, Common.DomRepository repository)
        {
            Guid myDivisionId = context.Repository.DemoRowPermissions2.Employee.Query()
                            .Where(e => e.UserName == context.UserInfo.UserName)
                            .Select(e => e.Division.ID)
                            .SingleOrDefault();
                        return item => item.Division.ID == myDivisionId;
        }

        /*DataStructureInfo RepositoryMembers DemoRowPermissions2.Document*/
    }

    /*DataStructureInfo RepositoryAttributes DemoRowPermissions2.DocumentApproval*/
    public partial class DocumentApproval_Repository : /*DataStructureInfo OverrideBaseType DemoRowPermissions2.DocumentApproval*/ Common.OrmRepositoryBase<Common.Queryable.DemoRowPermissions2_DocumentApproval, DemoRowPermissions2.DocumentApproval> // Common.QueryableRepositoryBase<Common.Queryable.DemoRowPermissions2_DocumentApproval, DemoRowPermissions2.DocumentApproval> // Common.ReadableRepositoryBase<DemoRowPermissions2.DocumentApproval> // global::Common.RepositoryBase
        , IWritableRepository<DemoRowPermissions2.DocumentApproval>, IValidateRepository/*DataStructureInfo RepositoryInterface DemoRowPermissions2.DocumentApproval*/
    {
        private readonly Rhetos.Utilities.ISqlUtility _sqlUtility;
        /*DataStructureInfo RepositoryPrivateMembers DemoRowPermissions2.DocumentApproval*/

        public DocumentApproval_Repository(Common.DomRepository domRepository, Common.ExecutionContext executionContext, Rhetos.Utilities.ISqlUtility _sqlUtility/*DataStructureInfo RepositoryConstructorArguments DemoRowPermissions2.DocumentApproval*/)
        {
            _domRepository = domRepository;
            _executionContext = executionContext;
            this._sqlUtility = _sqlUtility;
            /*DataStructureInfo RepositoryConstructorCode DemoRowPermissions2.DocumentApproval*/
        }

        public static KeyValuePair<string, Type>[] GetReadParameterTypes()
        {
            return new KeyValuePair<string, Type>[]
            {
                new KeyValuePair<string, Type>(@"Common.RowPermissionsReadItems", typeof(Common.RowPermissionsReadItems)),
                new KeyValuePair<string, Type>(@"Common.RowPermissionsWriteItems", typeof(Common.RowPermissionsWriteItems)),
                /*DataStructureInfo ReadParameterTypes DemoRowPermissions2.DocumentApproval*/
            };
        }
        
        public virtual void Save(IEnumerable<DemoRowPermissions2.DocumentApproval> insertedNew, IEnumerable<DemoRowPermissions2.DocumentApproval> updatedNew, IEnumerable<DemoRowPermissions2.DocumentApproval> deletedIds, bool checkUserPermissions = false)
        {
            if (!DomHelper.InitializeSaveMethodItems(ref insertedNew, ref updatedNew, ref deletedIds))
                return;

            /*DataStructureInfo WritableOrm ClearContext DemoRowPermissions2.DocumentApproval*/

            /*DataStructureInfo WritableOrm ArgumentValidation DemoRowPermissions2.DocumentApproval*/

            /*DataStructureInfo WritableOrm Initialization DemoRowPermissions2.DocumentApproval*/

            // Using old data, including lazy loading of navigation properties:

            IEnumerable<Common.Queryable.DemoRowPermissions2_DocumentApproval> deleted = DomHelper.LoadOldDataWithNavigationProperties(deletedIds, this);
            IEnumerable<Common.Queryable.DemoRowPermissions2_DocumentApproval> updated = DomHelper.LoadOldDataWithNavigationProperties(updatedNew, this);

            foreach (var newItem in insertedNew.Concat(updatedNew))
                ShortStringPropertyCodeGenerator.CheckMaxLength(newItem.Note, newItem, "DemoRowPermissions2", "DocumentApproval", "Note");

            /*DataStructureInfo WritableOrm OldDataLoaded DemoRowPermissions2.DocumentApproval*/

            /*DataStructureInfo WritableOrm ProcessedOldData DemoRowPermissions2.DocumentApproval*/

            {
                DomHelper.WriteToDatabase(insertedNew, updatedNew, deletedIds, _executionContext.PersistenceStorage, checkUserPermissions, _sqlUtility,
                    out Exception saveException, out Rhetos.RhetosException interpretedException);

                if (saveException != null)
                {
                    if (interpretedException is Rhetos.UserException && Rhetos.Utilities.MsSqlUtility.IsReferenceErrorOnInsertUpdate(interpretedException, @"DemoRowPermissions2.Employee", @"ID", @"FK_DocumentApproval_Employee_ApprovedByID"))
                        ((Rhetos.UserException)interpretedException).SystemMessage = @"DataStructure:DemoRowPermissions2.DocumentApproval,Property:ApprovedByID,Referenced:DemoRowPermissions2.Employee";
                    /*DataStructureInfo WritableOrm OnDatabaseError DemoRowPermissions2.DocumentApproval*/
                    DomHelper.ThrowInterpretedException(checkUserPermissions, saveException, interpretedException, _sqlUtility, "DemoRowPermissions2.DocumentApproval");
                }
            }

            deleted = null;
            updated = this.Query(updatedNew.Select(item => item.ID));
            IEnumerable<Common.Queryable.DemoRowPermissions2_DocumentApproval> inserted = this.Query(insertedNew.Select(item => item.ID));

            bool allEffectsCompleted = false;
            try
            {
                /*DataStructureInfo WritableOrm OnSaveTag1 DemoRowPermissions2.DocumentApproval*/

                /*DataStructureInfo WritableOrm OnSaveTag2 DemoRowPermissions2.DocumentApproval*/

                Rhetos.Dom.DefaultConcepts.InvalidDataMessage.ValidateOnSave(insertedNew, updatedNew, this, "DemoRowPermissions2.DocumentApproval");

                /*DataStructureInfo WritableOrm AfterSave DemoRowPermissions2.DocumentApproval*/

                allEffectsCompleted = true;
            }
            finally
            {
                if (!allEffectsCompleted)
                    _executionContext.PersistenceTransaction.DiscardOnDispose();
            }
        }

        public IEnumerable<Rhetos.Dom.DefaultConcepts.InvalidDataMessage> Validate(IList<Guid> ids, bool onSave)
        {
            /*DataStructureInfo WritableOrm OnSaveValidate DemoRowPermissions2.DocumentApproval*/
            yield break;
        }

        public IQueryable<Common.Queryable.DemoRowPermissions2_DocumentApproval> Filter(IQueryable<Common.Queryable.DemoRowPermissions2_DocumentApproval> source, Common.RowPermissionsReadItems parameter)
        {
            /*QueryFilterExpressionInfo BeforeFilter DemoRowPermissions2.DocumentApproval.'Common.RowPermissionsReadItems'*/
            var filterExpression = GetRowPermissionsReadExpression(source, _domRepository, _executionContext);
            return FilterExpression<Common.Queryable.DemoRowPermissions2_DocumentApproval>.OptimizedWhere(source, filterExpression);
        }

        public Expression<Func<Common.Queryable.DemoRowPermissions2_DocumentApproval, bool>> GetRowPermissionsReadExpression(IQueryable<Common.Queryable.DemoRowPermissions2_DocumentApproval> items, Common.DomRepository repository, Common.ExecutionContext executionContext)
        {
            var filterExpression = new FilterExpression<Common.Queryable.DemoRowPermissions2_DocumentApproval>();
			{
                // Inheriting row permissions from DemoRowPermissions2.Document:
                var sameMembers = new Tuple<string, string>[] { /*RowPermissionsInheritReadInfo SameMembersRead DemoRowPermissions2.DocumentApproval.DemoRowPermissions2.Document.Base*/ };
                var parentRepository = _domRepository.DemoRowPermissions2.Document;
                var parentRowPermissionsExpression = parentRepository.GetRowPermissionsReadExpression(parentRepository.Query(), _domRepository, _executionContext);
                var replacedExpression = new ReplaceWithReference<Common.Queryable.DemoRowPermissions2_Document, Common.Queryable.DemoRowPermissions2_DocumentApproval>(
                    parentRowPermissionsExpression, "Base" , "documentApprovalItem", sameMembers , @"Extension_DocumentApproval"/*RowPermissionsInheritReadInfo ExtensionReferenceRead DemoRowPermissions2.DocumentApproval.DemoRowPermissions2.Document.Base*/);
                filterExpression.Include(replacedExpression.NewExpression);
            }
            /*RowPermissionsReadInfo ReadFilterExpressions DemoRowPermissions2.DocumentApproval.'Common.RowPermissionsReadItems'*/
			return filterExpression.GetFilter();
        }

        public IQueryable<Common.Queryable.DemoRowPermissions2_DocumentApproval> Filter(IQueryable<Common.Queryable.DemoRowPermissions2_DocumentApproval> source, Common.RowPermissionsWriteItems parameter)
        {
            /*QueryFilterExpressionInfo BeforeFilter DemoRowPermissions2.DocumentApproval.'Common.RowPermissionsWriteItems'*/
            var filterExpression = GetRowPermissionsWriteExpression(source, _domRepository, _executionContext);
            return FilterExpression<Common.Queryable.DemoRowPermissions2_DocumentApproval>.OptimizedWhere(source, filterExpression);
        }

        public Expression<Func<Common.Queryable.DemoRowPermissions2_DocumentApproval, bool>> GetRowPermissionsWriteExpression(IQueryable<Common.Queryable.DemoRowPermissions2_DocumentApproval> items, Common.DomRepository repository, Common.ExecutionContext executionContext)
        {
            var filterExpression = new FilterExpression<Common.Queryable.DemoRowPermissions2_DocumentApproval>();
			filterExpression.Exclude(GetRowPermissionsRule_ApprovedByCurrentUser(executionContext, items, repository));
            {
                // Inheriting row permissions from DemoRowPermissions2.Document:
                var sameMembers = new Tuple<string, string>[] { /*RowPermissionsInheritWriteInfo SameMembersWrite DemoRowPermissions2.DocumentApproval.DemoRowPermissions2.Document.Base*/ };
                var parentRepository = _domRepository.DemoRowPermissions2.Document;
                var parentRowPermissionsExpression = parentRepository.GetRowPermissionsWriteExpression(parentRepository.Query(), _domRepository, _executionContext);
                var replacedExpression = new ReplaceWithReference<Common.Queryable.DemoRowPermissions2_Document, Common.Queryable.DemoRowPermissions2_DocumentApproval>(
                    parentRowPermissionsExpression, "Base" , "documentApprovalItem", sameMembers , @"Extension_DocumentApproval"/*RowPermissionsInheritWriteInfo ExtensionReferenceWrite DemoRowPermissions2.DocumentApproval.DemoRowPermissions2.Document.Base*/);
                filterExpression.Include(replacedExpression.NewExpression);
            }
            /*RowPermissionsWriteInfo WriteFilterExpressions DemoRowPermissions2.DocumentApproval.'Common.RowPermissionsWriteItems'*/
			return filterExpression.GetFilter();
        }

        private Expression<Func<Common.Queryable.DemoRowPermissions2_DocumentApproval, bool>> GetRowPermissionsRule_ApprovedByCurrentUser(Common.ExecutionContext context,
            // Additional parameters for backward compatibility, should be removed in future releases:
            IQueryable<Common.Queryable.DemoRowPermissions2_DocumentApproval> items, Common.DomRepository repository)
        {
            var myEmployeeId = context.Repository.DemoRowPermissions2.Employee.Query()
                            .Where(e => e.UserName == context.UserInfo.UserName)
                            .Select(e => e.ID)
                            .SingleOrDefault();
                        return item => item.ApprovedBy.ID != myEmployeeId;
        }

        /*DataStructureInfo RepositoryMembers DemoRowPermissions2.DocumentApproval*/
    }

    /*DataStructureInfo RepositoryAttributes DemoRowPermissions2.DocumentComment*/
    public partial class DocumentComment_Repository : /*DataStructureInfo OverrideBaseType DemoRowPermissions2.DocumentComment*/ Common.OrmRepositoryBase<Common.Queryable.DemoRowPermissions2_DocumentComment, DemoRowPermissions2.DocumentComment> // Common.QueryableRepositoryBase<Common.Queryable.DemoRowPermissions2_DocumentComment, DemoRowPermissions2.DocumentComment> // Common.ReadableRepositoryBase<DemoRowPermissions2.DocumentComment> // global::Common.RepositoryBase
        , IWritableRepository<DemoRowPermissions2.DocumentComment>, IValidateRepository/*DataStructureInfo RepositoryInterface DemoRowPermissions2.DocumentComment*/
    {
        private readonly Rhetos.Utilities.ISqlUtility _sqlUtility;
        /*DataStructureInfo RepositoryPrivateMembers DemoRowPermissions2.DocumentComment*/

        public DocumentComment_Repository(Common.DomRepository domRepository, Common.ExecutionContext executionContext, Rhetos.Utilities.ISqlUtility _sqlUtility/*DataStructureInfo RepositoryConstructorArguments DemoRowPermissions2.DocumentComment*/)
        {
            _domRepository = domRepository;
            _executionContext = executionContext;
            this._sqlUtility = _sqlUtility;
            /*DataStructureInfo RepositoryConstructorCode DemoRowPermissions2.DocumentComment*/
        }

        public static KeyValuePair<string, Type>[] GetReadParameterTypes()
        {
            return new KeyValuePair<string, Type>[]
            {
                new KeyValuePair<string, Type>(@"Common.RowPermissionsReadItems", typeof(Common.RowPermissionsReadItems)),
                new KeyValuePair<string, Type>(@"Common.RowPermissionsWriteItems", typeof(Common.RowPermissionsWriteItems)),
                new KeyValuePair<string, Type>(@"DemoRowPermissions2.SystemRequiredDocument", typeof(DemoRowPermissions2.SystemRequiredDocument)),
                /*DataStructureInfo ReadParameterTypes DemoRowPermissions2.DocumentComment*/
            };
        }
        
        public virtual void Save(IEnumerable<DemoRowPermissions2.DocumentComment> insertedNew, IEnumerable<DemoRowPermissions2.DocumentComment> updatedNew, IEnumerable<DemoRowPermissions2.DocumentComment> deletedIds, bool checkUserPermissions = false)
        {
            if (!DomHelper.InitializeSaveMethodItems(ref insertedNew, ref updatedNew, ref deletedIds))
                return;

            /*DataStructureInfo WritableOrm ClearContext DemoRowPermissions2.DocumentComment*/

            /*DataStructureInfo WritableOrm ArgumentValidation DemoRowPermissions2.DocumentComment*/

            /*DataStructureInfo WritableOrm Initialization DemoRowPermissions2.DocumentComment*/

            // Using old data, including lazy loading of navigation properties:

            IEnumerable<Common.Queryable.DemoRowPermissions2_DocumentComment> deleted = DomHelper.LoadOldDataWithNavigationProperties(deletedIds, this);
            IEnumerable<Common.Queryable.DemoRowPermissions2_DocumentComment> updated = DomHelper.LoadOldDataWithNavigationProperties(updatedNew, this);

            foreach (var newItem in insertedNew.Concat(updatedNew))
                ShortStringPropertyCodeGenerator.CheckMaxLength(newItem.Comment, newItem, "DemoRowPermissions2", "DocumentComment", "Comment");

            /*DataStructureInfo WritableOrm OldDataLoaded DemoRowPermissions2.DocumentComment*/

            /*DataStructureInfo WritableOrm ProcessedOldData DemoRowPermissions2.DocumentComment*/

            {
                DomHelper.WriteToDatabase(insertedNew, updatedNew, deletedIds, _executionContext.PersistenceStorage, checkUserPermissions, _sqlUtility,
                    out Exception saveException, out Rhetos.RhetosException interpretedException);

                if (saveException != null)
                {
                    if (interpretedException is Rhetos.UserException && Rhetos.Utilities.MsSqlUtility.IsReferenceErrorOnInsertUpdate(interpretedException, @"DemoRowPermissions2.Document", @"ID", @"FK_DocumentComment_Document_DocumentID"))
                        ((Rhetos.UserException)interpretedException).SystemMessage = @"DataStructure:DemoRowPermissions2.DocumentComment,Property:DocumentID,Referenced:DemoRowPermissions2.Document";
                    /*DataStructureInfo WritableOrm OnDatabaseError DemoRowPermissions2.DocumentComment*/
                    DomHelper.ThrowInterpretedException(checkUserPermissions, saveException, interpretedException, _sqlUtility, "DemoRowPermissions2.DocumentComment");
                }
            }

            deleted = null;
            updated = this.Query(updatedNew.Select(item => item.ID));
            IEnumerable<Common.Queryable.DemoRowPermissions2_DocumentComment> inserted = this.Query(insertedNew.Select(item => item.ID));

            bool allEffectsCompleted = false;
            try
            {
                /*DataStructureInfo WritableOrm OnSaveTag1 DemoRowPermissions2.DocumentComment*/

                /*DataStructureInfo WritableOrm OnSaveTag2 DemoRowPermissions2.DocumentComment*/

                Rhetos.Dom.DefaultConcepts.InvalidDataMessage.ValidateOnSave(insertedNew, updatedNew, this, "DemoRowPermissions2.DocumentComment");

                /*DataStructureInfo WritableOrm AfterSave DemoRowPermissions2.DocumentComment*/

                allEffectsCompleted = true;
            }
            finally
            {
                if (!allEffectsCompleted)
                    _executionContext.PersistenceTransaction.DiscardOnDispose();
            }
        }

        public IEnumerable<Rhetos.Dom.DefaultConcepts.InvalidDataMessage> Validate(IList<Guid> ids, bool onSave)
        {
            if (onSave)
            {
                var errorIds = this.Filter(this.Query(ids), new SystemRequiredDocument()).Select(item => item.ID).ToArray();
                if (errorIds.Count() > 0)
                    foreach (var error in GetErrorMessage_SystemRequiredDocument(errorIds))
                        yield return error;
            }
            /*DataStructureInfo WritableOrm OnSaveValidate DemoRowPermissions2.DocumentComment*/
            yield break;
        }

        public IEnumerable<InvalidDataMessage> GetErrorMessage_SystemRequiredDocument(IEnumerable<Guid> invalidData_Ids)
        {
            IDictionary<string, object> metadata = new Dictionary<string, object>();
            metadata["Validation"] = @"SystemRequiredDocument";
            metadata[@"Property"] = @"Document";
            /*InvalidDataInfo ErrorMetadata DemoRowPermissions2.DocumentComment.SystemRequiredDocument*/
            /*InvalidDataInfo CustomValidationResult DemoRowPermissions2.DocumentComment.SystemRequiredDocument*/
            return invalidData_Ids.Select(id => new InvalidDataMessage
            {
                ID = id,
                Message = @"System required property {0} is not set.",
                MessageParameters = new object[] { @"Reference DemoRowPermissions2.DocumentComment.Document" },
                Metadata = metadata
            });
        }

        public IQueryable<Common.Queryable.DemoRowPermissions2_DocumentComment> Filter(IQueryable<Common.Queryable.DemoRowPermissions2_DocumentComment> source, Common.RowPermissionsReadItems parameter)
        {
            /*QueryFilterExpressionInfo BeforeFilter DemoRowPermissions2.DocumentComment.'Common.RowPermissionsReadItems'*/
            var filterExpression = GetRowPermissionsReadExpression(source, _domRepository, _executionContext);
            return FilterExpression<Common.Queryable.DemoRowPermissions2_DocumentComment>.OptimizedWhere(source, filterExpression);
        }

        public Expression<Func<Common.Queryable.DemoRowPermissions2_DocumentComment, bool>> GetRowPermissionsReadExpression(IQueryable<Common.Queryable.DemoRowPermissions2_DocumentComment> items, Common.DomRepository repository, Common.ExecutionContext executionContext)
        {
            var filterExpression = new FilterExpression<Common.Queryable.DemoRowPermissions2_DocumentComment>();
			{
                // Inheriting row permissions from DemoRowPermissions2.Document:
                var sameMembers = new Tuple<string, string>[] { /*RowPermissionsInheritReadInfo SameMembersRead DemoRowPermissions2.DocumentComment.DemoRowPermissions2.Document.Document*/ };
                var parentRepository = _domRepository.DemoRowPermissions2.Document;
                var parentRowPermissionsExpression = parentRepository.GetRowPermissionsReadExpression(parentRepository.Query(), _domRepository, _executionContext);
                var replacedExpression = new ReplaceWithReference<Common.Queryable.DemoRowPermissions2_Document, Common.Queryable.DemoRowPermissions2_DocumentComment>(
                    parentRowPermissionsExpression, "Document" , "documentCommentItem", sameMembers /*RowPermissionsInheritReadInfo ExtensionReferenceRead DemoRowPermissions2.DocumentComment.DemoRowPermissions2.Document.Document*/);
                filterExpression.Include(replacedExpression.NewExpression);
            }
            /*RowPermissionsReadInfo ReadFilterExpressions DemoRowPermissions2.DocumentComment.'Common.RowPermissionsReadItems'*/
			return filterExpression.GetFilter();
        }

        public IQueryable<Common.Queryable.DemoRowPermissions2_DocumentComment> Filter(IQueryable<Common.Queryable.DemoRowPermissions2_DocumentComment> source, Common.RowPermissionsWriteItems parameter)
        {
            /*QueryFilterExpressionInfo BeforeFilter DemoRowPermissions2.DocumentComment.'Common.RowPermissionsWriteItems'*/
            var filterExpression = GetRowPermissionsWriteExpression(source, _domRepository, _executionContext);
            return FilterExpression<Common.Queryable.DemoRowPermissions2_DocumentComment>.OptimizedWhere(source, filterExpression);
        }

        public Expression<Func<Common.Queryable.DemoRowPermissions2_DocumentComment, bool>> GetRowPermissionsWriteExpression(IQueryable<Common.Queryable.DemoRowPermissions2_DocumentComment> items, Common.DomRepository repository, Common.ExecutionContext executionContext)
        {
            var filterExpression = new FilterExpression<Common.Queryable.DemoRowPermissions2_DocumentComment>();
			{
                // Inheriting row permissions from DemoRowPermissions2.Document:
                var sameMembers = new Tuple<string, string>[] { /*RowPermissionsInheritWriteInfo SameMembersWrite DemoRowPermissions2.DocumentComment.DemoRowPermissions2.Document.Document*/ };
                var parentRepository = _domRepository.DemoRowPermissions2.Document;
                var parentRowPermissionsExpression = parentRepository.GetRowPermissionsWriteExpression(parentRepository.Query(), _domRepository, _executionContext);
                var replacedExpression = new ReplaceWithReference<Common.Queryable.DemoRowPermissions2_Document, Common.Queryable.DemoRowPermissions2_DocumentComment>(
                    parentRowPermissionsExpression, "Document" , "documentCommentItem", sameMembers /*RowPermissionsInheritWriteInfo ExtensionReferenceWrite DemoRowPermissions2.DocumentComment.DemoRowPermissions2.Document.Document*/);
                filterExpression.Include(replacedExpression.NewExpression);
            }
            /*RowPermissionsWriteInfo WriteFilterExpressions DemoRowPermissions2.DocumentComment.'Common.RowPermissionsWriteItems'*/
			return filterExpression.GetFilter();
        }

        public IQueryable<Common.Queryable.DemoRowPermissions2_DocumentComment> Filter(IQueryable<Common.Queryable.DemoRowPermissions2_DocumentComment> source, DemoRowPermissions2.SystemRequiredDocument parameter)
        {
            /*QueryFilterExpressionInfo BeforeFilter DemoRowPermissions2.DocumentComment.'DemoRowPermissions2.SystemRequiredDocument'*/
            return source.Where(item => item.Document == null);
        }

        /*DataStructureInfo RepositoryMembers DemoRowPermissions2.DocumentComment*/
    }

    /*DataStructureInfo RepositoryAttributes DemoRowPermissions2.DocumentInfo*/
    public partial class DocumentInfo_Repository : /*DataStructureInfo OverrideBaseType DemoRowPermissions2.DocumentInfo*/ Common.OrmRepositoryBase<Common.Queryable.DemoRowPermissions2_DocumentInfo, DemoRowPermissions2.DocumentInfo> // Common.QueryableRepositoryBase<Common.Queryable.DemoRowPermissions2_DocumentInfo, DemoRowPermissions2.DocumentInfo> // Common.ReadableRepositoryBase<DemoRowPermissions2.DocumentInfo> // global::Common.RepositoryBase
        /*DataStructureInfo RepositoryInterface DemoRowPermissions2.DocumentInfo*/
    {
        /*DataStructureInfo RepositoryPrivateMembers DemoRowPermissions2.DocumentInfo*/

        public DocumentInfo_Repository(Common.DomRepository domRepository, Common.ExecutionContext executionContext/*DataStructureInfo RepositoryConstructorArguments DemoRowPermissions2.DocumentInfo*/)
        {
            _domRepository = domRepository;
            _executionContext = executionContext;
            /*DataStructureInfo RepositoryConstructorCode DemoRowPermissions2.DocumentInfo*/
        }

        public static KeyValuePair<string, Type>[] GetReadParameterTypes()
        {
            return new KeyValuePair<string, Type>[]
            {
                new KeyValuePair<string, Type>(@"Common.RowPermissionsReadItems", typeof(Common.RowPermissionsReadItems)),
                new KeyValuePair<string, Type>(@"Common.RowPermissionsWriteItems", typeof(Common.RowPermissionsWriteItems)),
                /*DataStructureInfo ReadParameterTypes DemoRowPermissions2.DocumentInfo*/
            };
        }
        
        public IQueryable<Common.Queryable.DemoRowPermissions2_DocumentInfo> Filter(IQueryable<Common.Queryable.DemoRowPermissions2_DocumentInfo> source, Common.RowPermissionsReadItems parameter)
        {
            /*QueryFilterExpressionInfo BeforeFilter DemoRowPermissions2.DocumentInfo.'Common.RowPermissionsReadItems'*/
            var filterExpression = GetRowPermissionsReadExpression(source, _domRepository, _executionContext);
            return FilterExpression<Common.Queryable.DemoRowPermissions2_DocumentInfo>.OptimizedWhere(source, filterExpression);
        }

        public Expression<Func<Common.Queryable.DemoRowPermissions2_DocumentInfo, bool>> GetRowPermissionsReadExpression(IQueryable<Common.Queryable.DemoRowPermissions2_DocumentInfo> items, Common.DomRepository repository, Common.ExecutionContext executionContext)
        {
            var filterExpression = new FilterExpression<Common.Queryable.DemoRowPermissions2_DocumentInfo>();
			{
                // Inheriting row permissions from DemoRowPermissions2.Document:
                var sameMembers = new Tuple<string, string>[] { Tuple.Create(@"Division2", @"Division"), Tuple.Create(@"Division2ID", @"DivisionID"), /*RowPermissionsInheritReadInfo SameMembersRead DemoRowPermissions2.DocumentInfo.DemoRowPermissions2.Document.Base*/ };
                var parentRepository = _domRepository.DemoRowPermissions2.Document;
                var parentRowPermissionsExpression = parentRepository.GetRowPermissionsReadExpression(parentRepository.Query(), _domRepository, _executionContext);
                var replacedExpression = new ReplaceWithReference<Common.Queryable.DemoRowPermissions2_Document, Common.Queryable.DemoRowPermissions2_DocumentInfo>(
                    parentRowPermissionsExpression, "Base" , "documentInfoItem", sameMembers , @"Extension_DocumentInfo"/*RowPermissionsInheritReadInfo ExtensionReferenceRead DemoRowPermissions2.DocumentInfo.DemoRowPermissions2.Document.Base*/);
                filterExpression.Include(replacedExpression.NewExpression);
            }
            /*RowPermissionsReadInfo ReadFilterExpressions DemoRowPermissions2.DocumentInfo.'Common.RowPermissionsReadItems'*/
			return filterExpression.GetFilter();
        }

        public IQueryable<Common.Queryable.DemoRowPermissions2_DocumentInfo> Filter(IQueryable<Common.Queryable.DemoRowPermissions2_DocumentInfo> source, Common.RowPermissionsWriteItems parameter)
        {
            /*QueryFilterExpressionInfo BeforeFilter DemoRowPermissions2.DocumentInfo.'Common.RowPermissionsWriteItems'*/
            var filterExpression = GetRowPermissionsWriteExpression(source, _domRepository, _executionContext);
            return FilterExpression<Common.Queryable.DemoRowPermissions2_DocumentInfo>.OptimizedWhere(source, filterExpression);
        }

        public Expression<Func<Common.Queryable.DemoRowPermissions2_DocumentInfo, bool>> GetRowPermissionsWriteExpression(IQueryable<Common.Queryable.DemoRowPermissions2_DocumentInfo> items, Common.DomRepository repository, Common.ExecutionContext executionContext)
        {
            var filterExpression = new FilterExpression<Common.Queryable.DemoRowPermissions2_DocumentInfo>();
			{
                // Inheriting row permissions from DemoRowPermissions2.Document:
                var sameMembers = new Tuple<string, string>[] { Tuple.Create(@"Division2", @"Division"), Tuple.Create(@"Division2ID", @"DivisionID"), /*RowPermissionsInheritWriteInfo SameMembersWrite DemoRowPermissions2.DocumentInfo.DemoRowPermissions2.Document.Base*/ };
                var parentRepository = _domRepository.DemoRowPermissions2.Document;
                var parentRowPermissionsExpression = parentRepository.GetRowPermissionsWriteExpression(parentRepository.Query(), _domRepository, _executionContext);
                var replacedExpression = new ReplaceWithReference<Common.Queryable.DemoRowPermissions2_Document, Common.Queryable.DemoRowPermissions2_DocumentInfo>(
                    parentRowPermissionsExpression, "Base" , "documentInfoItem", sameMembers , @"Extension_DocumentInfo"/*RowPermissionsInheritWriteInfo ExtensionReferenceWrite DemoRowPermissions2.DocumentInfo.DemoRowPermissions2.Document.Base*/);
                filterExpression.Include(replacedExpression.NewExpression);
            }
            /*RowPermissionsWriteInfo WriteFilterExpressions DemoRowPermissions2.DocumentInfo.'Common.RowPermissionsWriteItems'*/
			return filterExpression.GetFilter();
        }

        /*DataStructureInfo RepositoryMembers DemoRowPermissions2.DocumentInfo*/
    }

    /*DataStructureInfo RepositoryAttributes DemoRowPermissions2.Employee*/
    public partial class Employee_Repository : /*DataStructureInfo OverrideBaseType DemoRowPermissions2.Employee*/ Common.OrmRepositoryBase<Common.Queryable.DemoRowPermissions2_Employee, DemoRowPermissions2.Employee> // Common.QueryableRepositoryBase<Common.Queryable.DemoRowPermissions2_Employee, DemoRowPermissions2.Employee> // Common.ReadableRepositoryBase<DemoRowPermissions2.Employee> // global::Common.RepositoryBase
        , IWritableRepository<DemoRowPermissions2.Employee>, IValidateRepository/*DataStructureInfo RepositoryInterface DemoRowPermissions2.Employee*/
    {
        private readonly Rhetos.Utilities.ISqlUtility _sqlUtility;
        /*DataStructureInfo RepositoryPrivateMembers DemoRowPermissions2.Employee*/

        public Employee_Repository(Common.DomRepository domRepository, Common.ExecutionContext executionContext, Rhetos.Utilities.ISqlUtility _sqlUtility/*DataStructureInfo RepositoryConstructorArguments DemoRowPermissions2.Employee*/)
        {
            _domRepository = domRepository;
            _executionContext = executionContext;
            this._sqlUtility = _sqlUtility;
            /*DataStructureInfo RepositoryConstructorCode DemoRowPermissions2.Employee*/
        }

        public static KeyValuePair<string, Type>[] GetReadParameterTypes()
        {
            return new KeyValuePair<string, Type>[]
            {
                /*DataStructureInfo ReadParameterTypes DemoRowPermissions2.Employee*/
            };
        }
        
        public virtual void Save(IEnumerable<DemoRowPermissions2.Employee> insertedNew, IEnumerable<DemoRowPermissions2.Employee> updatedNew, IEnumerable<DemoRowPermissions2.Employee> deletedIds, bool checkUserPermissions = false)
        {
            if (!DomHelper.InitializeSaveMethodItems(ref insertedNew, ref updatedNew, ref deletedIds))
                return;

            /*DataStructureInfo WritableOrm ClearContext DemoRowPermissions2.Employee*/

            /*DataStructureInfo WritableOrm ArgumentValidation DemoRowPermissions2.Employee*/

            /*DataStructureInfo WritableOrm Initialization DemoRowPermissions2.Employee*/

            // Using old data, including lazy loading of navigation properties:

            IEnumerable<Common.Queryable.DemoRowPermissions2_Employee> deleted = DomHelper.LoadOldDataWithNavigationProperties(deletedIds, this);
            IEnumerable<Common.Queryable.DemoRowPermissions2_Employee> updated = DomHelper.LoadOldDataWithNavigationProperties(updatedNew, this);

            foreach (var newItem in insertedNew.Concat(updatedNew))
                ShortStringPropertyCodeGenerator.CheckMaxLength(newItem.UserName, newItem, "DemoRowPermissions2", "Employee", "UserName");

            /*DataStructureInfo WritableOrm OldDataLoaded DemoRowPermissions2.Employee*/

            /*DataStructureInfo WritableOrm ProcessedOldData DemoRowPermissions2.Employee*/

            {
                DomHelper.WriteToDatabase(insertedNew, updatedNew, deletedIds, _executionContext.PersistenceStorage, checkUserPermissions, _sqlUtility,
                    out Exception saveException, out Rhetos.RhetosException interpretedException);

                if (saveException != null)
                {
                    if (interpretedException is Rhetos.UserException && Rhetos.Utilities.MsSqlUtility.IsReferenceErrorOnDelete(interpretedException, @"DemoRowPermissions2.DocumentApproval", @"ApprovedByID", @"FK_DocumentApproval_Employee_ApprovedByID"))
                        ((Rhetos.UserException)interpretedException).SystemMessage = @"DataStructure:DemoRowPermissions2.DocumentApproval,Property:ApprovedByID,Referenced:DemoRowPermissions2.Employee";
                    if (interpretedException is Rhetos.UserException && Rhetos.Utilities.MsSqlUtility.IsReferenceErrorOnInsertUpdate(interpretedException, @"DemoRowPermissions2.Division", @"ID", @"FK_Employee_Division_DivisionID"))
                        ((Rhetos.UserException)interpretedException).SystemMessage = @"DataStructure:DemoRowPermissions2.Employee,Property:DivisionID,Referenced:DemoRowPermissions2.Division";
                    if (interpretedException is Rhetos.UserException && Rhetos.Utilities.MsSqlUtility.IsReferenceErrorOnDelete(interpretedException, @"DemoRowPermissions2.RegionSupervisor", @"EmployeeID", @"FK_RegionSupervisor_Employee_EmployeeID"))
                        ((Rhetos.UserException)interpretedException).SystemMessage = @"DataStructure:DemoRowPermissions2.RegionSupervisor,Property:EmployeeID,Referenced:DemoRowPermissions2.Employee";
                    /*DataStructureInfo WritableOrm OnDatabaseError DemoRowPermissions2.Employee*/
                    DomHelper.ThrowInterpretedException(checkUserPermissions, saveException, interpretedException, _sqlUtility, "DemoRowPermissions2.Employee");
                }
            }

            deleted = null;
            updated = this.Query(updatedNew.Select(item => item.ID));
            IEnumerable<Common.Queryable.DemoRowPermissions2_Employee> inserted = this.Query(insertedNew.Select(item => item.ID));

            bool allEffectsCompleted = false;
            try
            {
                /*DataStructureInfo WritableOrm OnSaveTag1 DemoRowPermissions2.Employee*/

                /*DataStructureInfo WritableOrm OnSaveTag2 DemoRowPermissions2.Employee*/

                Rhetos.Dom.DefaultConcepts.InvalidDataMessage.ValidateOnSave(insertedNew, updatedNew, this, "DemoRowPermissions2.Employee");

                /*DataStructureInfo WritableOrm AfterSave DemoRowPermissions2.Employee*/

                allEffectsCompleted = true;
            }
            finally
            {
                if (!allEffectsCompleted)
                    _executionContext.PersistenceTransaction.DiscardOnDispose();
            }
        }

        public IEnumerable<Rhetos.Dom.DefaultConcepts.InvalidDataMessage> Validate(IList<Guid> ids, bool onSave)
        {
            /*DataStructureInfo WritableOrm OnSaveValidate DemoRowPermissions2.Employee*/
            yield break;
        }

        /*DataStructureInfo RepositoryMembers DemoRowPermissions2.Employee*/
    }

    /*DataStructureInfo RepositoryAttributes DemoRowPermissions2.Region*/
    public partial class Region_Repository : /*DataStructureInfo OverrideBaseType DemoRowPermissions2.Region*/ Common.OrmRepositoryBase<Common.Queryable.DemoRowPermissions2_Region, DemoRowPermissions2.Region> // Common.QueryableRepositoryBase<Common.Queryable.DemoRowPermissions2_Region, DemoRowPermissions2.Region> // Common.ReadableRepositoryBase<DemoRowPermissions2.Region> // global::Common.RepositoryBase
        , IWritableRepository<DemoRowPermissions2.Region>, IValidateRepository/*DataStructureInfo RepositoryInterface DemoRowPermissions2.Region*/
    {
        private readonly Rhetos.Utilities.ISqlUtility _sqlUtility;
        /*DataStructureInfo RepositoryPrivateMembers DemoRowPermissions2.Region*/

        public Region_Repository(Common.DomRepository domRepository, Common.ExecutionContext executionContext, Rhetos.Utilities.ISqlUtility _sqlUtility/*DataStructureInfo RepositoryConstructorArguments DemoRowPermissions2.Region*/)
        {
            _domRepository = domRepository;
            _executionContext = executionContext;
            this._sqlUtility = _sqlUtility;
            /*DataStructureInfo RepositoryConstructorCode DemoRowPermissions2.Region*/
        }

        public static KeyValuePair<string, Type>[] GetReadParameterTypes()
        {
            return new KeyValuePair<string, Type>[]
            {
                /*DataStructureInfo ReadParameterTypes DemoRowPermissions2.Region*/
            };
        }
        
        public virtual void Save(IEnumerable<DemoRowPermissions2.Region> insertedNew, IEnumerable<DemoRowPermissions2.Region> updatedNew, IEnumerable<DemoRowPermissions2.Region> deletedIds, bool checkUserPermissions = false)
        {
            if (!DomHelper.InitializeSaveMethodItems(ref insertedNew, ref updatedNew, ref deletedIds))
                return;

            /*DataStructureInfo WritableOrm ClearContext DemoRowPermissions2.Region*/

            /*DataStructureInfo WritableOrm ArgumentValidation DemoRowPermissions2.Region*/

            /*DataStructureInfo WritableOrm Initialization DemoRowPermissions2.Region*/

            // Using old data, including lazy loading of navigation properties:

            IEnumerable<Common.Queryable.DemoRowPermissions2_Region> deleted = DomHelper.LoadOldDataWithNavigationProperties(deletedIds, this);
            IEnumerable<Common.Queryable.DemoRowPermissions2_Region> updated = DomHelper.LoadOldDataWithNavigationProperties(updatedNew, this);

            foreach (var newItem in insertedNew.Concat(updatedNew))
                ShortStringPropertyCodeGenerator.CheckMaxLength(newItem.Name, newItem, "DemoRowPermissions2", "Region", "Name");

            /*DataStructureInfo WritableOrm OldDataLoaded DemoRowPermissions2.Region*/

            /*DataStructureInfo WritableOrm ProcessedOldData DemoRowPermissions2.Region*/

            {
                DomHelper.WriteToDatabase(insertedNew, updatedNew, deletedIds, _executionContext.PersistenceStorage, checkUserPermissions, _sqlUtility,
                    out Exception saveException, out Rhetos.RhetosException interpretedException);

                if (saveException != null)
                {
                    if (interpretedException is Rhetos.UserException && Rhetos.Utilities.MsSqlUtility.IsReferenceErrorOnDelete(interpretedException, @"DemoRowPermissions2.Division", @"RegionID", @"FK_Division_Region_RegionID"))
                        ((Rhetos.UserException)interpretedException).SystemMessage = @"DataStructure:DemoRowPermissions2.Division,Property:RegionID,Referenced:DemoRowPermissions2.Region";
                    if (interpretedException is Rhetos.UserException && Rhetos.Utilities.MsSqlUtility.IsReferenceErrorOnDelete(interpretedException, @"DemoRowPermissions2.RegionSupervisor", @"RegionID", @"FK_RegionSupervisor_Region_RegionID"))
                        ((Rhetos.UserException)interpretedException).SystemMessage = @"DataStructure:DemoRowPermissions2.RegionSupervisor,Property:RegionID,Referenced:DemoRowPermissions2.Region";
                    /*DataStructureInfo WritableOrm OnDatabaseError DemoRowPermissions2.Region*/
                    DomHelper.ThrowInterpretedException(checkUserPermissions, saveException, interpretedException, _sqlUtility, "DemoRowPermissions2.Region");
                }
            }

            deleted = null;
            updated = this.Query(updatedNew.Select(item => item.ID));
            IEnumerable<Common.Queryable.DemoRowPermissions2_Region> inserted = this.Query(insertedNew.Select(item => item.ID));

            bool allEffectsCompleted = false;
            try
            {
                /*DataStructureInfo WritableOrm OnSaveTag1 DemoRowPermissions2.Region*/

                /*DataStructureInfo WritableOrm OnSaveTag2 DemoRowPermissions2.Region*/

                Rhetos.Dom.DefaultConcepts.InvalidDataMessage.ValidateOnSave(insertedNew, updatedNew, this, "DemoRowPermissions2.Region");

                /*DataStructureInfo WritableOrm AfterSave DemoRowPermissions2.Region*/

                allEffectsCompleted = true;
            }
            finally
            {
                if (!allEffectsCompleted)
                    _executionContext.PersistenceTransaction.DiscardOnDispose();
            }
        }

        public IEnumerable<Rhetos.Dom.DefaultConcepts.InvalidDataMessage> Validate(IList<Guid> ids, bool onSave)
        {
            /*DataStructureInfo WritableOrm OnSaveValidate DemoRowPermissions2.Region*/
            yield break;
        }

        /*DataStructureInfo RepositoryMembers DemoRowPermissions2.Region*/
    }

    /*DataStructureInfo RepositoryAttributes DemoRowPermissions2.RegionSupervisor*/
    public partial class RegionSupervisor_Repository : /*DataStructureInfo OverrideBaseType DemoRowPermissions2.RegionSupervisor*/ Common.OrmRepositoryBase<Common.Queryable.DemoRowPermissions2_RegionSupervisor, DemoRowPermissions2.RegionSupervisor> // Common.QueryableRepositoryBase<Common.Queryable.DemoRowPermissions2_RegionSupervisor, DemoRowPermissions2.RegionSupervisor> // Common.ReadableRepositoryBase<DemoRowPermissions2.RegionSupervisor> // global::Common.RepositoryBase
        , IWritableRepository<DemoRowPermissions2.RegionSupervisor>, IValidateRepository/*DataStructureInfo RepositoryInterface DemoRowPermissions2.RegionSupervisor*/
    {
        private readonly Rhetos.Utilities.ISqlUtility _sqlUtility;
        /*DataStructureInfo RepositoryPrivateMembers DemoRowPermissions2.RegionSupervisor*/

        public RegionSupervisor_Repository(Common.DomRepository domRepository, Common.ExecutionContext executionContext, Rhetos.Utilities.ISqlUtility _sqlUtility/*DataStructureInfo RepositoryConstructorArguments DemoRowPermissions2.RegionSupervisor*/)
        {
            _domRepository = domRepository;
            _executionContext = executionContext;
            this._sqlUtility = _sqlUtility;
            /*DataStructureInfo RepositoryConstructorCode DemoRowPermissions2.RegionSupervisor*/
        }

        public static KeyValuePair<string, Type>[] GetReadParameterTypes()
        {
            return new KeyValuePair<string, Type>[]
            {
                /*DataStructureInfo ReadParameterTypes DemoRowPermissions2.RegionSupervisor*/
            };
        }
        
        public virtual void Save(IEnumerable<DemoRowPermissions2.RegionSupervisor> insertedNew, IEnumerable<DemoRowPermissions2.RegionSupervisor> updatedNew, IEnumerable<DemoRowPermissions2.RegionSupervisor> deletedIds, bool checkUserPermissions = false)
        {
            if (!DomHelper.InitializeSaveMethodItems(ref insertedNew, ref updatedNew, ref deletedIds))
                return;

            /*DataStructureInfo WritableOrm ClearContext DemoRowPermissions2.RegionSupervisor*/

            /*DataStructureInfo WritableOrm ArgumentValidation DemoRowPermissions2.RegionSupervisor*/

            /*DataStructureInfo WritableOrm Initialization DemoRowPermissions2.RegionSupervisor*/

            // Using old data, including lazy loading of navigation properties:

            IEnumerable<Common.Queryable.DemoRowPermissions2_RegionSupervisor> deleted = DomHelper.LoadOldDataWithNavigationProperties(deletedIds, this);
            IEnumerable<Common.Queryable.DemoRowPermissions2_RegionSupervisor> updated = DomHelper.LoadOldDataWithNavigationProperties(updatedNew, this);

            /*DataStructureInfo WritableOrm OldDataLoaded DemoRowPermissions2.RegionSupervisor*/

            /*DataStructureInfo WritableOrm ProcessedOldData DemoRowPermissions2.RegionSupervisor*/

            {
                DomHelper.WriteToDatabase(insertedNew, updatedNew, deletedIds, _executionContext.PersistenceStorage, checkUserPermissions, _sqlUtility,
                    out Exception saveException, out Rhetos.RhetosException interpretedException);

                if (saveException != null)
                {
                    if (interpretedException is Rhetos.UserException && Rhetos.Utilities.MsSqlUtility.IsReferenceErrorOnInsertUpdate(interpretedException, @"DemoRowPermissions2.Employee", @"ID", @"FK_RegionSupervisor_Employee_EmployeeID"))
                        ((Rhetos.UserException)interpretedException).SystemMessage = @"DataStructure:DemoRowPermissions2.RegionSupervisor,Property:EmployeeID,Referenced:DemoRowPermissions2.Employee";
                    if (interpretedException is Rhetos.UserException && Rhetos.Utilities.MsSqlUtility.IsReferenceErrorOnInsertUpdate(interpretedException, @"DemoRowPermissions2.Region", @"ID", @"FK_RegionSupervisor_Region_RegionID"))
                        ((Rhetos.UserException)interpretedException).SystemMessage = @"DataStructure:DemoRowPermissions2.RegionSupervisor,Property:RegionID,Referenced:DemoRowPermissions2.Region";
                    /*DataStructureInfo WritableOrm OnDatabaseError DemoRowPermissions2.RegionSupervisor*/
                    DomHelper.ThrowInterpretedException(checkUserPermissions, saveException, interpretedException, _sqlUtility, "DemoRowPermissions2.RegionSupervisor");
                }
            }

            deleted = null;
            updated = this.Query(updatedNew.Select(item => item.ID));
            IEnumerable<Common.Queryable.DemoRowPermissions2_RegionSupervisor> inserted = this.Query(insertedNew.Select(item => item.ID));

            bool allEffectsCompleted = false;
            try
            {
                /*DataStructureInfo WritableOrm OnSaveTag1 DemoRowPermissions2.RegionSupervisor*/

                /*DataStructureInfo WritableOrm OnSaveTag2 DemoRowPermissions2.RegionSupervisor*/

                Rhetos.Dom.DefaultConcepts.InvalidDataMessage.ValidateOnSave(insertedNew, updatedNew, this, "DemoRowPermissions2.RegionSupervisor");

                /*DataStructureInfo WritableOrm AfterSave DemoRowPermissions2.RegionSupervisor*/

                allEffectsCompleted = true;
            }
            finally
            {
                if (!allEffectsCompleted)
                    _executionContext.PersistenceTransaction.DiscardOnDispose();
            }
        }

        public IEnumerable<Rhetos.Dom.DefaultConcepts.InvalidDataMessage> Validate(IList<Guid> ids, bool onSave)
        {
            /*DataStructureInfo WritableOrm OnSaveValidate DemoRowPermissions2.RegionSupervisor*/
            yield break;
        }

        /*DataStructureInfo RepositoryMembers DemoRowPermissions2.RegionSupervisor*/
    }

    /*DataStructureInfo RepositoryAttributes DemoRowPermissions2.DocumentBrowse*/
    public partial class DocumentBrowse_Repository : /*DataStructureInfo OverrideBaseType DemoRowPermissions2.DocumentBrowse*/ Common.OrmRepositoryBase<Common.Queryable.DemoRowPermissions2_DocumentBrowse, DemoRowPermissions2.DocumentBrowse> // Common.QueryableRepositoryBase<Common.Queryable.DemoRowPermissions2_DocumentBrowse, DemoRowPermissions2.DocumentBrowse> // Common.ReadableRepositoryBase<DemoRowPermissions2.DocumentBrowse> // global::Common.RepositoryBase
        /*DataStructureInfo RepositoryInterface DemoRowPermissions2.DocumentBrowse*/
    {
        /*DataStructureInfo RepositoryPrivateMembers DemoRowPermissions2.DocumentBrowse*/

        public DocumentBrowse_Repository(Common.DomRepository domRepository, Common.ExecutionContext executionContext/*DataStructureInfo RepositoryConstructorArguments DemoRowPermissions2.DocumentBrowse*/)
        {
            _domRepository = domRepository;
            _executionContext = executionContext;
            /*DataStructureInfo RepositoryConstructorCode DemoRowPermissions2.DocumentBrowse*/
        }

        public static KeyValuePair<string, Type>[] GetReadParameterTypes()
        {
            return new KeyValuePair<string, Type>[]
            {
                new KeyValuePair<string, Type>(@"Common.RowPermissionsReadItems", typeof(Common.RowPermissionsReadItems)),
                new KeyValuePair<string, Type>(@"Common.RowPermissionsWriteItems", typeof(Common.RowPermissionsWriteItems)),
                /*DataStructureInfo ReadParameterTypes DemoRowPermissions2.DocumentBrowse*/
            };
        }
        
        public override IQueryable<Common.Queryable.DemoRowPermissions2_DocumentBrowse> Query()
        {
            /*DataStructureInfo RepositoryBeforeQuery DemoRowPermissions2.DocumentBrowse*/
            return Query(_domRepository.DemoRowPermissions2.Document.Query());
        }

        public IQueryable<Common.Queryable.DemoRowPermissions2_DocumentBrowse> Query(IQueryable<Common.Queryable.DemoRowPermissions2_Document> source)
        {
            return source.Select(item => new Common.Queryable.DemoRowPermissions2_DocumentBrowse
                {
                    ID = item.ID,
                    Base = item,
                    DivisionName = item.Division.Name,
                    Title = item.Title,
                    /*BrowseDataStructureInfo BrowseProperties DemoRowPermissions2.DocumentBrowse*/
                });
        }

        public IQueryable<Common.Queryable.DemoRowPermissions2_DocumentBrowse> Filter(IQueryable<Common.Queryable.DemoRowPermissions2_DocumentBrowse> source, Common.RowPermissionsReadItems parameter)
        {
            /*QueryFilterExpressionInfo BeforeFilter DemoRowPermissions2.DocumentBrowse.'Common.RowPermissionsReadItems'*/
            var filterExpression = GetRowPermissionsReadExpression(source, _domRepository, _executionContext);
            return FilterExpression<Common.Queryable.DemoRowPermissions2_DocumentBrowse>.OptimizedWhere(source, filterExpression);
        }

        public Expression<Func<Common.Queryable.DemoRowPermissions2_DocumentBrowse, bool>> GetRowPermissionsReadExpression(IQueryable<Common.Queryable.DemoRowPermissions2_DocumentBrowse> items, Common.DomRepository repository, Common.ExecutionContext executionContext)
        {
            var filterExpression = new FilterExpression<Common.Queryable.DemoRowPermissions2_DocumentBrowse>();
			{
                // Inheriting row permissions from DemoRowPermissions2.Document:
                var sameMembers = new Tuple<string, string>[] { /*RowPermissionsInheritReadInfo SameMembersRead DemoRowPermissions2.DocumentBrowse.DemoRowPermissions2.Document.Base*/ };
                var parentRepository = _domRepository.DemoRowPermissions2.Document;
                var parentRowPermissionsExpression = parentRepository.GetRowPermissionsReadExpression(parentRepository.Query(), _domRepository, _executionContext);
                var replacedExpression = new ReplaceWithReference<Common.Queryable.DemoRowPermissions2_Document, Common.Queryable.DemoRowPermissions2_DocumentBrowse>(
                    parentRowPermissionsExpression, "Base" , "documentBrowseItem", sameMembers , @"Extension_DocumentBrowse"/*RowPermissionsInheritReadInfo ExtensionReferenceRead DemoRowPermissions2.DocumentBrowse.DemoRowPermissions2.Document.Base*/);
                filterExpression.Include(replacedExpression.NewExpression);
            }
            /*RowPermissionsReadInfo ReadFilterExpressions DemoRowPermissions2.DocumentBrowse.'Common.RowPermissionsReadItems'*/
			return filterExpression.GetFilter();
        }

        public IQueryable<Common.Queryable.DemoRowPermissions2_DocumentBrowse> Filter(IQueryable<Common.Queryable.DemoRowPermissions2_DocumentBrowse> source, Common.RowPermissionsWriteItems parameter)
        {
            /*QueryFilterExpressionInfo BeforeFilter DemoRowPermissions2.DocumentBrowse.'Common.RowPermissionsWriteItems'*/
            var filterExpression = GetRowPermissionsWriteExpression(source, _domRepository, _executionContext);
            return FilterExpression<Common.Queryable.DemoRowPermissions2_DocumentBrowse>.OptimizedWhere(source, filterExpression);
        }

        public Expression<Func<Common.Queryable.DemoRowPermissions2_DocumentBrowse, bool>> GetRowPermissionsWriteExpression(IQueryable<Common.Queryable.DemoRowPermissions2_DocumentBrowse> items, Common.DomRepository repository, Common.ExecutionContext executionContext)
        {
            var filterExpression = new FilterExpression<Common.Queryable.DemoRowPermissions2_DocumentBrowse>();
			{
                // Inheriting row permissions from DemoRowPermissions2.Document:
                var sameMembers = new Tuple<string, string>[] { /*RowPermissionsInheritWriteInfo SameMembersWrite DemoRowPermissions2.DocumentBrowse.DemoRowPermissions2.Document.Base*/ };
                var parentRepository = _domRepository.DemoRowPermissions2.Document;
                var parentRowPermissionsExpression = parentRepository.GetRowPermissionsWriteExpression(parentRepository.Query(), _domRepository, _executionContext);
                var replacedExpression = new ReplaceWithReference<Common.Queryable.DemoRowPermissions2_Document, Common.Queryable.DemoRowPermissions2_DocumentBrowse>(
                    parentRowPermissionsExpression, "Base" , "documentBrowseItem", sameMembers , @"Extension_DocumentBrowse"/*RowPermissionsInheritWriteInfo ExtensionReferenceWrite DemoRowPermissions2.DocumentBrowse.DemoRowPermissions2.Document.Base*/);
                filterExpression.Include(replacedExpression.NewExpression);
            }
            /*RowPermissionsWriteInfo WriteFilterExpressions DemoRowPermissions2.DocumentBrowse.'Common.RowPermissionsWriteItems'*/
			return filterExpression.GetFilter();
        }

        /*DataStructureInfo RepositoryMembers DemoRowPermissions2.DocumentBrowse*/
    }

    /*ModuleInfo HelperNamespaceMembers DemoRowPermissions2*/

    #pragma warning restore // See configuration setting CommonConcepts:CompilerWarningsInGeneratedCode.
}

