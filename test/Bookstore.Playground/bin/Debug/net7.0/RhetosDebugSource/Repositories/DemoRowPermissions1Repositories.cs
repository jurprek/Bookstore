// <autogenerated />
namespace DemoRowPermissions1.Repositories
{
    #pragma warning disable // See configuration setting CommonConcepts:CompilerWarningsInGeneratedCode.

    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Linq.Expressions;
    using System.Runtime.Serialization;
    using Rhetos.Dom.DefaultConcepts;
    using Rhetos.Utilities;

    /*ModuleInfo Using DemoRowPermissions1*/

    public class ModuleRepository
    {
        private readonly Rhetos.Extensibility.INamedPlugins<IRepository> _repositories;

        public ModuleRepository(Rhetos.Extensibility.INamedPlugins<IRepository> repositories)
        {
            _repositories = repositories;
        }

        private Division_Repository _Division_Repository;
        public Division_Repository Division { get { return _Division_Repository ?? (_Division_Repository = (Division_Repository)Rhetos.Extensibility.NamedPluginsExtensions.GetPlugin(_repositories, @"DemoRowPermissions1.Division")); } }

        private Document_Repository _Document_Repository;
        public Document_Repository Document { get { return _Document_Repository ?? (_Document_Repository = (Document_Repository)Rhetos.Extensibility.NamedPluginsExtensions.GetPlugin(_repositories, @"DemoRowPermissions1.Document")); } }

        private Employee_Repository _Employee_Repository;
        public Employee_Repository Employee { get { return _Employee_Repository ?? (_Employee_Repository = (Employee_Repository)Rhetos.Extensibility.NamedPluginsExtensions.GetPlugin(_repositories, @"DemoRowPermissions1.Employee")); } }

        /*ModuleInfo RepositoryMembers DemoRowPermissions1*/
    }

    /*DataStructureInfo RepositoryAttributes DemoRowPermissions1.Division*/
    public partial class Division_Repository : /*DataStructureInfo OverrideBaseType DemoRowPermissions1.Division*/ Common.OrmRepositoryBase<Common.Queryable.DemoRowPermissions1_Division, DemoRowPermissions1.Division> // Common.QueryableRepositoryBase<Common.Queryable.DemoRowPermissions1_Division, DemoRowPermissions1.Division> // Common.ReadableRepositoryBase<DemoRowPermissions1.Division> // global::Common.RepositoryBase
        , IWritableRepository<DemoRowPermissions1.Division>, IValidateRepository/*DataStructureInfo RepositoryInterface DemoRowPermissions1.Division*/
    {
        private readonly Rhetos.Utilities.ISqlUtility _sqlUtility;
        /*DataStructureInfo RepositoryPrivateMembers DemoRowPermissions1.Division*/

        public Division_Repository(Common.DomRepository domRepository, Common.ExecutionContext executionContext, Rhetos.Utilities.ISqlUtility _sqlUtility/*DataStructureInfo RepositoryConstructorArguments DemoRowPermissions1.Division*/)
        {
            _domRepository = domRepository;
            _executionContext = executionContext;
            this._sqlUtility = _sqlUtility;
            /*DataStructureInfo RepositoryConstructorCode DemoRowPermissions1.Division*/
        }

        public static KeyValuePair<string, Type>[] GetReadParameterTypes()
        {
            return new KeyValuePair<string, Type>[]
            {
                /*DataStructureInfo ReadParameterTypes DemoRowPermissions1.Division*/
            };
        }
        
        public virtual void Save(IEnumerable<DemoRowPermissions1.Division> insertedNew, IEnumerable<DemoRowPermissions1.Division> updatedNew, IEnumerable<DemoRowPermissions1.Division> deletedIds, bool checkUserPermissions = false)
        {
            if (!DomHelper.InitializeSaveMethodItems(ref insertedNew, ref updatedNew, ref deletedIds))
                return;

            /*DataStructureInfo WritableOrm ClearContext DemoRowPermissions1.Division*/

            /*DataStructureInfo WritableOrm ArgumentValidation DemoRowPermissions1.Division*/

            /*DataStructureInfo WritableOrm Initialization DemoRowPermissions1.Division*/

            // Using old data, including lazy loading of navigation properties:

            IEnumerable<Common.Queryable.DemoRowPermissions1_Division> deleted = DomHelper.LoadOldDataWithNavigationProperties(deletedIds, this);
            IEnumerable<Common.Queryable.DemoRowPermissions1_Division> updated = DomHelper.LoadOldDataWithNavigationProperties(updatedNew, this);

            foreach (var newItem in insertedNew.Concat(updatedNew))
                ShortStringPropertyCodeGenerator.CheckMaxLength(newItem.Name, newItem, "DemoRowPermissions1", "Division", "Name");

            /*DataStructureInfo WritableOrm OldDataLoaded DemoRowPermissions1.Division*/

            /*DataStructureInfo WritableOrm ProcessedOldData DemoRowPermissions1.Division*/

            {
                DomHelper.WriteToDatabase(insertedNew, updatedNew, deletedIds, _executionContext.PersistenceStorage, checkUserPermissions, _sqlUtility,
                    out Exception saveException, out Rhetos.RhetosException interpretedException);

                if (saveException != null)
                {
                    if (interpretedException is Rhetos.UserException && Rhetos.Utilities.MsSqlUtility.IsReferenceErrorOnDelete(interpretedException, @"DemoRowPermissions1.Document", @"DivisionID", @"FK_Document_Division_DivisionID"))
                        ((Rhetos.UserException)interpretedException).SystemMessage = @"DataStructure:DemoRowPermissions1.Document,Property:DivisionID,Referenced:DemoRowPermissions1.Division";
                    if (interpretedException is Rhetos.UserException && Rhetos.Utilities.MsSqlUtility.IsReferenceErrorOnDelete(interpretedException, @"DemoRowPermissions1.Employee", @"DivisionID", @"FK_Employee_Division_DivisionID"))
                        ((Rhetos.UserException)interpretedException).SystemMessage = @"DataStructure:DemoRowPermissions1.Employee,Property:DivisionID,Referenced:DemoRowPermissions1.Division";
                    /*DataStructureInfo WritableOrm OnDatabaseError DemoRowPermissions1.Division*/
                    DomHelper.ThrowInterpretedException(checkUserPermissions, saveException, interpretedException, _sqlUtility, "DemoRowPermissions1.Division");
                }
            }

            deleted = null;
            updated = this.Query(updatedNew.Select(item => item.ID));
            IEnumerable<Common.Queryable.DemoRowPermissions1_Division> inserted = this.Query(insertedNew.Select(item => item.ID));

            bool allEffectsCompleted = false;
            try
            {
                /*DataStructureInfo WritableOrm OnSaveTag1 DemoRowPermissions1.Division*/

                /*DataStructureInfo WritableOrm OnSaveTag2 DemoRowPermissions1.Division*/

                Rhetos.Dom.DefaultConcepts.InvalidDataMessage.ValidateOnSave(insertedNew, updatedNew, this, "DemoRowPermissions1.Division");

                /*DataStructureInfo WritableOrm AfterSave DemoRowPermissions1.Division*/

                allEffectsCompleted = true;
            }
            finally
            {
                if (!allEffectsCompleted)
                    _executionContext.PersistenceTransaction.DiscardOnDispose();
            }
        }

        public IEnumerable<Rhetos.Dom.DefaultConcepts.InvalidDataMessage> Validate(IList<Guid> ids, bool onSave)
        {
            /*DataStructureInfo WritableOrm OnSaveValidate DemoRowPermissions1.Division*/
            yield break;
        }

        /*DataStructureInfo RepositoryMembers DemoRowPermissions1.Division*/
    }

    /*DataStructureInfo RepositoryAttributes DemoRowPermissions1.Document*/
    public partial class Document_Repository : /*DataStructureInfo OverrideBaseType DemoRowPermissions1.Document*/ Common.OrmRepositoryBase<Common.Queryable.DemoRowPermissions1_Document, DemoRowPermissions1.Document> // Common.QueryableRepositoryBase<Common.Queryable.DemoRowPermissions1_Document, DemoRowPermissions1.Document> // Common.ReadableRepositoryBase<DemoRowPermissions1.Document> // global::Common.RepositoryBase
        , IWritableRepository<DemoRowPermissions1.Document>, IValidateRepository/*DataStructureInfo RepositoryInterface DemoRowPermissions1.Document*/
    {
        private readonly Rhetos.Utilities.ISqlUtility _sqlUtility;
        /*DataStructureInfo RepositoryPrivateMembers DemoRowPermissions1.Document*/

        public Document_Repository(Common.DomRepository domRepository, Common.ExecutionContext executionContext, Rhetos.Utilities.ISqlUtility _sqlUtility/*DataStructureInfo RepositoryConstructorArguments DemoRowPermissions1.Document*/)
        {
            _domRepository = domRepository;
            _executionContext = executionContext;
            this._sqlUtility = _sqlUtility;
            /*DataStructureInfo RepositoryConstructorCode DemoRowPermissions1.Document*/
        }

        public static KeyValuePair<string, Type>[] GetReadParameterTypes()
        {
            return new KeyValuePair<string, Type>[]
            {
                new KeyValuePair<string, Type>(@"Common.RowPermissionsReadItems", typeof(Common.RowPermissionsReadItems)),
                new KeyValuePair<string, Type>(@"Common.RowPermissionsWriteItems", typeof(Common.RowPermissionsWriteItems)),
                /*DataStructureInfo ReadParameterTypes DemoRowPermissions1.Document*/
            };
        }
        
        public virtual void Save(IEnumerable<DemoRowPermissions1.Document> insertedNew, IEnumerable<DemoRowPermissions1.Document> updatedNew, IEnumerable<DemoRowPermissions1.Document> deletedIds, bool checkUserPermissions = false)
        {
            if (!DomHelper.InitializeSaveMethodItems(ref insertedNew, ref updatedNew, ref deletedIds))
                return;

            /*DataStructureInfo WritableOrm ClearContext DemoRowPermissions1.Document*/

            /*DataStructureInfo WritableOrm ArgumentValidation DemoRowPermissions1.Document*/

            { 
                var now = SqlUtility.GetDatabaseTime(_executionContext.SqlExecuter);

                foreach (var newItem in insertedNew)
                    if(newItem.Created == null)
                        newItem.Created = now;
            }
            /*DataStructureInfo WritableOrm Initialization DemoRowPermissions1.Document*/

            // Using old data, including lazy loading of navigation properties:

            IEnumerable<Common.Queryable.DemoRowPermissions1_Document> deleted = DomHelper.LoadOldDataWithNavigationProperties(deletedIds, this);
            IEnumerable<Common.Queryable.DemoRowPermissions1_Document> updated = DomHelper.LoadOldDataWithNavigationProperties(updatedNew, this);

            foreach (var newItem in insertedNew.Concat(updatedNew))
                ShortStringPropertyCodeGenerator.CheckMaxLength(newItem.Title, newItem, "DemoRowPermissions1", "Document", "Title");

            /*DataStructureInfo WritableOrm OldDataLoaded DemoRowPermissions1.Document*/

            /*DataStructureInfo WritableOrm ProcessedOldData DemoRowPermissions1.Document*/

            {
                DomHelper.WriteToDatabase(insertedNew, updatedNew, deletedIds, _executionContext.PersistenceStorage, checkUserPermissions, _sqlUtility,
                    out Exception saveException, out Rhetos.RhetosException interpretedException);

                if (saveException != null)
                {
                    if (interpretedException is Rhetos.UserException && Rhetos.Utilities.MsSqlUtility.IsReferenceErrorOnInsertUpdate(interpretedException, @"DemoRowPermissions1.Division", @"ID", @"FK_Document_Division_DivisionID"))
                        ((Rhetos.UserException)interpretedException).SystemMessage = @"DataStructure:DemoRowPermissions1.Document,Property:DivisionID,Referenced:DemoRowPermissions1.Division";
                    /*DataStructureInfo WritableOrm OnDatabaseError DemoRowPermissions1.Document*/
                    DomHelper.ThrowInterpretedException(checkUserPermissions, saveException, interpretedException, _sqlUtility, "DemoRowPermissions1.Document");
                }
            }

            deleted = null;
            updated = this.Query(updatedNew.Select(item => item.ID));
            IEnumerable<Common.Queryable.DemoRowPermissions1_Document> inserted = this.Query(insertedNew.Select(item => item.ID));

            bool allEffectsCompleted = false;
            try
            {
                /*DataStructureInfo WritableOrm OnSaveTag1 DemoRowPermissions1.Document*/

                /*DataStructureInfo WritableOrm OnSaveTag2 DemoRowPermissions1.Document*/

                Rhetos.Dom.DefaultConcepts.InvalidDataMessage.ValidateOnSave(insertedNew, updatedNew, this, "DemoRowPermissions1.Document");

                /*DataStructureInfo WritableOrm AfterSave DemoRowPermissions1.Document*/

                allEffectsCompleted = true;
            }
            finally
            {
                if (!allEffectsCompleted)
                    _executionContext.PersistenceTransaction.DiscardOnDispose();
            }
        }

        public IEnumerable<Rhetos.Dom.DefaultConcepts.InvalidDataMessage> Validate(IList<Guid> ids, bool onSave)
        {
            /*DataStructureInfo WritableOrm OnSaveValidate DemoRowPermissions1.Document*/
            yield break;
        }

        public IQueryable<Common.Queryable.DemoRowPermissions1_Document> Filter(IQueryable<Common.Queryable.DemoRowPermissions1_Document> source, Common.RowPermissionsReadItems parameter)
        {
            /*QueryFilterExpressionInfo BeforeFilter DemoRowPermissions1.Document.'Common.RowPermissionsReadItems'*/
            var filterExpression = GetRowPermissionsReadExpression(source, _domRepository, _executionContext);
            return FilterExpression<Common.Queryable.DemoRowPermissions1_Document>.OptimizedWhere(source, filterExpression);
        }

        public Expression<Func<Common.Queryable.DemoRowPermissions1_Document, bool>> GetRowPermissionsReadExpression(IQueryable<Common.Queryable.DemoRowPermissions1_Document> items, Common.DomRepository repository, Common.ExecutionContext executionContext)
        {
            var filterExpression = new FilterExpression<Common.Queryable.DemoRowPermissions1_Document>();
			filterExpression.Include(GetRowPermissionsRule_WithinDivision(executionContext, items, repository));
            /*RowPermissionsReadInfo ReadFilterExpressions DemoRowPermissions1.Document.'Common.RowPermissionsReadItems'*/
			return filterExpression.GetFilter();
        }

        public IQueryable<Common.Queryable.DemoRowPermissions1_Document> Filter(IQueryable<Common.Queryable.DemoRowPermissions1_Document> source, Common.RowPermissionsWriteItems parameter)
        {
            /*QueryFilterExpressionInfo BeforeFilter DemoRowPermissions1.Document.'Common.RowPermissionsWriteItems'*/
            var filterExpression = GetRowPermissionsWriteExpression(source, _domRepository, _executionContext);
            return FilterExpression<Common.Queryable.DemoRowPermissions1_Document>.OptimizedWhere(source, filterExpression);
        }

        public Expression<Func<Common.Queryable.DemoRowPermissions1_Document, bool>> GetRowPermissionsWriteExpression(IQueryable<Common.Queryable.DemoRowPermissions1_Document> items, Common.DomRepository repository, Common.ExecutionContext executionContext)
        {
            var filterExpression = new FilterExpression<Common.Queryable.DemoRowPermissions1_Document>();
			filterExpression.Include(GetRowPermissionsRule_WithinDivision(executionContext, items, repository));
            /*RowPermissionsWriteInfo WriteFilterExpressions DemoRowPermissions1.Document.'Common.RowPermissionsWriteItems'*/
			return filterExpression.GetFilter();
        }

        private Expression<Func<Common.Queryable.DemoRowPermissions1_Document, bool>> GetRowPermissionsRule_WithinDivision(Common.ExecutionContext context,
            // Additional parameters for backward compatibility, should be removed in future releases:
            IQueryable<Common.Queryable.DemoRowPermissions1_Document> items, Common.DomRepository repository)
        {
            Guid myDivisionId = context.Repository.DemoRowPermissions1.Employee.Query()
                            .Where(e => e.UserName == context.UserInfo.UserName)
                            .Select(e => e.Division.ID)
                            .SingleOrDefault();
                        return item => item.Division.ID == myDivisionId;
        }

        /*DataStructureInfo RepositoryMembers DemoRowPermissions1.Document*/
    }

    /*DataStructureInfo RepositoryAttributes DemoRowPermissions1.Employee*/
    public partial class Employee_Repository : /*DataStructureInfo OverrideBaseType DemoRowPermissions1.Employee*/ Common.OrmRepositoryBase<Common.Queryable.DemoRowPermissions1_Employee, DemoRowPermissions1.Employee> // Common.QueryableRepositoryBase<Common.Queryable.DemoRowPermissions1_Employee, DemoRowPermissions1.Employee> // Common.ReadableRepositoryBase<DemoRowPermissions1.Employee> // global::Common.RepositoryBase
        , IWritableRepository<DemoRowPermissions1.Employee>, IValidateRepository/*DataStructureInfo RepositoryInterface DemoRowPermissions1.Employee*/
    {
        private readonly Rhetos.Utilities.ISqlUtility _sqlUtility;
        /*DataStructureInfo RepositoryPrivateMembers DemoRowPermissions1.Employee*/

        public Employee_Repository(Common.DomRepository domRepository, Common.ExecutionContext executionContext, Rhetos.Utilities.ISqlUtility _sqlUtility/*DataStructureInfo RepositoryConstructorArguments DemoRowPermissions1.Employee*/)
        {
            _domRepository = domRepository;
            _executionContext = executionContext;
            this._sqlUtility = _sqlUtility;
            /*DataStructureInfo RepositoryConstructorCode DemoRowPermissions1.Employee*/
        }

        public static KeyValuePair<string, Type>[] GetReadParameterTypes()
        {
            return new KeyValuePair<string, Type>[]
            {
                /*DataStructureInfo ReadParameterTypes DemoRowPermissions1.Employee*/
            };
        }
        
        public virtual void Save(IEnumerable<DemoRowPermissions1.Employee> insertedNew, IEnumerable<DemoRowPermissions1.Employee> updatedNew, IEnumerable<DemoRowPermissions1.Employee> deletedIds, bool checkUserPermissions = false)
        {
            if (!DomHelper.InitializeSaveMethodItems(ref insertedNew, ref updatedNew, ref deletedIds))
                return;

            /*DataStructureInfo WritableOrm ClearContext DemoRowPermissions1.Employee*/

            /*DataStructureInfo WritableOrm ArgumentValidation DemoRowPermissions1.Employee*/

            /*DataStructureInfo WritableOrm Initialization DemoRowPermissions1.Employee*/

            // Using old data, including lazy loading of navigation properties:

            IEnumerable<Common.Queryable.DemoRowPermissions1_Employee> deleted = DomHelper.LoadOldDataWithNavigationProperties(deletedIds, this);
            IEnumerable<Common.Queryable.DemoRowPermissions1_Employee> updated = DomHelper.LoadOldDataWithNavigationProperties(updatedNew, this);

            foreach (var newItem in insertedNew.Concat(updatedNew))
                ShortStringPropertyCodeGenerator.CheckMaxLength(newItem.UserName, newItem, "DemoRowPermissions1", "Employee", "UserName");

            /*DataStructureInfo WritableOrm OldDataLoaded DemoRowPermissions1.Employee*/

            /*DataStructureInfo WritableOrm ProcessedOldData DemoRowPermissions1.Employee*/

            {
                DomHelper.WriteToDatabase(insertedNew, updatedNew, deletedIds, _executionContext.PersistenceStorage, checkUserPermissions, _sqlUtility,
                    out Exception saveException, out Rhetos.RhetosException interpretedException);

                if (saveException != null)
                {
                    if (interpretedException is Rhetos.UserException && Rhetos.Utilities.MsSqlUtility.IsReferenceErrorOnInsertUpdate(interpretedException, @"DemoRowPermissions1.Division", @"ID", @"FK_Employee_Division_DivisionID"))
                        ((Rhetos.UserException)interpretedException).SystemMessage = @"DataStructure:DemoRowPermissions1.Employee,Property:DivisionID,Referenced:DemoRowPermissions1.Division";
                    /*DataStructureInfo WritableOrm OnDatabaseError DemoRowPermissions1.Employee*/
                    DomHelper.ThrowInterpretedException(checkUserPermissions, saveException, interpretedException, _sqlUtility, "DemoRowPermissions1.Employee");
                }
            }

            deleted = null;
            updated = this.Query(updatedNew.Select(item => item.ID));
            IEnumerable<Common.Queryable.DemoRowPermissions1_Employee> inserted = this.Query(insertedNew.Select(item => item.ID));

            bool allEffectsCompleted = false;
            try
            {
                /*DataStructureInfo WritableOrm OnSaveTag1 DemoRowPermissions1.Employee*/

                /*DataStructureInfo WritableOrm OnSaveTag2 DemoRowPermissions1.Employee*/

                Rhetos.Dom.DefaultConcepts.InvalidDataMessage.ValidateOnSave(insertedNew, updatedNew, this, "DemoRowPermissions1.Employee");

                /*DataStructureInfo WritableOrm AfterSave DemoRowPermissions1.Employee*/

                allEffectsCompleted = true;
            }
            finally
            {
                if (!allEffectsCompleted)
                    _executionContext.PersistenceTransaction.DiscardOnDispose();
            }
        }

        public IEnumerable<Rhetos.Dom.DefaultConcepts.InvalidDataMessage> Validate(IList<Guid> ids, bool onSave)
        {
            /*DataStructureInfo WritableOrm OnSaveValidate DemoRowPermissions1.Employee*/
            yield break;
        }

        /*DataStructureInfo RepositoryMembers DemoRowPermissions1.Employee*/
    }

    /*ModuleInfo HelperNamespaceMembers DemoRowPermissions1*/

    #pragma warning restore // See configuration setting CommonConcepts:CompilerWarningsInGeneratedCode.
}

