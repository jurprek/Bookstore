// <autogenerated />
namespace Bookstore.Repositories
{
    #pragma warning disable // See configuration setting CommonConcepts:CompilerWarningsInGeneratedCode.

    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Linq.Expressions;
    using System.Runtime.Serialization;
    using Rhetos.Dom.DefaultConcepts;
    using Rhetos.Utilities;

    /*ModuleInfo Using Bookstore*/

    public class ModuleRepository
    {
        private readonly Rhetos.Extensibility.INamedPlugins<IRepository> _repositories;

        public ModuleRepository(Rhetos.Extensibility.INamedPlugins<IRepository> repositories)
        {
            _repositories = repositories;
        }

        private ApproveShipment_Repository _ApproveShipment_Repository;
        public ApproveShipment_Repository ApproveShipment { get { return _ApproveShipment_Repository ?? (_ApproveShipment_Repository = (ApproveShipment_Repository)Rhetos.Extensibility.NamedPluginsExtensions.GetPlugin(_repositories, @"Bookstore.ApproveShipment")); } }

        private Book_Repository _Book_Repository;
        public Book_Repository Book { get { return _Book_Repository ?? (_Book_Repository = (Book_Repository)Rhetos.Extensibility.NamedPluginsExtensions.GetPlugin(_repositories, @"Bookstore.Book")); } }

        private BookInfo_Repository _BookInfo_Repository;
        public BookInfo_Repository BookInfo { get { return _BookInfo_Repository ?? (_BookInfo_Repository = (BookInfo_Repository)Rhetos.Extensibility.NamedPluginsExtensions.GetPlugin(_repositories, @"Bookstore.BookInfo")); } }

        private BookRating_Repository _BookRating_Repository;
        public BookRating_Repository BookRating { get { return _BookRating_Repository ?? (_BookRating_Repository = (BookRating_Repository)Rhetos.Extensibility.NamedPluginsExtensions.GetPlugin(_repositories, @"Bookstore.BookRating")); } }

        private BookTopic_Repository _BookTopic_Repository;
        public BookTopic_Repository BookTopic { get { return _BookTopic_Repository ?? (_BookTopic_Repository = (BookTopic_Repository)Rhetos.Extensibility.NamedPluginsExtensions.GetPlugin(_repositories, @"Bookstore.BookTopic")); } }

        private BookTranslator_Repository _BookTranslator_Repository;
        public BookTranslator_Repository BookTranslator { get { return _BookTranslator_Repository ?? (_BookTranslator_Repository = (BookTranslator_Repository)Rhetos.Extensibility.NamedPluginsExtensions.GetPlugin(_repositories, @"Bookstore.BookTranslator")); } }

        private ChildrensBook_Repository _ChildrensBook_Repository;
        public ChildrensBook_Repository ChildrensBook { get { return _ChildrensBook_Repository ?? (_ChildrensBook_Repository = (ChildrensBook_Repository)Rhetos.Extensibility.NamedPluginsExtensions.GetPlugin(_repositories, @"Bookstore.ChildrensBook")); } }

        private Comment_Repository _Comment_Repository;
        public Comment_Repository Comment { get { return _Comment_Repository ?? (_Comment_Repository = (Comment_Repository)Rhetos.Extensibility.NamedPluginsExtensions.GetPlugin(_repositories, @"Bookstore.Comment")); } }

        private Department_Repository _Department_Repository;
        public Department_Repository Department { get { return _Department_Repository ?? (_Department_Repository = (Department_Repository)Rhetos.Extensibility.NamedPluginsExtensions.GetPlugin(_repositories, @"Bookstore.Department")); } }

        private Disposal_Repository _Disposal_Repository;
        public Disposal_Repository Disposal { get { return _Disposal_Repository ?? (_Disposal_Repository = (Disposal_Repository)Rhetos.Extensibility.NamedPluginsExtensions.GetPlugin(_repositories, @"Bookstore.Disposal")); } }

        private Education_Repository _Education_Repository;
        public Education_Repository Education { get { return _Education_Repository ?? (_Education_Repository = (Education_Repository)Rhetos.Extensibility.NamedPluginsExtensions.GetPlugin(_repositories, @"Bookstore.Education")); } }

        private Employees_Repository _Employees_Repository;
        public Employees_Repository Employees { get { return _Employees_Repository ?? (_Employees_Repository = (Employees_Repository)Rhetos.Extensibility.NamedPluginsExtensions.GetPlugin(_repositories, @"Bookstore.Employees")); } }

        private EmployeesDepartment_Repository _EmployeesDepartment_Repository;
        public EmployeesDepartment_Repository EmployeesDepartment { get { return _EmployeesDepartment_Repository ?? (_EmployeesDepartment_Repository = (EmployeesDepartment_Repository)Rhetos.Extensibility.NamedPluginsExtensions.GetPlugin(_repositories, @"Bookstore.EmployeesDepartment")); } }

        private ExpectedBookRating_Repository _ExpectedBookRating_Repository;
        public ExpectedBookRating_Repository ExpectedBookRating { get { return _ExpectedBookRating_Repository ?? (_ExpectedBookRating_Repository = (ExpectedBookRating_Repository)Rhetos.Extensibility.NamedPluginsExtensions.GetPlugin(_repositories, @"Bookstore.ExpectedBookRating")); } }

        private ForeignBook_Repository _ForeignBook_Repository;
        public ForeignBook_Repository ForeignBook { get { return _ForeignBook_Repository ?? (_ForeignBook_Repository = (ForeignBook_Repository)Rhetos.Extensibility.NamedPluginsExtensions.GetPlugin(_repositories, @"Bookstore.ForeignBook")); } }

        private Genre_Repository _Genre_Repository;
        public Genre_Repository Genre { get { return _Genre_Repository ?? (_Genre_Repository = (Genre_Repository)Rhetos.Extensibility.NamedPluginsExtensions.GetPlugin(_repositories, @"Bookstore.Genre")); } }

        private Managers_Repository _Managers_Repository;
        public Managers_Repository Managers { get { return _Managers_Repository ?? (_Managers_Repository = (Managers_Repository)Rhetos.Extensibility.NamedPluginsExtensions.GetPlugin(_repositories, @"Bookstore.Managers")); } }

        private Person_Repository _Person_Repository;
        public Person_Repository Person { get { return _Person_Repository ?? (_Person_Repository = (Person_Repository)Rhetos.Extensibility.NamedPluginsExtensions.GetPlugin(_repositories, @"Bookstore.Person")); } }

        private Shipment_Repository _Shipment_Repository;
        public Shipment_Repository Shipment { get { return _Shipment_Repository ?? (_Shipment_Repository = (Shipment_Repository)Rhetos.Extensibility.NamedPluginsExtensions.GetPlugin(_repositories, @"Bookstore.Shipment")); } }

        private ShipmentEvent_Repository _ShipmentEvent_Repository;
        public ShipmentEvent_Repository ShipmentEvent { get { return _ShipmentEvent_Repository ?? (_ShipmentEvent_Repository = (ShipmentEvent_Repository)Rhetos.Extensibility.NamedPluginsExtensions.GetPlugin(_repositories, @"Bookstore.ShipmentEvent")); } }

        private ShipmentStatus_Repository _ShipmentStatus_Repository;
        public ShipmentStatus_Repository ShipmentStatus { get { return _ShipmentStatus_Repository ?? (_ShipmentStatus_Repository = (ShipmentStatus_Repository)Rhetos.Extensibility.NamedPluginsExtensions.GetPlugin(_repositories, @"Bookstore.ShipmentStatus")); } }

        private Topic_Repository _Topic_Repository;
        public Topic_Repository Topic { get { return _Topic_Repository ?? (_Topic_Repository = (Topic_Repository)Rhetos.Extensibility.NamedPluginsExtensions.GetPlugin(_repositories, @"Bookstore.Topic")); } }

        private Translator_Repository _Translator_Repository;
        public Translator_Repository Translator { get { return _Translator_Repository ?? (_Translator_Repository = (Translator_Repository)Rhetos.Extensibility.NamedPluginsExtensions.GetPlugin(_repositories, @"Bookstore.Translator")); } }

        private WishList_Repository _WishList_Repository;
        public WishList_Repository WishList { get { return _WishList_Repository ?? (_WishList_Repository = (WishList_Repository)Rhetos.Extensibility.NamedPluginsExtensions.GetPlugin(_repositories, @"Bookstore.WishList")); } }

        private BookGrid_Repository _BookGrid_Repository;
        public BookGrid_Repository BookGrid { get { return _BookGrid_Repository ?? (_BookGrid_Repository = (BookGrid_Repository)Rhetos.Extensibility.NamedPluginsExtensions.GetPlugin(_repositories, @"Bookstore.BookGrid")); } }

        /*ModuleInfo RepositoryMembers Bookstore*/
    }

    /*DataStructureInfo RepositoryAttributes Bookstore.ApproveShipment*/
    public partial class ApproveShipment_Repository : /*DataStructureInfo OverrideBaseType Bookstore.ApproveShipment*/ Common.OrmRepositoryBase<Common.Queryable.Bookstore_ApproveShipment, Bookstore.ApproveShipment> // Common.QueryableRepositoryBase<Common.Queryable.Bookstore_ApproveShipment, Bookstore.ApproveShipment> // Common.ReadableRepositoryBase<Bookstore.ApproveShipment> // global::Common.RepositoryBase
        , IWritableRepository<Bookstore.ApproveShipment>, IValidateRepository/*DataStructureInfo RepositoryInterface Bookstore.ApproveShipment*/
    {
        private readonly Rhetos.Utilities.ISqlUtility _sqlUtility;
        /*DataStructureInfo RepositoryPrivateMembers Bookstore.ApproveShipment*/

        public ApproveShipment_Repository(Common.DomRepository domRepository, Common.ExecutionContext executionContext, Rhetos.Utilities.ISqlUtility _sqlUtility/*DataStructureInfo RepositoryConstructorArguments Bookstore.ApproveShipment*/)
        {
            _domRepository = domRepository;
            _executionContext = executionContext;
            this._sqlUtility = _sqlUtility;
            /*DataStructureInfo RepositoryConstructorCode Bookstore.ApproveShipment*/
        }

        public static KeyValuePair<string, Type>[] GetReadParameterTypes()
        {
            return new KeyValuePair<string, Type>[]
            {
                /*DataStructureInfo ReadParameterTypes Bookstore.ApproveShipment*/
            };
        }
        
        public virtual void Save(IEnumerable<Bookstore.ApproveShipment> insertedNew, IEnumerable<Bookstore.ApproveShipment> updatedNew, IEnumerable<Bookstore.ApproveShipment> deletedIds, bool checkUserPermissions = false)
        {
            if (!DomHelper.InitializeSaveMethodItems(ref insertedNew, ref updatedNew, ref deletedIds))
                return;

            /*DataStructureInfo WritableOrm ClearContext Bookstore.ApproveShipment*/

            /*DataStructureInfo WritableOrm ArgumentValidation Bookstore.ApproveShipment*/

            { 
                var now = SqlUtility.GetDatabaseTime(_executionContext.SqlExecuter);

                foreach (var newItem in insertedNew)
                    if(newItem.EffectiveSince == null)
                        newItem.EffectiveSince = now;
            }
            /*DataStructureInfo WritableOrm Initialization Bookstore.ApproveShipment*/

            // Using old data, including lazy loading of navigation properties:

            IEnumerable<Common.Queryable.Bookstore_ApproveShipment> deleted = DomHelper.LoadOldDataWithNavigationProperties(deletedIds, this);
            IEnumerable<Common.Queryable.Bookstore_ApproveShipment> updated = DomHelper.LoadOldDataWithNavigationProperties(updatedNew, this);

            /*DataStructureInfo WritableOrm OldDataLoaded Bookstore.ApproveShipment*/

            /*DataStructureInfo WritableOrm ProcessedOldData Bookstore.ApproveShipment*/

            {
                DomHelper.WriteToDatabase(insertedNew, updatedNew, deletedIds, _executionContext.PersistenceStorage, checkUserPermissions, _sqlUtility,
                    out Exception saveException, out Rhetos.RhetosException interpretedException);

                if (saveException != null)
                {
                    if (interpretedException is Rhetos.UserException && Rhetos.Utilities.MsSqlUtility.IsReferenceErrorOnInsertUpdate(interpretedException, @"Bookstore.Shipment", @"ID", @"FK_ApproveShipment_Shipment_ShipmentID"))
                        ((Rhetos.UserException)interpretedException).SystemMessage = @"DataStructure:Bookstore.ApproveShipment,Property:ShipmentID,Referenced:Bookstore.Shipment";
                    /*DataStructureInfo WritableOrm OnDatabaseError Bookstore.ApproveShipment*/
                    DomHelper.ThrowInterpretedException(checkUserPermissions, saveException, interpretedException, _sqlUtility, "Bookstore.ApproveShipment");
                }
            }

            deleted = null;
            updated = this.Query(updatedNew.Select(item => item.ID));
            IEnumerable<Common.Queryable.Bookstore_ApproveShipment> inserted = this.Query(insertedNew.Select(item => item.ID));

            bool allEffectsCompleted = false;
            try
            {
                /*DataStructureInfo WritableOrm OnSaveTag1 Bookstore.ApproveShipment*/

                /*DataStructureInfo WritableOrm OnSaveTag2 Bookstore.ApproveShipment*/

                Rhetos.Dom.DefaultConcepts.InvalidDataMessage.ValidateOnSave(insertedNew, updatedNew, this, "Bookstore.ApproveShipment");

                /*DataStructureInfo WritableOrm AfterSave Bookstore.ApproveShipment*/

                allEffectsCompleted = true;
            }
            finally
            {
                if (!allEffectsCompleted)
                    _executionContext.PersistenceTransaction.DiscardOnDispose();
            }
        }

        public IEnumerable<Rhetos.Dom.DefaultConcepts.InvalidDataMessage> Validate(IList<Guid> ids, bool onSave)
        {
            /*DataStructureInfo WritableOrm OnSaveValidate Bookstore.ApproveShipment*/
            yield break;
        }

        /*DataStructureInfo RepositoryMembers Bookstore.ApproveShipment*/
    }

    /*DataStructureInfo RepositoryAttributes Bookstore.Book*/
    public partial class Book_Repository : /*DataStructureInfo OverrideBaseType Bookstore.Book*/ Common.OrmRepositoryBase<Common.Queryable.Bookstore_Book, Bookstore.Book> // Common.QueryableRepositoryBase<Common.Queryable.Bookstore_Book, Bookstore.Book> // Common.ReadableRepositoryBase<Bookstore.Book> // global::Common.RepositoryBase
        , IWritableRepository<Bookstore.Book>, IValidateRepository/*DataStructureInfo RepositoryInterface Bookstore.Book*/
    {
        private readonly Rhetos.Utilities.ILocalizer<Bookstore.Book> _localizer;
        private readonly Rhetos.Utilities.ISqlUtility _sqlUtility;
        /*DataStructureInfo RepositoryPrivateMembers Bookstore.Book*/

        public Book_Repository(Common.DomRepository domRepository, Common.ExecutionContext executionContext, Rhetos.Utilities.ILocalizer<Bookstore.Book> _localizer, Rhetos.Utilities.ISqlUtility _sqlUtility/*DataStructureInfo RepositoryConstructorArguments Bookstore.Book*/)
        {
            _domRepository = domRepository;
            _executionContext = executionContext;
            this._localizer = _localizer;
            this._sqlUtility = _sqlUtility;
            /*DataStructureInfo RepositoryConstructorCode Bookstore.Book*/
        }

        public static KeyValuePair<string, Type>[] GetReadParameterTypes()
        {
            return new KeyValuePair<string, Type>[]
            {
                new KeyValuePair<string, Type>(@"ComplexSearch", typeof(ComplexSearch)),
                new KeyValuePair<string, Type>(@"Bookstore.CommonMisspelling", typeof(Bookstore.CommonMisspelling)),
                new KeyValuePair<string, Type>(@"Bookstore.ForeignAuthorXWithComments", typeof(Bookstore.ForeignAuthorXWithComments)),
                new KeyValuePair<string, Type>(@"Bookstore.LongBooks", typeof(Bookstore.LongBooks)),
                new KeyValuePair<string, Type>(@"Bookstore.NameTooLong", typeof(Bookstore.NameTooLong)),
                new KeyValuePair<string, Type>(@"Bookstore.NumberOfPages_MaxValueFilter", typeof(Bookstore.NumberOfPages_MaxValueFilter)),
                new KeyValuePair<string, Type>(@"Bookstore.SystemRequiredCode", typeof(Bookstore.SystemRequiredCode)),
                new KeyValuePair<string, Type>(@"LongBooks2", typeof(LongBooks2)),
                /*DataStructureInfo ReadParameterTypes Bookstore.Book*/
            };
        }
        
        public virtual void Save(IEnumerable<Bookstore.Book> insertedNew, IEnumerable<Bookstore.Book> updatedNew, IEnumerable<Bookstore.Book> deletedIds, bool checkUserPermissions = false)
        {
            if (!DomHelper.InitializeSaveMethodItems(ref insertedNew, ref updatedNew, ref deletedIds))
                return;

            /*DataStructureInfo WritableOrm ClearContext Bookstore.Book*/

            if (checkUserPermissions)
            {
                var invalidItem = insertedNew.Where(newItem => newItem.Code != null).FirstOrDefault();

                if (invalidItem != null)
                    throw new Rhetos.UserException(
                        "It is not allowed to directly enter {0} property of {1}.",
                        new[] { _localizer["Code"], _localizer["Bookstore.Book"] },
                        "DataStructure:Bookstore.Book,ID:" + invalidItem.ID + ",Property:Code",
                        null);
            
            }

            /*DataStructureInfo WritableOrm ArgumentValidation Bookstore.Book*/

            /*DataStructureInfo WritableOrm Initialization Bookstore.Book*/

            // Using old data, including lazy loading of navigation properties:

            IEnumerable<Common.Queryable.Bookstore_Book> deleted = DomHelper.LoadOldDataWithNavigationProperties(deletedIds, this);
            IEnumerable<Common.Queryable.Bookstore_Book> updated = DomHelper.LoadOldDataWithNavigationProperties(updatedNew, this);

            foreach (var newItem in insertedNew.Concat(updatedNew))
                ShortStringPropertyCodeGenerator.CheckMaxLength(newItem.Code, newItem, "Bookstore", "Book", "Code");

            foreach (var newItem in insertedNew.Concat(updatedNew))
                ShortStringPropertyCodeGenerator.CheckMaxLength(newItem.Title, newItem, "Bookstore", "Book", "Title");

            AutoCodeHelper.UpdateCodesWithoutCache(
                _executionContext.SqlExecuter, "Bookstore.Book", "Code",
                insertedNew.Select(item => AutoCodeItem.Create(item, item.Code/*AutoCodePropertyInfo Grouping Bookstore.Book.Code*/)).ToList(),
                (item, newCode) => item.Code = newCode/*AutoCodePropertyInfo GroupColumnMetadata Bookstore.Book.Code*/);

            if (checkUserPermissions)
            {
                var changes = updatedNew.Zip(updated, (newItem, oldItem) => new { newItem, oldItem });
                foreach (var change in changes)
                    if (change.newItem.Code == null && change.oldItem.Code != null)
                        change.newItem.Code = change.oldItem.Code;
                var invalidItem = changes
                    .Where(change => change.newItem.Code != null && !change.newItem.Code.Equals(change.oldItem.Code) || change.newItem.Code == null && change.oldItem.Code != null)
                    .Select(change => change.newItem)
                    .FirstOrDefault();

                if (invalidItem != null)
                    throw new Rhetos.UserException(
                        "It is not allowed to directly enter {0} property of {1}.",
                        new[] { _localizer["Code"], _localizer["Bookstore.Book"] },
                        "DataStructure:Bookstore.Book,ID:" + invalidItem.ID + ",Property:Code",
                        null);
            
            }

            if (deletedIds.Count() > 0)
            {
                List<Bookstore.BookRating> childItems = _executionContext.Repository.Bookstore.BookRating
                    .Query(deletedIds.Select(parent => parent.ID))
                    .Select(child => child.ID).ToList()
                    .Select(childId => new Bookstore.BookRating { ID = childId }).ToList();

                if (childItems.Count() > 0)
                    _domRepository.Bookstore.BookRating.Delete(childItems);
            }

            if (deletedIds.Count() > 0)
            {
                List<Bookstore.BookTopic> childItems = deletedIds
                    .SelectMany(parent => _executionContext.Repository.Bookstore.BookTopic.Query()
                        .Where(child => child.BookID == parent.ID)
                        .Select(child => child.ID)
                        .ToList())
                    .Select(childId => new Bookstore.BookTopic { ID = childId })
                    .ToList();

                if (childItems.Count() > 0)
                    _domRepository.Bookstore.BookTopic.Delete(childItems);
            }

            if (deletedIds.Count() > 0)
            {
                List<Bookstore.BookTranslator> childItems = deletedIds
                    .SelectMany(parent => _executionContext.Repository.Bookstore.BookTranslator.Query()
                        .Where(child => child.BookID == parent.ID)
                        .Select(child => child.ID)
                        .ToList())
                    .Select(childId => new Bookstore.BookTranslator { ID = childId })
                    .ToList();

                if (childItems.Count() > 0)
                    _domRepository.Bookstore.BookTranslator.Delete(childItems);
            }

            if (deletedIds.Count() > 0)
            {
                List<Bookstore.ChildrensBook> childItems = _executionContext.Repository.Bookstore.ChildrensBook
                    .Query(deletedIds.Select(parent => parent.ID))
                    .Select(child => child.ID).ToList()
                    .Select(childId => new Bookstore.ChildrensBook { ID = childId }).ToList();

                if (childItems.Count() > 0)
                    _domRepository.Bookstore.ChildrensBook.Delete(childItems);
            }

            if (deletedIds.Count() > 0)
            {
                List<Bookstore.Comment> childItems = deletedIds
                    .SelectMany(parent => _executionContext.Repository.Bookstore.Comment.Query()
                        .Where(child => child.BookID == parent.ID)
                        .Select(child => child.ID)
                        .ToList())
                    .Select(childId => new Bookstore.Comment { ID = childId })
                    .ToList();

                if (childItems.Count() > 0)
                    _domRepository.Bookstore.Comment.Delete(childItems);
            }

            if (deletedIds.Count() > 0)
            {
                List<Bookstore.ForeignBook> childItems = _executionContext.Repository.Bookstore.ForeignBook
                    .Query(deletedIds.Select(parent => parent.ID))
                    .Select(child => child.ID).ToList()
                    .Select(childId => new Bookstore.ForeignBook { ID = childId }).ToList();

                if (childItems.Count() > 0)
                    _domRepository.Bookstore.ForeignBook.Delete(childItems);
            }

            /*DataStructureInfo WritableOrm OldDataLoaded Bookstore.Book*/

            {
                var invalid = insertedNew.Concat(updatedNew).FirstOrDefault(item => item.Title == null || string.IsNullOrWhiteSpace(item.Title) /*RequiredPropertyInfo OrCondition Bookstore.Book.Title*/);
                if (invalid != null)
                    throw new Rhetos.UserException("It is not allowed to enter {0} because the required property {1} is not set.",
                        new[] { _localizer["Bookstore.Book"], _localizer["Title"] },
                        "DataStructure:Bookstore.Book,ID:" + invalid.ID.ToString() + ",Property:Title", null);
            }
            /*DataStructureInfo WritableOrm ProcessedOldData Bookstore.Book*/

            {
                DomHelper.WriteToDatabase(insertedNew, updatedNew, deletedIds, _executionContext.PersistenceStorage, checkUserPermissions, _sqlUtility,
                    out Exception saveException, out Rhetos.RhetosException interpretedException);

                if (saveException != null)
                {
                    if (interpretedException is Rhetos.UserException && Rhetos.Utilities.MsSqlUtility.IsReferenceErrorOnDelete(interpretedException, @"Bookstore.BookRating", @"ID", @"FK_BookRating_Book_ID"))
                        ((Rhetos.UserException)interpretedException).SystemMessage = @"DataStructure:Bookstore.BookRating,Property:ID,Referenced:Bookstore.Book";
                    if (interpretedException is Rhetos.UserException && Rhetos.Utilities.MsSqlUtility.IsReferenceErrorOnDelete(interpretedException, @"Bookstore.BookTopic", @"BookID", @"FK_BookTopic_Book_BookID"))
                        ((Rhetos.UserException)interpretedException).SystemMessage = @"DataStructure:Bookstore.BookTopic,Property:BookID,Referenced:Bookstore.Book";
                    if (interpretedException is Rhetos.UserException && Rhetos.Utilities.MsSqlUtility.IsReferenceErrorOnDelete(interpretedException, @"Bookstore.BookTranslator", @"BookID", @"FK_BookTranslator_Book_BookID"))
                        ((Rhetos.UserException)interpretedException).SystemMessage = @"DataStructure:Bookstore.BookTranslator,Property:BookID,Referenced:Bookstore.Book";
                    if (interpretedException is Rhetos.UserException && Rhetos.Utilities.MsSqlUtility.IsReferenceErrorOnDelete(interpretedException, @"Bookstore.ChildrensBook", @"ID", @"FK_ChildrensBook_Book_ID"))
                        ((Rhetos.UserException)interpretedException).SystemMessage = @"DataStructure:Bookstore.ChildrensBook,Property:ID,Referenced:Bookstore.Book";
                    if (interpretedException is Rhetos.UserException && Rhetos.Utilities.MsSqlUtility.IsReferenceErrorOnDelete(interpretedException, @"Bookstore.Comment", @"BookID", @"FK_Comment_Book_BookID"))
                        ((Rhetos.UserException)interpretedException).SystemMessage = @"DataStructure:Bookstore.Comment,Property:BookID,Referenced:Bookstore.Book";
                    if (interpretedException is Rhetos.UserException && Rhetos.Utilities.MsSqlUtility.IsReferenceErrorOnDelete(interpretedException, @"Bookstore.Disposal", @"BookID", @"FK_Disposal_Book_BookID"))
                        ((Rhetos.UserException)interpretedException).SystemMessage = @"DataStructure:Bookstore.Disposal,Property:BookID,Referenced:Bookstore.Book";
                    if (interpretedException is Rhetos.UserException && Rhetos.Utilities.MsSqlUtility.IsReferenceErrorOnDelete(interpretedException, @"Bookstore.ForeignBook", @"ID", @"FK_ForeignBook_Book_ID"))
                        ((Rhetos.UserException)interpretedException).SystemMessage = @"DataStructure:Bookstore.ForeignBook,Property:ID,Referenced:Bookstore.Book";
                    if (interpretedException is Rhetos.UserException && Rhetos.Utilities.MsSqlUtility.IsReferenceErrorOnInsertUpdate(interpretedException, @"Bookstore.Person", @"ID", @"FK_Book_Person_AuthorID"))
                        ((Rhetos.UserException)interpretedException).SystemMessage = @"DataStructure:Bookstore.Book,Property:AuthorID,Referenced:Bookstore.Person";
                    if (interpretedException is Rhetos.UserException && Rhetos.Utilities.MsSqlUtility.IsUniqueError(interpretedException, @"Bookstore.Book", @"IX_Book_Code"))
                        ((Rhetos.UserException)interpretedException).SystemMessage = @"DataStructure:Bookstore.Book,Property:Code";
                    /*DataStructureInfo WritableOrm OnDatabaseError Bookstore.Book*/
                    DomHelper.ThrowInterpretedException(checkUserPermissions, saveException, interpretedException, _sqlUtility, "Bookstore.Book");
                }
            }

            deleted = null;
            updated = this.Query(updatedNew.Select(item => item.ID));
            IEnumerable<Common.Queryable.Bookstore_Book> inserted = this.Query(insertedNew.Select(item => item.ID));

            bool allEffectsCompleted = false;
            try
            {
                /*DataStructureInfo WritableOrm OnSaveTag1 Bookstore.Book*/

                /*DataStructureInfo WritableOrm OnSaveTag2 Bookstore.Book*/

                Rhetos.Dom.DefaultConcepts.InvalidDataMessage.ValidateOnSave(insertedNew, updatedNew, this, "Bookstore.Book");

                /*DataStructureInfo WritableOrm AfterSave Bookstore.Book*/

                allEffectsCompleted = true;
            }
            finally
            {
                if (!allEffectsCompleted)
                    _executionContext.PersistenceTransaction.DiscardOnDispose();
            }
        }

        public IEnumerable<Rhetos.Dom.DefaultConcepts.InvalidDataMessage> Validate(IList<Guid> ids, bool onSave)
        {
            if (onSave)
            {
                var errorIds = this.Filter(this.Query(ids), new Bookstore.NumberOfPages_MaxValueFilter()).Select(item => item.ID).ToArray();
                if (errorIds.Count() > 0)
                    foreach (var error in GetErrorMessage_NumberOfPages_MaxValueFilter(errorIds))
                        yield return error;
            }
            if (onSave)
            {
                var errorIds = this.Filter(this.Query(ids), new CommonMisspelling()).Select(item => item.ID).ToArray();
                if (errorIds.Count() > 0)
                    foreach (var error in GetErrorMessage_CommonMisspelling(errorIds))
                        yield return error;
            }
            if (onSave)
            {
                var errorIds = this.Filter(this.Query(ids), new NameTooLong()).Select(item => item.ID).ToArray();
                if (errorIds.Count() > 0)
                    foreach (var error in GetErrorMessage_NameTooLong(errorIds))
                        yield return error;
            }
            if (onSave)
            {
                var errorIds = this.Filter(this.Query(ids), new SystemRequiredCode()).Select(item => item.ID).ToArray();
                if (errorIds.Count() > 0)
                    foreach (var error in GetErrorMessage_SystemRequiredCode(errorIds))
                        yield return error;
            }
            /*DataStructureInfo WritableOrm OnSaveValidate Bookstore.Book*/
            yield break;
        }

        public global::Bookstore.Book[] Load(ComplexSearch filter_Parameter)
        {
            Func<Common.DomRepository, ComplexSearch/*FilterByInfo AdditionalParametersType Bookstore.Book.ComplexSearch*/, Bookstore.Book[]> filter_Function =
                (repository, parameter) =>
      {
          var query = repository.Bookstore.Book.Query(item => item.NumberOfPages >= parameter.MinimumPages);
          if (parameter.ForeignBooksOnly == true)
               query = query.Where(item => item.Extension_ForeignBook.ID != null);
          Book[] books = query.ToSimple().ToArray();
          
          if (parameter.MaskTitles == true)
              foreach (var book in books.Where(b => !string.IsNullOrEmpty(b.Title))) book.Title = book.Title.First() + "***" + book.Title.Last();
          return books;
      };

            return filter_Function(_domRepository, filter_Parameter/*FilterByInfo AdditionalParametersArgument Bookstore.Book.ComplexSearch*/);
        }

        public IEnumerable<InvalidDataMessage> GetErrorMessage_NumberOfPages_MaxValueFilter(IEnumerable<Guid> invalidData_Ids)
        {
            IDictionary<string, object> metadata = new Dictionary<string, object>();
            metadata["Validation"] = @"Bookstore.NumberOfPages_MaxValueFilter";
            metadata[@"Property"] = @"NumberOfPages";
            /*InvalidDataInfo ErrorMetadata Bookstore.Book.'Bookstore.NumberOfPages_MaxValueFilter'*/
            /*InvalidDataInfo CustomValidationResult Bookstore.Book.'Bookstore.NumberOfPages_MaxValueFilter'*/
            return invalidData_Ids.Select(id => new InvalidDataMessage
            {
                ID = id,
                Message = @"Maximum value of {0} is {1}.",
                MessageParameters = new object[] { @"NumberOfPages", @"999" },
                Metadata = metadata
            });
        }

        public IEnumerable<InvalidDataMessage> GetErrorMessage_CommonMisspelling(IEnumerable<Guid> invalidData_Ids)
        {
            IDictionary<string, object> metadata = new Dictionary<string, object>();
            metadata["Validation"] = @"CommonMisspelling";
            /*InvalidDataInfo ErrorMetadata Bookstore.Book.CommonMisspelling*/
            /*InvalidDataInfo CustomValidationResult Bookstore.Book.CommonMisspelling*/
            return invalidData_Ids.Select(id => new InvalidDataMessage
            {
                ID = id,
                Message = @"It is not allowed to enter misspelled word ""curiousity"".",
                Metadata = metadata
            });
        }

        public IEnumerable<InvalidDataMessage> GetErrorMessage_NameTooLong(IEnumerable<Guid> invalidData_Ids)
        {
            IDictionary<string, object> metadata = new Dictionary<string, object>();
            metadata["Validation"] = @"NameTooLong";
            /*InvalidDataInfo ErrorMetadata Bookstore.Book.NameTooLong*/
            /*InvalidDataInfo CustomValidationResult Bookstore.Book.NameTooLong*/
            return invalidData_Ids.Select(id => new InvalidDataMessage
            {
                ID = id,
                Message = @"[Test] Longer than 100.",
                Metadata = metadata
            });
        }

        public IEnumerable<InvalidDataMessage> GetErrorMessage_SystemRequiredCode(IEnumerable<Guid> invalidData_Ids)
        {
            IDictionary<string, object> metadata = new Dictionary<string, object>();
            metadata["Validation"] = @"SystemRequiredCode";
            metadata[@"Property"] = @"Code";
            /*InvalidDataInfo ErrorMetadata Bookstore.Book.SystemRequiredCode*/
            /*InvalidDataInfo CustomValidationResult Bookstore.Book.SystemRequiredCode*/
            return invalidData_Ids.Select(id => new InvalidDataMessage
            {
                ID = id,
                Message = @"System required property {0} is not set.",
                MessageParameters = new object[] { @"ShortString Bookstore.Book.Code" },
                Metadata = metadata
            });
        }

        public IQueryable<Common.Queryable.Bookstore_Book> Filter(IQueryable<Common.Queryable.Bookstore_Book> source, Bookstore.CommonMisspelling parameter)
        {
            /*QueryFilterExpressionInfo BeforeFilter Bookstore.Book.'Bookstore.CommonMisspelling'*/
            return source.Where(book => book.Title.Contains("curiousity"));
        }

        public IQueryable<Common.Queryable.Bookstore_Book> Filter(IQueryable<Common.Queryable.Bookstore_Book> source, Bookstore.ForeignAuthorXWithComments parameter)
        {
            /*QueryFilterExpressionInfo BeforeFilter Bookstore.Book.'Bookstore.ForeignAuthorXWithComments'*/
            return source.Where(item => item.Author.Name.StartsWith("X") && item.Extension_ForeignBook.ID != null && _domRepository.Bookstore.Comment.Subquery.Where(c => c.BookID == item.ID).Count() >= 3);
        }

        public IQueryable<Common.Queryable.Bookstore_Book> Filter(IQueryable<Common.Queryable.Bookstore_Book> source, Bookstore.LongBooks parameter)
        {
            /*QueryFilterExpressionInfo BeforeFilter Bookstore.Book.'Bookstore.LongBooks'*/
            return source.Where(item => item.NumberOfPages >= 500);
        }

        public IQueryable<Common.Queryable.Bookstore_Book> Filter(IQueryable<Common.Queryable.Bookstore_Book> source, Bookstore.NameTooLong parameter)
        {
            /*QueryFilterExpressionInfo BeforeFilter Bookstore.Book.'Bookstore.NameTooLong'*/
            return source.Where(item => item.Title.Length > 100);
        }

        public IQueryable<Common.Queryable.Bookstore_Book> Filter(IQueryable<Common.Queryable.Bookstore_Book> items, Bookstore.NumberOfPages_MaxValueFilter parameter)
        {
            /*QueryFilterExpressionInfo BeforeFilter Bookstore.Book.'Bookstore.NumberOfPages_MaxValueFilter'*/
            int limit = 999; return items.Where(item => item.NumberOfPages != null && item.NumberOfPages > limit);
        }

        public IQueryable<Common.Queryable.Bookstore_Book> Filter(IQueryable<Common.Queryable.Bookstore_Book> source, Bookstore.SystemRequiredCode parameter)
        {
            /*QueryFilterExpressionInfo BeforeFilter Bookstore.Book.'Bookstore.SystemRequiredCode'*/
            return source.Where(item => item.Code == null);
        }

        public IQueryable<Common.Queryable.Bookstore_Book> Filter(IQueryable<Common.Queryable.Bookstore_Book> query, LongBooks2 parameter)
        {/*ComposableFilterByInfo BeforeFilter Bookstore.Book.LongBooks2*/
            // Suppressing additional expression arguments in optimized ComposableFilterBy format (configuration option CommonConcepts:ComposableFilterByOptimizeLambda)
            // /*ComposableFilterByInfo AdditionalParametersArgument Bookstore.Book.LongBooks2*/
            // /*ComposableFilterByInfo AdditionalParametersType Bookstore.Book.LongBooks2*/
            
            return query.Where(item => item.NumberOfPages >= 300);
        }

        /*DataStructureInfo RepositoryMembers Bookstore.Book*/
    }

    /*DataStructureInfo RepositoryAttributes Bookstore.BookInfo*/
    public partial class BookInfo_Repository : /*DataStructureInfo OverrideBaseType Bookstore.BookInfo*/ Common.OrmRepositoryBase<Common.Queryable.Bookstore_BookInfo, Bookstore.BookInfo> // Common.QueryableRepositoryBase<Common.Queryable.Bookstore_BookInfo, Bookstore.BookInfo> // Common.ReadableRepositoryBase<Bookstore.BookInfo> // global::Common.RepositoryBase
        /*DataStructureInfo RepositoryInterface Bookstore.BookInfo*/
    {
        /*DataStructureInfo RepositoryPrivateMembers Bookstore.BookInfo*/

        public BookInfo_Repository(Common.DomRepository domRepository, Common.ExecutionContext executionContext/*DataStructureInfo RepositoryConstructorArguments Bookstore.BookInfo*/)
        {
            _domRepository = domRepository;
            _executionContext = executionContext;
            /*DataStructureInfo RepositoryConstructorCode Bookstore.BookInfo*/
        }

        public static KeyValuePair<string, Type>[] GetReadParameterTypes()
        {
            return new KeyValuePair<string, Type>[]
            {
                /*DataStructureInfo ReadParameterTypes Bookstore.BookInfo*/
            };
        }
        
        /*DataStructureInfo RepositoryMembers Bookstore.BookInfo*/
    }

    /*DataStructureInfo RepositoryAttributes Bookstore.BookRating*/
    public partial class BookRating_Repository : /*DataStructureInfo OverrideBaseType Bookstore.BookRating*/ Common.OrmRepositoryBase<Common.Queryable.Bookstore_BookRating, Bookstore.BookRating> // Common.QueryableRepositoryBase<Common.Queryable.Bookstore_BookRating, Bookstore.BookRating> // Common.ReadableRepositoryBase<Bookstore.BookRating> // global::Common.RepositoryBase
        , IWritableRepository<Bookstore.BookRating>, IValidateRepository/*DataStructureInfo RepositoryInterface Bookstore.BookRating*/
    {
        private readonly Rhetos.Utilities.ISqlUtility _sqlUtility;
        /*DataStructureInfo RepositoryPrivateMembers Bookstore.BookRating*/

        public BookRating_Repository(Common.DomRepository domRepository, Common.ExecutionContext executionContext, Rhetos.Utilities.ISqlUtility _sqlUtility/*DataStructureInfo RepositoryConstructorArguments Bookstore.BookRating*/)
        {
            _domRepository = domRepository;
            _executionContext = executionContext;
            this._sqlUtility = _sqlUtility;
            /*DataStructureInfo RepositoryConstructorCode Bookstore.BookRating*/
        }

        public static KeyValuePair<string, Type>[] GetReadParameterTypes()
        {
            return new KeyValuePair<string, Type>[]
            {
                /*DataStructureInfo ReadParameterTypes Bookstore.BookRating*/
            };
        }
        
        public virtual void Save(IEnumerable<Bookstore.BookRating> insertedNew, IEnumerable<Bookstore.BookRating> updatedNew, IEnumerable<Bookstore.BookRating> deletedIds, bool checkUserPermissions = false)
        {
            if (!DomHelper.InitializeSaveMethodItems(ref insertedNew, ref updatedNew, ref deletedIds))
                return;

            /*DataStructureInfo WritableOrm ClearContext Bookstore.BookRating*/

            /*DataStructureInfo WritableOrm ArgumentValidation Bookstore.BookRating*/

            /*DataStructureInfo WritableOrm Initialization Bookstore.BookRating*/

            // Using old data, including lazy loading of navigation properties:

            IEnumerable<Common.Queryable.Bookstore_BookRating> deleted = DomHelper.LoadOldDataWithNavigationProperties(deletedIds, this);
            IEnumerable<Common.Queryable.Bookstore_BookRating> updated = DomHelper.LoadOldDataWithNavigationProperties(updatedNew, this);

            /*DataStructureInfo WritableOrm OldDataLoaded Bookstore.BookRating*/

            /*DataStructureInfo WritableOrm ProcessedOldData Bookstore.BookRating*/

            {
                DomHelper.WriteToDatabase(insertedNew, updatedNew, deletedIds, _executionContext.PersistenceStorage, checkUserPermissions, _sqlUtility,
                    out Exception saveException, out Rhetos.RhetosException interpretedException);

                if (saveException != null)
                {
                    /*DataStructureInfo WritableOrm OnDatabaseError Bookstore.BookRating*/
                    DomHelper.ThrowInterpretedException(checkUserPermissions, saveException, interpretedException, _sqlUtility, "Bookstore.BookRating");
                }
            }

            deleted = null;
            updated = this.Query(updatedNew.Select(item => item.ID));
            IEnumerable<Common.Queryable.Bookstore_BookRating> inserted = this.Query(insertedNew.Select(item => item.ID));

            bool allEffectsCompleted = false;
            try
            {
                /*DataStructureInfo WritableOrm OnSaveTag1 Bookstore.BookRating*/

                /*DataStructureInfo WritableOrm OnSaveTag2 Bookstore.BookRating*/

                Rhetos.Dom.DefaultConcepts.InvalidDataMessage.ValidateOnSave(insertedNew, updatedNew, this, "Bookstore.BookRating");

                /*DataStructureInfo WritableOrm AfterSave Bookstore.BookRating*/

                allEffectsCompleted = true;
            }
            finally
            {
                if (!allEffectsCompleted)
                    _executionContext.PersistenceTransaction.DiscardOnDispose();
            }
        }

        public IEnumerable<Rhetos.Dom.DefaultConcepts.InvalidDataMessage> Validate(IList<Guid> ids, bool onSave)
        {
            /*DataStructureInfo WritableOrm OnSaveValidate Bookstore.BookRating*/
            yield break;
        }

        /*DataStructureInfo RepositoryMembers Bookstore.BookRating*/
    }

    /*DataStructureInfo RepositoryAttributes Bookstore.BookTopic*/
    public partial class BookTopic_Repository : /*DataStructureInfo OverrideBaseType Bookstore.BookTopic*/ Common.OrmRepositoryBase<Common.Queryable.Bookstore_BookTopic, Bookstore.BookTopic> // Common.QueryableRepositoryBase<Common.Queryable.Bookstore_BookTopic, Bookstore.BookTopic> // Common.ReadableRepositoryBase<Bookstore.BookTopic> // global::Common.RepositoryBase
        , IWritableRepository<Bookstore.BookTopic>, IValidateRepository/*DataStructureInfo RepositoryInterface Bookstore.BookTopic*/
    {
        private readonly Rhetos.Utilities.ILocalizer<Bookstore.BookTopic> _localizer;
        private readonly Rhetos.Utilities.ISqlUtility _sqlUtility;
        /*DataStructureInfo RepositoryPrivateMembers Bookstore.BookTopic*/

        public BookTopic_Repository(Common.DomRepository domRepository, Common.ExecutionContext executionContext, Rhetos.Utilities.ILocalizer<Bookstore.BookTopic> _localizer, Rhetos.Utilities.ISqlUtility _sqlUtility/*DataStructureInfo RepositoryConstructorArguments Bookstore.BookTopic*/)
        {
            _domRepository = domRepository;
            _executionContext = executionContext;
            this._localizer = _localizer;
            this._sqlUtility = _sqlUtility;
            /*DataStructureInfo RepositoryConstructorCode Bookstore.BookTopic*/
        }

        public static KeyValuePair<string, Type>[] GetReadParameterTypes()
        {
            return new KeyValuePair<string, Type>[]
            {
                new KeyValuePair<string, Type>(@"Bookstore.SystemRequiredBook", typeof(Bookstore.SystemRequiredBook)),
                /*DataStructureInfo ReadParameterTypes Bookstore.BookTopic*/
            };
        }
        
        public virtual void Save(IEnumerable<Bookstore.BookTopic> insertedNew, IEnumerable<Bookstore.BookTopic> updatedNew, IEnumerable<Bookstore.BookTopic> deletedIds, bool checkUserPermissions = false)
        {
            if (!DomHelper.InitializeSaveMethodItems(ref insertedNew, ref updatedNew, ref deletedIds))
                return;

            /*DataStructureInfo WritableOrm ClearContext Bookstore.BookTopic*/

            /*DataStructureInfo WritableOrm ArgumentValidation Bookstore.BookTopic*/

            /*DataStructureInfo WritableOrm Initialization Bookstore.BookTopic*/

            // Using old data, including lazy loading of navigation properties:

            IEnumerable<Common.Queryable.Bookstore_BookTopic> deleted = DomHelper.LoadOldDataWithNavigationProperties(deletedIds, this);
            IEnumerable<Common.Queryable.Bookstore_BookTopic> updated = DomHelper.LoadOldDataWithNavigationProperties(updatedNew, this);

            /*DataStructureInfo WritableOrm OldDataLoaded Bookstore.BookTopic*/

            {
                var invalid = insertedNew.Concat(updatedNew).FirstOrDefault(item => item.TopicID == null /*RequiredPropertyInfo OrCondition Bookstore.BookTopic.Topic*/);
                if (invalid != null)
                    throw new Rhetos.UserException("It is not allowed to enter {0} because the required property {1} is not set.",
                        new[] { _localizer["Bookstore.BookTopic"], _localizer["Topic"] },
                        "DataStructure:Bookstore.BookTopic,ID:" + invalid.ID.ToString() + ",Property:TopicID", null);
            }
            /*DataStructureInfo WritableOrm ProcessedOldData Bookstore.BookTopic*/

            {
                DomHelper.WriteToDatabase(insertedNew, updatedNew, deletedIds, _executionContext.PersistenceStorage, checkUserPermissions, _sqlUtility,
                    out Exception saveException, out Rhetos.RhetosException interpretedException);

                if (saveException != null)
                {
                    if (interpretedException is Rhetos.UserException && Rhetos.Utilities.MsSqlUtility.IsReferenceErrorOnInsertUpdate(interpretedException, @"Bookstore.Book", @"ID", @"FK_BookTopic_Book_BookID"))
                        ((Rhetos.UserException)interpretedException).SystemMessage = @"DataStructure:Bookstore.BookTopic,Property:BookID,Referenced:Bookstore.Book";
                    if (interpretedException is Rhetos.UserException && Rhetos.Utilities.MsSqlUtility.IsReferenceErrorOnInsertUpdate(interpretedException, @"Bookstore.Topic", @"ID", @"FK_BookTopic_Topic_TopicID"))
                        ((Rhetos.UserException)interpretedException).SystemMessage = @"DataStructure:Bookstore.BookTopic,Property:TopicID,Referenced:Bookstore.Topic";
                    if (interpretedException is Rhetos.UserException && Rhetos.Utilities.MsSqlUtility.IsUniqueError(interpretedException, @"Bookstore.BookTopic", @"IX_BookTopic_Book_Topic"))
                        ((Rhetos.UserException)interpretedException).SystemMessage = @"DataStructure:Bookstore.BookTopic,Property:Book Topic";
                    /*DataStructureInfo WritableOrm OnDatabaseError Bookstore.BookTopic*/
                    DomHelper.ThrowInterpretedException(checkUserPermissions, saveException, interpretedException, _sqlUtility, "Bookstore.BookTopic");
                }
            }

            deleted = null;
            updated = this.Query(updatedNew.Select(item => item.ID));
            IEnumerable<Common.Queryable.Bookstore_BookTopic> inserted = this.Query(insertedNew.Select(item => item.ID));

            bool allEffectsCompleted = false;
            try
            {
                /*DataStructureInfo WritableOrm OnSaveTag1 Bookstore.BookTopic*/

                /*DataStructureInfo WritableOrm OnSaveTag2 Bookstore.BookTopic*/

                Rhetos.Dom.DefaultConcepts.InvalidDataMessage.ValidateOnSave(insertedNew, updatedNew, this, "Bookstore.BookTopic");

                /*DataStructureInfo WritableOrm AfterSave Bookstore.BookTopic*/

                allEffectsCompleted = true;
            }
            finally
            {
                if (!allEffectsCompleted)
                    _executionContext.PersistenceTransaction.DiscardOnDispose();
            }
        }

        public IEnumerable<Rhetos.Dom.DefaultConcepts.InvalidDataMessage> Validate(IList<Guid> ids, bool onSave)
        {
            if (onSave)
            {
                var errorIds = this.Filter(this.Query(ids), new SystemRequiredBook()).Select(item => item.ID).ToArray();
                if (errorIds.Count() > 0)
                    foreach (var error in GetErrorMessage_SystemRequiredBook(errorIds))
                        yield return error;
            }
            /*DataStructureInfo WritableOrm OnSaveValidate Bookstore.BookTopic*/
            yield break;
        }

        public IEnumerable<InvalidDataMessage> GetErrorMessage_SystemRequiredBook(IEnumerable<Guid> invalidData_Ids)
        {
            IDictionary<string, object> metadata = new Dictionary<string, object>();
            metadata["Validation"] = @"SystemRequiredBook";
            metadata[@"Property"] = @"Book";
            /*InvalidDataInfo ErrorMetadata Bookstore.BookTopic.SystemRequiredBook*/
            /*InvalidDataInfo CustomValidationResult Bookstore.BookTopic.SystemRequiredBook*/
            return invalidData_Ids.Select(id => new InvalidDataMessage
            {
                ID = id,
                Message = @"System required property {0} is not set.",
                MessageParameters = new object[] { @"Reference Bookstore.BookTopic.Book" },
                Metadata = metadata
            });
        }

        public IQueryable<Common.Queryable.Bookstore_BookTopic> Filter(IQueryable<Common.Queryable.Bookstore_BookTopic> source, Bookstore.SystemRequiredBook parameter)
        {
            /*QueryFilterExpressionInfo BeforeFilter Bookstore.BookTopic.'Bookstore.SystemRequiredBook'*/
            return source.Where(item => item.Book == null);
        }

        /*DataStructureInfo RepositoryMembers Bookstore.BookTopic*/
    }

    /*DataStructureInfo RepositoryAttributes Bookstore.BookTranslator*/
    public partial class BookTranslator_Repository : /*DataStructureInfo OverrideBaseType Bookstore.BookTranslator*/ Common.OrmRepositoryBase<Common.Queryable.Bookstore_BookTranslator, Bookstore.BookTranslator> // Common.QueryableRepositoryBase<Common.Queryable.Bookstore_BookTranslator, Bookstore.BookTranslator> // Common.ReadableRepositoryBase<Bookstore.BookTranslator> // global::Common.RepositoryBase
        , IWritableRepository<Bookstore.BookTranslator>, IValidateRepository/*DataStructureInfo RepositoryInterface Bookstore.BookTranslator*/
    {
        private readonly Rhetos.Utilities.ILocalizer<Bookstore.BookTranslator> _localizer;
        private readonly Rhetos.Utilities.ISqlUtility _sqlUtility;
        /*DataStructureInfo RepositoryPrivateMembers Bookstore.BookTranslator*/

        public BookTranslator_Repository(Common.DomRepository domRepository, Common.ExecutionContext executionContext, Rhetos.Utilities.ILocalizer<Bookstore.BookTranslator> _localizer, Rhetos.Utilities.ISqlUtility _sqlUtility/*DataStructureInfo RepositoryConstructorArguments Bookstore.BookTranslator*/)
        {
            _domRepository = domRepository;
            _executionContext = executionContext;
            this._localizer = _localizer;
            this._sqlUtility = _sqlUtility;
            /*DataStructureInfo RepositoryConstructorCode Bookstore.BookTranslator*/
        }

        public static KeyValuePair<string, Type>[] GetReadParameterTypes()
        {
            return new KeyValuePair<string, Type>[]
            {
                new KeyValuePair<string, Type>(@"Bookstore.SystemRequiredBook", typeof(Bookstore.SystemRequiredBook)),
                /*DataStructureInfo ReadParameterTypes Bookstore.BookTranslator*/
            };
        }
        
        public virtual void Save(IEnumerable<Bookstore.BookTranslator> insertedNew, IEnumerable<Bookstore.BookTranslator> updatedNew, IEnumerable<Bookstore.BookTranslator> deletedIds, bool checkUserPermissions = false)
        {
            if (!DomHelper.InitializeSaveMethodItems(ref insertedNew, ref updatedNew, ref deletedIds))
                return;

            /*DataStructureInfo WritableOrm ClearContext Bookstore.BookTranslator*/

            /*DataStructureInfo WritableOrm ArgumentValidation Bookstore.BookTranslator*/

            /*DataStructureInfo WritableOrm Initialization Bookstore.BookTranslator*/

            // Using old data, including lazy loading of navigation properties:

            IEnumerable<Common.Queryable.Bookstore_BookTranslator> deleted = DomHelper.LoadOldDataWithNavigationProperties(deletedIds, this);
            IEnumerable<Common.Queryable.Bookstore_BookTranslator> updated = DomHelper.LoadOldDataWithNavigationProperties(updatedNew, this);

            /*DataStructureInfo WritableOrm OldDataLoaded Bookstore.BookTranslator*/

            {
                var invalid = insertedNew.Concat(updatedNew).FirstOrDefault(item => item.TranslatorID == null /*RequiredPropertyInfo OrCondition Bookstore.BookTranslator.Translator*/);
                if (invalid != null)
                    throw new Rhetos.UserException("It is not allowed to enter {0} because the required property {1} is not set.",
                        new[] { _localizer["Bookstore.BookTranslator"], _localizer["Translator"] },
                        "DataStructure:Bookstore.BookTranslator,ID:" + invalid.ID.ToString() + ",Property:TranslatorID", null);
            }
            /*DataStructureInfo WritableOrm ProcessedOldData Bookstore.BookTranslator*/

            {
                DomHelper.WriteToDatabase(insertedNew, updatedNew, deletedIds, _executionContext.PersistenceStorage, checkUserPermissions, _sqlUtility,
                    out Exception saveException, out Rhetos.RhetosException interpretedException);

                if (saveException != null)
                {
                    if (interpretedException is Rhetos.UserException && Rhetos.Utilities.MsSqlUtility.IsReferenceErrorOnInsertUpdate(interpretedException, @"Bookstore.Book", @"ID", @"FK_BookTranslator_Book_BookID"))
                        ((Rhetos.UserException)interpretedException).SystemMessage = @"DataStructure:Bookstore.BookTranslator,Property:BookID,Referenced:Bookstore.Book";
                    if (interpretedException is Rhetos.UserException && Rhetos.Utilities.MsSqlUtility.IsReferenceErrorOnInsertUpdate(interpretedException, @"Bookstore.Translator", @"ID", @"FK_BookTranslator_Translator_TranslatorID"))
                        ((Rhetos.UserException)interpretedException).SystemMessage = @"DataStructure:Bookstore.BookTranslator,Property:TranslatorID,Referenced:Bookstore.Translator";
                    if (interpretedException is Rhetos.UserException && Rhetos.Utilities.MsSqlUtility.IsUniqueError(interpretedException, @"Bookstore.BookTranslator", @"IX_BookTranslator_Book_Translator"))
                        ((Rhetos.UserException)interpretedException).SystemMessage = @"DataStructure:Bookstore.BookTranslator,Property:Book Translator";
                    /*DataStructureInfo WritableOrm OnDatabaseError Bookstore.BookTranslator*/
                    DomHelper.ThrowInterpretedException(checkUserPermissions, saveException, interpretedException, _sqlUtility, "Bookstore.BookTranslator");
                }
            }

            deleted = null;
            updated = this.Query(updatedNew.Select(item => item.ID));
            IEnumerable<Common.Queryable.Bookstore_BookTranslator> inserted = this.Query(insertedNew.Select(item => item.ID));

            bool allEffectsCompleted = false;
            try
            {
                /*DataStructureInfo WritableOrm OnSaveTag1 Bookstore.BookTranslator*/

                /*DataStructureInfo WritableOrm OnSaveTag2 Bookstore.BookTranslator*/

                Rhetos.Dom.DefaultConcepts.InvalidDataMessage.ValidateOnSave(insertedNew, updatedNew, this, "Bookstore.BookTranslator");

                /*DataStructureInfo WritableOrm AfterSave Bookstore.BookTranslator*/

                allEffectsCompleted = true;
            }
            finally
            {
                if (!allEffectsCompleted)
                    _executionContext.PersistenceTransaction.DiscardOnDispose();
            }
        }

        public IEnumerable<Rhetos.Dom.DefaultConcepts.InvalidDataMessage> Validate(IList<Guid> ids, bool onSave)
        {
            if (onSave)
            {
                var errorIds = this.Filter(this.Query(ids), new SystemRequiredBook()).Select(item => item.ID).ToArray();
                if (errorIds.Count() > 0)
                    foreach (var error in GetErrorMessage_SystemRequiredBook(errorIds))
                        yield return error;
            }
            /*DataStructureInfo WritableOrm OnSaveValidate Bookstore.BookTranslator*/
            yield break;
        }

        public IEnumerable<InvalidDataMessage> GetErrorMessage_SystemRequiredBook(IEnumerable<Guid> invalidData_Ids)
        {
            IDictionary<string, object> metadata = new Dictionary<string, object>();
            metadata["Validation"] = @"SystemRequiredBook";
            metadata[@"Property"] = @"Book";
            /*InvalidDataInfo ErrorMetadata Bookstore.BookTranslator.SystemRequiredBook*/
            /*InvalidDataInfo CustomValidationResult Bookstore.BookTranslator.SystemRequiredBook*/
            return invalidData_Ids.Select(id => new InvalidDataMessage
            {
                ID = id,
                Message = @"System required property {0} is not set.",
                MessageParameters = new object[] { @"Reference Bookstore.BookTranslator.Book" },
                Metadata = metadata
            });
        }

        public IQueryable<Common.Queryable.Bookstore_BookTranslator> Filter(IQueryable<Common.Queryable.Bookstore_BookTranslator> source, Bookstore.SystemRequiredBook parameter)
        {
            /*QueryFilterExpressionInfo BeforeFilter Bookstore.BookTranslator.'Bookstore.SystemRequiredBook'*/
            return source.Where(item => item.Book == null);
        }

        /*DataStructureInfo RepositoryMembers Bookstore.BookTranslator*/
    }

    /*DataStructureInfo RepositoryAttributes Bookstore.ChildrensBook*/
    public partial class ChildrensBook_Repository : /*DataStructureInfo OverrideBaseType Bookstore.ChildrensBook*/ Common.OrmRepositoryBase<Common.Queryable.Bookstore_ChildrensBook, Bookstore.ChildrensBook> // Common.QueryableRepositoryBase<Common.Queryable.Bookstore_ChildrensBook, Bookstore.ChildrensBook> // Common.ReadableRepositoryBase<Bookstore.ChildrensBook> // global::Common.RepositoryBase
        , IWritableRepository<Bookstore.ChildrensBook>, IValidateRepository/*DataStructureInfo RepositoryInterface Bookstore.ChildrensBook*/
    {
        private readonly Rhetos.Utilities.ISqlUtility _sqlUtility;
        /*DataStructureInfo RepositoryPrivateMembers Bookstore.ChildrensBook*/

        public ChildrensBook_Repository(Common.DomRepository domRepository, Common.ExecutionContext executionContext, Rhetos.Utilities.ISqlUtility _sqlUtility/*DataStructureInfo RepositoryConstructorArguments Bookstore.ChildrensBook*/)
        {
            _domRepository = domRepository;
            _executionContext = executionContext;
            this._sqlUtility = _sqlUtility;
            /*DataStructureInfo RepositoryConstructorCode Bookstore.ChildrensBook*/
        }

        public static KeyValuePair<string, Type>[] GetReadParameterTypes()
        {
            return new KeyValuePair<string, Type>[]
            {
                new KeyValuePair<string, Type>(@"Bookstore.AgeFrom_AgeTo_RangeFilter", typeof(Bookstore.AgeFrom_AgeTo_RangeFilter)),
                /*DataStructureInfo ReadParameterTypes Bookstore.ChildrensBook*/
            };
        }
        
        public virtual void Save(IEnumerable<Bookstore.ChildrensBook> insertedNew, IEnumerable<Bookstore.ChildrensBook> updatedNew, IEnumerable<Bookstore.ChildrensBook> deletedIds, bool checkUserPermissions = false)
        {
            if (!DomHelper.InitializeSaveMethodItems(ref insertedNew, ref updatedNew, ref deletedIds))
                return;

            /*DataStructureInfo WritableOrm ClearContext Bookstore.ChildrensBook*/

            /*DataStructureInfo WritableOrm ArgumentValidation Bookstore.ChildrensBook*/

            /*DataStructureInfo WritableOrm Initialization Bookstore.ChildrensBook*/

            // Using old data, including lazy loading of navigation properties:

            IEnumerable<Common.Queryable.Bookstore_ChildrensBook> deleted = DomHelper.LoadOldDataWithNavigationProperties(deletedIds, this);
            IEnumerable<Common.Queryable.Bookstore_ChildrensBook> updated = DomHelper.LoadOldDataWithNavigationProperties(updatedNew, this);

            /*DataStructureInfo WritableOrm OldDataLoaded Bookstore.ChildrensBook*/

            /*DataStructureInfo WritableOrm ProcessedOldData Bookstore.ChildrensBook*/

            {
                DomHelper.WriteToDatabase(insertedNew, updatedNew, deletedIds, _executionContext.PersistenceStorage, checkUserPermissions, _sqlUtility,
                    out Exception saveException, out Rhetos.RhetosException interpretedException);

                if (saveException != null)
                {
                    /*DataStructureInfo WritableOrm OnDatabaseError Bookstore.ChildrensBook*/
                    DomHelper.ThrowInterpretedException(checkUserPermissions, saveException, interpretedException, _sqlUtility, "Bookstore.ChildrensBook");
                }
            }

            deleted = null;
            updated = this.Query(updatedNew.Select(item => item.ID));
            IEnumerable<Common.Queryable.Bookstore_ChildrensBook> inserted = this.Query(insertedNew.Select(item => item.ID));

            bool allEffectsCompleted = false;
            try
            {
                /*DataStructureInfo WritableOrm OnSaveTag1 Bookstore.ChildrensBook*/

                /*DataStructureInfo WritableOrm OnSaveTag2 Bookstore.ChildrensBook*/

                Rhetos.Dom.DefaultConcepts.InvalidDataMessage.ValidateOnSave(insertedNew, updatedNew, this, "Bookstore.ChildrensBook");

                /*DataStructureInfo WritableOrm AfterSave Bookstore.ChildrensBook*/

                allEffectsCompleted = true;
            }
            finally
            {
                if (!allEffectsCompleted)
                    _executionContext.PersistenceTransaction.DiscardOnDispose();
            }
        }

        public IEnumerable<Rhetos.Dom.DefaultConcepts.InvalidDataMessage> Validate(IList<Guid> ids, bool onSave)
        {
            if (onSave)
            {
                var errorIds = this.Filter(this.Query(ids), new AgeFrom_AgeTo_RangeFilter()).Select(item => item.ID).ToArray();
                if (errorIds.Count() > 0)
                    foreach (var error in GetErrorMessage_AgeFrom__AgeTo__RangeFilter(errorIds))
                        yield return error;
            }
            /*DataStructureInfo WritableOrm OnSaveValidate Bookstore.ChildrensBook*/
            yield break;
        }

        public IEnumerable<InvalidDataMessage> GetErrorMessage_AgeFrom__AgeTo__RangeFilter(IEnumerable<Guid> invalidData_Ids)
        {
            IDictionary<string, object> metadata = new Dictionary<string, object>();
            metadata["Validation"] = @"AgeFrom_AgeTo_RangeFilter";
            metadata[@"Property"] = @"AgeFrom";
            /*InvalidDataInfo ErrorMetadata Bookstore.ChildrensBook.AgeFrom_AgeTo_RangeFilter*/
            /*InvalidDataInfo CustomValidationResult Bookstore.ChildrensBook.AgeFrom_AgeTo_RangeFilter*/
            return invalidData_Ids.Select(id => new InvalidDataMessage
            {
                ID = id,
                Message = @"Value of {0} has to be less than or equal to {1}.",
                MessageParameters = new object[] { @"AgeFrom", @"AgeTo" },
                Metadata = metadata
            });
        }

        public IQueryable<Common.Queryable.Bookstore_ChildrensBook> Filter(IQueryable<Common.Queryable.Bookstore_ChildrensBook> source, Bookstore.AgeFrom_AgeTo_RangeFilter parameter)
        {
            /*QueryFilterExpressionInfo BeforeFilter Bookstore.ChildrensBook.'Bookstore.AgeFrom_AgeTo_RangeFilter'*/
            return source.Where(item => item.AgeFrom != null && item.AgeTo != null && item.AgeFrom > item.AgeTo);
        }

        /*DataStructureInfo RepositoryMembers Bookstore.ChildrensBook*/
    }

    /*DataStructureInfo RepositoryAttributes Bookstore.Comment*/
    public partial class Comment_Repository : /*DataStructureInfo OverrideBaseType Bookstore.Comment*/ Common.OrmRepositoryBase<Common.Queryable.Bookstore_Comment, Bookstore.Comment> // Common.QueryableRepositoryBase<Common.Queryable.Bookstore_Comment, Bookstore.Comment> // Common.ReadableRepositoryBase<Bookstore.Comment> // global::Common.RepositoryBase
        , IWritableRepository<Bookstore.Comment>, IValidateRepository/*DataStructureInfo RepositoryInterface Bookstore.Comment*/
    {
        private readonly Rhetos.Utilities.ISqlUtility _sqlUtility;
        /*DataStructureInfo RepositoryPrivateMembers Bookstore.Comment*/

        public Comment_Repository(Common.DomRepository domRepository, Common.ExecutionContext executionContext, Rhetos.Utilities.ISqlUtility _sqlUtility/*DataStructureInfo RepositoryConstructorArguments Bookstore.Comment*/)
        {
            _domRepository = domRepository;
            _executionContext = executionContext;
            this._sqlUtility = _sqlUtility;
            /*DataStructureInfo RepositoryConstructorCode Bookstore.Comment*/
        }

        public static KeyValuePair<string, Type>[] GetReadParameterTypes()
        {
            return new KeyValuePair<string, Type>[]
            {
                new KeyValuePair<string, Type>(@"Bookstore.SystemRequiredBook", typeof(Bookstore.SystemRequiredBook)),
                /*DataStructureInfo ReadParameterTypes Bookstore.Comment*/
            };
        }
        
        public virtual void Save(IEnumerable<Bookstore.Comment> insertedNew, IEnumerable<Bookstore.Comment> updatedNew, IEnumerable<Bookstore.Comment> deletedIds, bool checkUserPermissions = false)
        {
            if (!DomHelper.InitializeSaveMethodItems(ref insertedNew, ref updatedNew, ref deletedIds))
                return;

            /*DataStructureInfo WritableOrm ClearContext Bookstore.Comment*/

            /*DataStructureInfo WritableOrm ArgumentValidation Bookstore.Comment*/

            /*DataStructureInfo WritableOrm Initialization Bookstore.Comment*/

            // Using old data, including lazy loading of navigation properties:

            IEnumerable<Common.Queryable.Bookstore_Comment> deleted = DomHelper.LoadOldDataWithNavigationProperties(deletedIds, this);
            IEnumerable<Common.Queryable.Bookstore_Comment> updated = DomHelper.LoadOldDataWithNavigationProperties(updatedNew, this);

            /*DataStructureInfo WritableOrm OldDataLoaded Bookstore.Comment*/

            /*DataStructureInfo WritableOrm ProcessedOldData Bookstore.Comment*/

            {
                DomHelper.WriteToDatabase(insertedNew, updatedNew, deletedIds, _executionContext.PersistenceStorage, checkUserPermissions, _sqlUtility,
                    out Exception saveException, out Rhetos.RhetosException interpretedException);

                if (saveException != null)
                {
                    if (interpretedException is Rhetos.UserException && Rhetos.Utilities.MsSqlUtility.IsReferenceErrorOnInsertUpdate(interpretedException, @"Bookstore.Book", @"ID", @"FK_Comment_Book_BookID"))
                        ((Rhetos.UserException)interpretedException).SystemMessage = @"DataStructure:Bookstore.Comment,Property:BookID,Referenced:Bookstore.Book";
                    /*DataStructureInfo WritableOrm OnDatabaseError Bookstore.Comment*/
                    DomHelper.ThrowInterpretedException(checkUserPermissions, saveException, interpretedException, _sqlUtility, "Bookstore.Comment");
                }
            }

            deleted = null;
            updated = this.Query(updatedNew.Select(item => item.ID));
            IEnumerable<Common.Queryable.Bookstore_Comment> inserted = this.Query(insertedNew.Select(item => item.ID));

            bool allEffectsCompleted = false;
            try
            {
                /*DataStructureInfo WritableOrm OnSaveTag1 Bookstore.Comment*/

                /*DataStructureInfo WritableOrm OnSaveTag2 Bookstore.Comment*/

                Rhetos.Dom.DefaultConcepts.InvalidDataMessage.ValidateOnSave(insertedNew, updatedNew, this, "Bookstore.Comment");

                /*DataStructureInfo WritableOrm AfterSave Bookstore.Comment*/

                allEffectsCompleted = true;
            }
            finally
            {
                if (!allEffectsCompleted)
                    _executionContext.PersistenceTransaction.DiscardOnDispose();
            }
        }

        public IEnumerable<Rhetos.Dom.DefaultConcepts.InvalidDataMessage> Validate(IList<Guid> ids, bool onSave)
        {
            if (onSave)
            {
                var errorIds = this.Filter(this.Query(ids), new SystemRequiredBook()).Select(item => item.ID).ToArray();
                if (errorIds.Count() > 0)
                    foreach (var error in GetErrorMessage_SystemRequiredBook(errorIds))
                        yield return error;
            }
            /*DataStructureInfo WritableOrm OnSaveValidate Bookstore.Comment*/
            yield break;
        }

        public IEnumerable<InvalidDataMessage> GetErrorMessage_SystemRequiredBook(IEnumerable<Guid> invalidData_Ids)
        {
            IDictionary<string, object> metadata = new Dictionary<string, object>();
            metadata["Validation"] = @"SystemRequiredBook";
            metadata[@"Property"] = @"Book";
            /*InvalidDataInfo ErrorMetadata Bookstore.Comment.SystemRequiredBook*/
            /*InvalidDataInfo CustomValidationResult Bookstore.Comment.SystemRequiredBook*/
            return invalidData_Ids.Select(id => new InvalidDataMessage
            {
                ID = id,
                Message = @"System required property {0} is not set.",
                MessageParameters = new object[] { @"Reference Bookstore.Comment.Book" },
                Metadata = metadata
            });
        }

        public IQueryable<Common.Queryable.Bookstore_Comment> Filter(IQueryable<Common.Queryable.Bookstore_Comment> source, Bookstore.SystemRequiredBook parameter)
        {
            /*QueryFilterExpressionInfo BeforeFilter Bookstore.Comment.'Bookstore.SystemRequiredBook'*/
            return source.Where(item => item.Book == null);
        }

        /*DataStructureInfo RepositoryMembers Bookstore.Comment*/
    }

    /*DataStructureInfo RepositoryAttributes Bookstore.Department*/
    public partial class Department_Repository : /*DataStructureInfo OverrideBaseType Bookstore.Department*/ Common.OrmRepositoryBase<Common.Queryable.Bookstore_Department, Bookstore.Department> // Common.QueryableRepositoryBase<Common.Queryable.Bookstore_Department, Bookstore.Department> // Common.ReadableRepositoryBase<Bookstore.Department> // global::Common.RepositoryBase
        , IWritableRepository<Bookstore.Department>, IValidateRepository/*DataStructureInfo RepositoryInterface Bookstore.Department*/
    {
        private readonly Rhetos.Utilities.ILocalizer<Bookstore.Department> _localizer;
        private readonly Rhetos.Utilities.ISqlUtility _sqlUtility;
        /*DataStructureInfo RepositoryPrivateMembers Bookstore.Department*/

        public Department_Repository(Common.DomRepository domRepository, Common.ExecutionContext executionContext, Rhetos.Utilities.ILocalizer<Bookstore.Department> _localizer, Rhetos.Utilities.ISqlUtility _sqlUtility/*DataStructureInfo RepositoryConstructorArguments Bookstore.Department*/)
        {
            _domRepository = domRepository;
            _executionContext = executionContext;
            this._localizer = _localizer;
            this._sqlUtility = _sqlUtility;
            /*DataStructureInfo RepositoryConstructorCode Bookstore.Department*/
        }

        public static KeyValuePair<string, Type>[] GetReadParameterTypes()
        {
            return new KeyValuePair<string, Type>[]
            {
                /*DataStructureInfo ReadParameterTypes Bookstore.Department*/
            };
        }
        
        public virtual void Save(IEnumerable<Bookstore.Department> insertedNew, IEnumerable<Bookstore.Department> updatedNew, IEnumerable<Bookstore.Department> deletedIds, bool checkUserPermissions = false)
        {
            if (!DomHelper.InitializeSaveMethodItems(ref insertedNew, ref updatedNew, ref deletedIds))
                return;

            /*DataStructureInfo WritableOrm ClearContext Bookstore.Department*/

            /*DataStructureInfo WritableOrm ArgumentValidation Bookstore.Department*/

            /*DataStructureInfo WritableOrm Initialization Bookstore.Department*/

            // Using old data, including lazy loading of navigation properties:

            IEnumerable<Common.Queryable.Bookstore_Department> deleted = DomHelper.LoadOldDataWithNavigationProperties(deletedIds, this);
            IEnumerable<Common.Queryable.Bookstore_Department> updated = DomHelper.LoadOldDataWithNavigationProperties(updatedNew, this);

            foreach (var newItem in insertedNew.Concat(updatedNew))
                ShortStringPropertyCodeGenerator.CheckMaxLength(newItem.Code, newItem, "Bookstore", "Department", "Code");

            /*DataStructureInfo WritableOrm OldDataLoaded Bookstore.Department*/

            {
                var invalid = insertedNew.Concat(updatedNew).FirstOrDefault(item => item.Code == null || string.IsNullOrWhiteSpace(item.Code) /*RequiredPropertyInfo OrCondition Bookstore.Department.Code*/);
                if (invalid != null)
                    throw new Rhetos.UserException("It is not allowed to enter {0} because the required property {1} is not set.",
                        new[] { _localizer["Bookstore.Department"], _localizer["Code"] },
                        "DataStructure:Bookstore.Department,ID:" + invalid.ID.ToString() + ",Property:Code", null);
            }
            /*DataStructureInfo WritableOrm ProcessedOldData Bookstore.Department*/

            {
                DomHelper.WriteToDatabase(insertedNew, updatedNew, deletedIds, _executionContext.PersistenceStorage, checkUserPermissions, _sqlUtility,
                    out Exception saveException, out Rhetos.RhetosException interpretedException);

                if (saveException != null)
                {
                    if (interpretedException is Rhetos.UserException && Rhetos.Utilities.MsSqlUtility.IsReferenceErrorOnDelete(interpretedException, @"Bookstore.EmployeesDepartment", @"DepartmentID", @"FK_EmployeesDepartment_Department_DepartmentID"))
                        ((Rhetos.UserException)interpretedException).SystemMessage = @"DataStructure:Bookstore.EmployeesDepartment,Property:DepartmentID,Referenced:Bookstore.Department";
                    if (interpretedException is Rhetos.UserException && Rhetos.Utilities.MsSqlUtility.IsUniqueError(interpretedException, @"Bookstore.Department", @"IX_Department_Code"))
                        ((Rhetos.UserException)interpretedException).SystemMessage = @"DataStructure:Bookstore.Department,Property:Code";
                    /*DataStructureInfo WritableOrm OnDatabaseError Bookstore.Department*/
                    DomHelper.ThrowInterpretedException(checkUserPermissions, saveException, interpretedException, _sqlUtility, "Bookstore.Department");
                }
            }

            deleted = null;
            updated = this.Query(updatedNew.Select(item => item.ID));
            IEnumerable<Common.Queryable.Bookstore_Department> inserted = this.Query(insertedNew.Select(item => item.ID));

            bool allEffectsCompleted = false;
            try
            {
                /*DataStructureInfo WritableOrm OnSaveTag1 Bookstore.Department*/

                /*DataStructureInfo WritableOrm OnSaveTag2 Bookstore.Department*/

                Rhetos.Dom.DefaultConcepts.InvalidDataMessage.ValidateOnSave(insertedNew, updatedNew, this, "Bookstore.Department");

                /*DataStructureInfo WritableOrm AfterSave Bookstore.Department*/

                allEffectsCompleted = true;
            }
            finally
            {
                if (!allEffectsCompleted)
                    _executionContext.PersistenceTransaction.DiscardOnDispose();
            }
        }

        public IEnumerable<Rhetos.Dom.DefaultConcepts.InvalidDataMessage> Validate(IList<Guid> ids, bool onSave)
        {
            /*DataStructureInfo WritableOrm OnSaveValidate Bookstore.Department*/
            yield break;
        }

        /*DataStructureInfo RepositoryMembers Bookstore.Department*/
    }

    /*DataStructureInfo RepositoryAttributes Bookstore.Disposal*/
    public partial class Disposal_Repository : /*DataStructureInfo OverrideBaseType Bookstore.Disposal*/ Common.OrmRepositoryBase<Common.Queryable.Bookstore_Disposal, Bookstore.Disposal> // Common.QueryableRepositoryBase<Common.Queryable.Bookstore_Disposal, Bookstore.Disposal> // Common.ReadableRepositoryBase<Bookstore.Disposal> // global::Common.RepositoryBase
        , IWritableRepository<Bookstore.Disposal>, IValidateRepository/*DataStructureInfo RepositoryInterface Bookstore.Disposal*/
    {
        private readonly Rhetos.Utilities.ILocalizer<Bookstore.Disposal> _localizer;
        private readonly Rhetos.Utilities.ISqlUtility _sqlUtility;
        /*DataStructureInfo RepositoryPrivateMembers Bookstore.Disposal*/

        public Disposal_Repository(Common.DomRepository domRepository, Common.ExecutionContext executionContext, Rhetos.Utilities.ILocalizer<Bookstore.Disposal> _localizer, Rhetos.Utilities.ISqlUtility _sqlUtility/*DataStructureInfo RepositoryConstructorArguments Bookstore.Disposal*/)
        {
            _domRepository = domRepository;
            _executionContext = executionContext;
            this._localizer = _localizer;
            this._sqlUtility = _sqlUtility;
            /*DataStructureInfo RepositoryConstructorCode Bookstore.Disposal*/
        }

        public static KeyValuePair<string, Type>[] GetReadParameterTypes()
        {
            return new KeyValuePair<string, Type>[]
            {
                new KeyValuePair<string, Type>(@"Bookstore.HighRating", typeof(Bookstore.HighRating)),
                new KeyValuePair<string, Type>(@"Bookstore.ImportantBookExplanation", typeof(Bookstore.ImportantBookExplanation)),
                /*DataStructureInfo ReadParameterTypes Bookstore.Disposal*/
            };
        }
        
        public virtual void Save(IEnumerable<Bookstore.Disposal> insertedNew, IEnumerable<Bookstore.Disposal> updatedNew, IEnumerable<Bookstore.Disposal> deletedIds, bool checkUserPermissions = false)
        {
            if (!DomHelper.InitializeSaveMethodItems(ref insertedNew, ref updatedNew, ref deletedIds))
                return;

            /*DataStructureInfo WritableOrm ClearContext Bookstore.Disposal*/

            /*DataStructureInfo WritableOrm ArgumentValidation Bookstore.Disposal*/

            { 
                var now = SqlUtility.GetDatabaseTime(_executionContext.SqlExecuter);

                foreach (var newItem in insertedNew)
                    if(newItem.EffectiveSince == null)
                        newItem.EffectiveSince = now;
            }
            /*DataStructureInfo WritableOrm Initialization Bookstore.Disposal*/

            // Using old data, including lazy loading of navigation properties:

            IEnumerable<Common.Queryable.Bookstore_Disposal> deleted = DomHelper.LoadOldDataWithNavigationProperties(deletedIds, this);
            IEnumerable<Common.Queryable.Bookstore_Disposal> updated = DomHelper.LoadOldDataWithNavigationProperties(updatedNew, this);

            /*DataStructureInfo WritableOrm OldDataLoaded Bookstore.Disposal*/

            {
                var invalid = insertedNew.Concat(updatedNew).FirstOrDefault(item => item.BookID == null /*RequiredPropertyInfo OrCondition Bookstore.Disposal.Book*/);
                if (invalid != null)
                    throw new Rhetos.UserException("It is not allowed to enter {0} because the required property {1} is not set.",
                        new[] { _localizer["Bookstore.Disposal"], _localizer["Book"] },
                        "DataStructure:Bookstore.Disposal,ID:" + invalid.ID.ToString() + ",Property:BookID", null);
            }
            {
                var invalid = insertedNew.Concat(updatedNew).FirstOrDefault(item => item.Explanation == null || string.IsNullOrWhiteSpace(item.Explanation) /*RequiredPropertyInfo OrCondition Bookstore.Disposal.Explanation*/);
                if (invalid != null)
                    throw new Rhetos.UserException("It is not allowed to enter {0} because the required property {1} is not set.",
                        new[] { _localizer["Bookstore.Disposal"], _localizer["Explanation"] },
                        "DataStructure:Bookstore.Disposal,ID:" + invalid.ID.ToString() + ",Property:Explanation", null);
            }
            /*DataStructureInfo WritableOrm ProcessedOldData Bookstore.Disposal*/

            {
                DomHelper.WriteToDatabase(insertedNew, updatedNew, deletedIds, _executionContext.PersistenceStorage, checkUserPermissions, _sqlUtility,
                    out Exception saveException, out Rhetos.RhetosException interpretedException);

                if (saveException != null)
                {
                    if (interpretedException is Rhetos.UserException && Rhetos.Utilities.MsSqlUtility.IsReferenceErrorOnInsertUpdate(interpretedException, @"Bookstore.Book", @"ID", @"FK_Disposal_Book_BookID"))
                        ((Rhetos.UserException)interpretedException).SystemMessage = @"DataStructure:Bookstore.Disposal,Property:BookID,Referenced:Bookstore.Book";
                    /*DataStructureInfo WritableOrm OnDatabaseError Bookstore.Disposal*/
                    DomHelper.ThrowInterpretedException(checkUserPermissions, saveException, interpretedException, _sqlUtility, "Bookstore.Disposal");
                }
            }

            deleted = null;
            updated = this.Query(updatedNew.Select(item => item.ID));
            IEnumerable<Common.Queryable.Bookstore_Disposal> inserted = this.Query(insertedNew.Select(item => item.ID));

            bool allEffectsCompleted = false;
            try
            {
                /*DataStructureInfo WritableOrm OnSaveTag1 Bookstore.Disposal*/

                /*DataStructureInfo WritableOrm OnSaveTag2 Bookstore.Disposal*/

                Rhetos.Dom.DefaultConcepts.InvalidDataMessage.ValidateOnSave(insertedNew, updatedNew, this, "Bookstore.Disposal");

                /*DataStructureInfo WritableOrm AfterSave Bookstore.Disposal*/

                allEffectsCompleted = true;
            }
            finally
            {
                if (!allEffectsCompleted)
                    _executionContext.PersistenceTransaction.DiscardOnDispose();
            }
        }

        public IEnumerable<Rhetos.Dom.DefaultConcepts.InvalidDataMessage> Validate(IList<Guid> ids, bool onSave)
        {
            if (onSave)
            {
                var errorIds = this.Filter(this.Query(ids), new HighRating()).Select(item => item.ID).ToArray();
                if (errorIds.Count() > 0)
                    foreach (var error in GetErrorMessage_HighRating(errorIds))
                        yield return error;
            }
            if (onSave)
            {
                var errorIds = this.Filter(this.Query(ids), new ImportantBookExplanation()).Select(item => item.ID).ToArray();
                if (errorIds.Count() > 0)
                    foreach (var error in GetErrorMessage_ImportantBookExplanation(errorIds))
                        yield return error;
            }
            /*DataStructureInfo WritableOrm OnSaveValidate Bookstore.Disposal*/
            yield break;
        }

        public IEnumerable<InvalidDataMessage> GetErrorMessage_HighRating(IEnumerable<Guid> invalidData_Ids)
        {
            IDictionary<string, object> metadata = new Dictionary<string, object>();
            metadata["Validation"] = @"HighRating";
            /*InvalidDataInfo ErrorMetadata Bookstore.Disposal.HighRating*/
            /*InvalidDataInfo CustomValidationResult Bookstore.Disposal.HighRating*/
            return invalidData_Ids.Select(id => new InvalidDataMessage
            {
                ID = id,
                Message = @"You are not allowed to dispose a book with rating above 100.",
                Metadata = metadata
            });
        }

        public IEnumerable<InvalidDataMessage> GetErrorMessage_ImportantBookExplanation(IEnumerable<Guid> invalidData_Ids)
        {
            IDictionary<string, object> metadata = new Dictionary<string, object>();
            metadata["Validation"] = @"ImportantBookExplanation";
            /*InvalidDataInfo ErrorMetadata Bookstore.Disposal.ImportantBookExplanation*/
            /*InvalidDataInfo CustomValidationResult Bookstore.Disposal.ImportantBookExplanation*/
            return invalidData_Ids.Select(id => new InvalidDataMessage
            {
                ID = id,
                Message = @"When disposing an important book, the explanation should be at least 50 characters long.",
                Metadata = metadata
            });
        }

        public IQueryable<Common.Queryable.Bookstore_Disposal> Filter(IQueryable<Common.Queryable.Bookstore_Disposal> source, Bookstore.HighRating parameter)
        {
            /*QueryFilterExpressionInfo BeforeFilter Bookstore.Disposal.'Bookstore.HighRating'*/
            return source.Where(item => item.Book.Extension_BookRating.Rating > 100);
        }

        public IQueryable<Common.Queryable.Bookstore_Disposal> Filter(IQueryable<Common.Queryable.Bookstore_Disposal> source, Bookstore.ImportantBookExplanation parameter)
        {
            /*QueryFilterExpressionInfo BeforeFilter Bookstore.Disposal.'Bookstore.ImportantBookExplanation'*/
            return source.Where(item => item.Book.Title.Contains("important") && item.Explanation.Length < 50);
        }

        /*DataStructureInfo RepositoryMembers Bookstore.Disposal*/
    }

    /*DataStructureInfo RepositoryAttributes Bookstore.Education*/
    public partial class Education_Repository : /*DataStructureInfo OverrideBaseType Bookstore.Education*/ Common.OrmRepositoryBase<Common.Queryable.Bookstore_Education, Bookstore.Education> // Common.QueryableRepositoryBase<Common.Queryable.Bookstore_Education, Bookstore.Education> // Common.ReadableRepositoryBase<Bookstore.Education> // global::Common.RepositoryBase
        , IWritableRepository<Bookstore.Education>, IValidateRepository/*DataStructureInfo RepositoryInterface Bookstore.Education*/
    {
        private readonly Rhetos.Utilities.ISqlUtility _sqlUtility;
        /*DataStructureInfo RepositoryPrivateMembers Bookstore.Education*/

        public Education_Repository(Common.DomRepository domRepository, Common.ExecutionContext executionContext, Rhetos.Utilities.ISqlUtility _sqlUtility/*DataStructureInfo RepositoryConstructorArguments Bookstore.Education*/)
        {
            _domRepository = domRepository;
            _executionContext = executionContext;
            this._sqlUtility = _sqlUtility;
            /*DataStructureInfo RepositoryConstructorCode Bookstore.Education*/
        }

        public static KeyValuePair<string, Type>[] GetReadParameterTypes()
        {
            return new KeyValuePair<string, Type>[]
            {
                /*DataStructureInfo ReadParameterTypes Bookstore.Education*/
            };
        }
        
        public virtual void Save(IEnumerable<Bookstore.Education> insertedNew, IEnumerable<Bookstore.Education> updatedNew, IEnumerable<Bookstore.Education> deletedIds, bool checkUserPermissions = false)
        {
            if (!DomHelper.InitializeSaveMethodItems(ref insertedNew, ref updatedNew, ref deletedIds))
                return;

            /*DataStructureInfo WritableOrm ClearContext Bookstore.Education*/

            /*DataStructureInfo WritableOrm ArgumentValidation Bookstore.Education*/

            /*DataStructureInfo WritableOrm Initialization Bookstore.Education*/

            // Using old data, including lazy loading of navigation properties:

            IEnumerable<Common.Queryable.Bookstore_Education> deleted = DomHelper.LoadOldDataWithNavigationProperties(deletedIds, this);
            IEnumerable<Common.Queryable.Bookstore_Education> updated = DomHelper.LoadOldDataWithNavigationProperties(updatedNew, this);

            /*DataStructureInfo WritableOrm OldDataLoaded Bookstore.Education*/

            /*DataStructureInfo WritableOrm ProcessedOldData Bookstore.Education*/

            {
                DomHelper.WriteToDatabase(insertedNew, updatedNew, deletedIds, _executionContext.PersistenceStorage, checkUserPermissions, _sqlUtility,
                    out Exception saveException, out Rhetos.RhetosException interpretedException);

                if (saveException != null)
                {
                    if (interpretedException is Rhetos.UserException && Rhetos.Utilities.MsSqlUtility.IsReferenceErrorOnInsertUpdate(interpretedException, @"Bookstore.Employees", @"ID", @"FK_Education_Employees_EmployeesID"))
                        ((Rhetos.UserException)interpretedException).SystemMessage = @"DataStructure:Bookstore.Education,Property:EmployeesID,Referenced:Bookstore.Employees";
                    /*DataStructureInfo WritableOrm OnDatabaseError Bookstore.Education*/
                    DomHelper.ThrowInterpretedException(checkUserPermissions, saveException, interpretedException, _sqlUtility, "Bookstore.Education");
                }
            }

            deleted = null;
            updated = this.Query(updatedNew.Select(item => item.ID));
            IEnumerable<Common.Queryable.Bookstore_Education> inserted = this.Query(insertedNew.Select(item => item.ID));

            bool allEffectsCompleted = false;
            try
            {
                /*DataStructureInfo WritableOrm OnSaveTag1 Bookstore.Education*/

                /*DataStructureInfo WritableOrm OnSaveTag2 Bookstore.Education*/

                Rhetos.Dom.DefaultConcepts.InvalidDataMessage.ValidateOnSave(insertedNew, updatedNew, this, "Bookstore.Education");

                /*DataStructureInfo WritableOrm AfterSave Bookstore.Education*/

                allEffectsCompleted = true;
            }
            finally
            {
                if (!allEffectsCompleted)
                    _executionContext.PersistenceTransaction.DiscardOnDispose();
            }
        }

        public IEnumerable<Rhetos.Dom.DefaultConcepts.InvalidDataMessage> Validate(IList<Guid> ids, bool onSave)
        {
            /*DataStructureInfo WritableOrm OnSaveValidate Bookstore.Education*/
            yield break;
        }

        /*DataStructureInfo RepositoryMembers Bookstore.Education*/
    }

    /*DataStructureInfo RepositoryAttributes Bookstore.Employees*/
    public partial class Employees_Repository : /*DataStructureInfo OverrideBaseType Bookstore.Employees*/ Common.OrmRepositoryBase<Common.Queryable.Bookstore_Employees, Bookstore.Employees> // Common.QueryableRepositoryBase<Common.Queryable.Bookstore_Employees, Bookstore.Employees> // Common.ReadableRepositoryBase<Bookstore.Employees> // global::Common.RepositoryBase
        , IWritableRepository<Bookstore.Employees>, IValidateRepository/*DataStructureInfo RepositoryInterface Bookstore.Employees*/
    {
        private readonly Rhetos.Utilities.ILocalizer<Bookstore.Employees> _localizer;
        private readonly Rhetos.Utilities.ISqlUtility _sqlUtility;
        /*DataStructureInfo RepositoryPrivateMembers Bookstore.Employees*/

        public Employees_Repository(Common.DomRepository domRepository, Common.ExecutionContext executionContext, Rhetos.Utilities.ILocalizer<Bookstore.Employees> _localizer, Rhetos.Utilities.ISqlUtility _sqlUtility/*DataStructureInfo RepositoryConstructorArguments Bookstore.Employees*/)
        {
            _domRepository = domRepository;
            _executionContext = executionContext;
            this._localizer = _localizer;
            this._sqlUtility = _sqlUtility;
            /*DataStructureInfo RepositoryConstructorCode Bookstore.Employees*/
        }

        public static KeyValuePair<string, Type>[] GetReadParameterTypes()
        {
            return new KeyValuePair<string, Type>[]
            {
                new KeyValuePair<string, Type>(@"Bookstore.SystemRequiredVAT", typeof(Bookstore.SystemRequiredVAT)),
                /*DataStructureInfo ReadParameterTypes Bookstore.Employees*/
            };
        }
        
        public virtual void Save(IEnumerable<Bookstore.Employees> insertedNew, IEnumerable<Bookstore.Employees> updatedNew, IEnumerable<Bookstore.Employees> deletedIds, bool checkUserPermissions = false)
        {
            if (!DomHelper.InitializeSaveMethodItems(ref insertedNew, ref updatedNew, ref deletedIds))
                return;

            /*DataStructureInfo WritableOrm ClearContext Bookstore.Employees*/

            /*DataStructureInfo WritableOrm ArgumentValidation Bookstore.Employees*/

            /*DataStructureInfo WritableOrm Initialization Bookstore.Employees*/

            // Using old data, including lazy loading of navigation properties:

            IEnumerable<Common.Queryable.Bookstore_Employees> deleted = DomHelper.LoadOldDataWithNavigationProperties(deletedIds, this);
            IEnumerable<Common.Queryable.Bookstore_Employees> updated = DomHelper.LoadOldDataWithNavigationProperties(updatedNew, this);

            foreach (var newItem in insertedNew.Concat(updatedNew))
                ShortStringPropertyCodeGenerator.CheckMaxLength(newItem.Name, newItem, "Bookstore", "Employees", "Name");

            foreach (var newItem in insertedNew.Concat(updatedNew))
                ShortStringPropertyCodeGenerator.CheckMaxLength(newItem.VAT, newItem, "Bookstore", "Employees", "VAT");

            AutoCodeHelper.UpdateCodesWithoutCache(
                _executionContext.SqlExecuter, "Bookstore.Employees", "VAT",
                insertedNew.Select(item => AutoCodeItem.Create(item, item.VAT/*AutoCodePropertyInfo Grouping Bookstore.Employees.VAT*/)).ToList(),
                (item, newCode) => item.VAT = newCode/*AutoCodePropertyInfo GroupColumnMetadata Bookstore.Employees.VAT*/);

            if (deletedIds.Count() > 0)
            {
                List<Bookstore.EmployeesDepartment> childItems = deletedIds
                    .SelectMany(parent => _executionContext.Repository.Bookstore.EmployeesDepartment.Query()
                        .Where(child => child.EmployeesID == parent.ID)
                        .Select(child => child.ID)
                        .ToList())
                    .Select(childId => new Bookstore.EmployeesDepartment { ID = childId })
                    .ToList();

                if (childItems.Count() > 0)
                    _domRepository.Bookstore.EmployeesDepartment.Delete(childItems);
            }

            if (deletedIds.Count() > 0)
            {
                List<Bookstore.Managers> childItems = _executionContext.Repository.Bookstore.Managers
                    .Query(deletedIds.Select(parent => parent.ID))
                    .Select(child => child.ID).ToList()
                    .Select(childId => new Bookstore.Managers { ID = childId }).ToList();

                if (childItems.Count() > 0)
                    _domRepository.Bookstore.Managers.Delete(childItems);
            }

            /*DataStructureInfo WritableOrm OldDataLoaded Bookstore.Employees*/

            {
                var invalid = insertedNew.Concat(updatedNew).FirstOrDefault(item => item.Name == null || string.IsNullOrWhiteSpace(item.Name) /*RequiredPropertyInfo OrCondition Bookstore.Employees.Name*/);
                if (invalid != null)
                    throw new Rhetos.UserException("It is not allowed to enter {0} because the required property {1} is not set.",
                        new[] { _localizer["Bookstore.Employees"], _localizer["Name"] },
                        "DataStructure:Bookstore.Employees,ID:" + invalid.ID.ToString() + ",Property:Name", null);
            }
            /*DataStructureInfo WritableOrm ProcessedOldData Bookstore.Employees*/

            {
                DomHelper.WriteToDatabase(insertedNew, updatedNew, deletedIds, _executionContext.PersistenceStorage, checkUserPermissions, _sqlUtility,
                    out Exception saveException, out Rhetos.RhetosException interpretedException);

                if (saveException != null)
                {
                    if (interpretedException is Rhetos.UserException && Rhetos.Utilities.MsSqlUtility.IsReferenceErrorOnDelete(interpretedException, @"Bookstore.Education", @"EmployeesID", @"FK_Education_Employees_EmployeesID"))
                        ((Rhetos.UserException)interpretedException).SystemMessage = @"DataStructure:Bookstore.Education,Property:EmployeesID,Referenced:Bookstore.Employees";
                    if (interpretedException is Rhetos.UserException && Rhetos.Utilities.MsSqlUtility.IsReferenceErrorOnDelete(interpretedException, @"Bookstore.EmployeesDepartment", @"EmployeesID", @"FK_EmployeesDepartment_Employees_EmployeesID"))
                        ((Rhetos.UserException)interpretedException).SystemMessage = @"DataStructure:Bookstore.EmployeesDepartment,Property:EmployeesID,Referenced:Bookstore.Employees";
                    if (interpretedException is Rhetos.UserException && Rhetos.Utilities.MsSqlUtility.IsReferenceErrorOnDelete(interpretedException, @"Bookstore.Managers", @"ID", @"FK_Managers_Employees_ID"))
                        ((Rhetos.UserException)interpretedException).SystemMessage = @"DataStructure:Bookstore.Managers,Property:ID,Referenced:Bookstore.Employees";
                    if (interpretedException is Rhetos.UserException && Rhetos.Utilities.MsSqlUtility.IsUniqueError(interpretedException, @"Bookstore.Employees", @"IX_Employees_Name"))
                        ((Rhetos.UserException)interpretedException).SystemMessage = @"DataStructure:Bookstore.Employees,Property:Name";
                    if (interpretedException is Rhetos.UserException && Rhetos.Utilities.MsSqlUtility.IsUniqueError(interpretedException, @"Bookstore.Employees", @"IX_Employees_VAT"))
                        ((Rhetos.UserException)interpretedException).SystemMessage = @"DataStructure:Bookstore.Employees,Property:VAT";
                    /*DataStructureInfo WritableOrm OnDatabaseError Bookstore.Employees*/
                    DomHelper.ThrowInterpretedException(checkUserPermissions, saveException, interpretedException, _sqlUtility, "Bookstore.Employees");
                }
            }

            deleted = null;
            updated = this.Query(updatedNew.Select(item => item.ID));
            IEnumerable<Common.Queryable.Bookstore_Employees> inserted = this.Query(insertedNew.Select(item => item.ID));

            bool allEffectsCompleted = false;
            try
            {
                /*DataStructureInfo WritableOrm OnSaveTag1 Bookstore.Employees*/

                /*DataStructureInfo WritableOrm OnSaveTag2 Bookstore.Employees*/

                Rhetos.Dom.DefaultConcepts.InvalidDataMessage.ValidateOnSave(insertedNew, updatedNew, this, "Bookstore.Employees");

                /*DataStructureInfo WritableOrm AfterSave Bookstore.Employees*/

                allEffectsCompleted = true;
            }
            finally
            {
                if (!allEffectsCompleted)
                    _executionContext.PersistenceTransaction.DiscardOnDispose();
            }
        }

        public IEnumerable<Rhetos.Dom.DefaultConcepts.InvalidDataMessage> Validate(IList<Guid> ids, bool onSave)
        {
            if (onSave)
            {
                var errorIds = this.Filter(this.Query(ids), new SystemRequiredVAT()).Select(item => item.ID).ToArray();
                if (errorIds.Count() > 0)
                    foreach (var error in GetErrorMessage_SystemRequiredVAT(errorIds))
                        yield return error;
            }
            /*DataStructureInfo WritableOrm OnSaveValidate Bookstore.Employees*/
            yield break;
        }

        public IEnumerable<InvalidDataMessage> GetErrorMessage_SystemRequiredVAT(IEnumerable<Guid> invalidData_Ids)
        {
            IDictionary<string, object> metadata = new Dictionary<string, object>();
            metadata["Validation"] = @"SystemRequiredVAT";
            metadata[@"Property"] = @"VAT";
            /*InvalidDataInfo ErrorMetadata Bookstore.Employees.SystemRequiredVAT*/
            /*InvalidDataInfo CustomValidationResult Bookstore.Employees.SystemRequiredVAT*/
            return invalidData_Ids.Select(id => new InvalidDataMessage
            {
                ID = id,
                Message = @"System required property {0} is not set.",
                MessageParameters = new object[] { @"ShortString Bookstore.Employees.VAT" },
                Metadata = metadata
            });
        }

        public IQueryable<Common.Queryable.Bookstore_Employees> Filter(IQueryable<Common.Queryable.Bookstore_Employees> source, Bookstore.SystemRequiredVAT parameter)
        {
            /*QueryFilterExpressionInfo BeforeFilter Bookstore.Employees.'Bookstore.SystemRequiredVAT'*/
            return source.Where(item => item.VAT == null);
        }

        /*DataStructureInfo RepositoryMembers Bookstore.Employees*/
    }

    /*DataStructureInfo RepositoryAttributes Bookstore.EmployeesDepartment*/
    public partial class EmployeesDepartment_Repository : /*DataStructureInfo OverrideBaseType Bookstore.EmployeesDepartment*/ Common.OrmRepositoryBase<Common.Queryable.Bookstore_EmployeesDepartment, Bookstore.EmployeesDepartment> // Common.QueryableRepositoryBase<Common.Queryable.Bookstore_EmployeesDepartment, Bookstore.EmployeesDepartment> // Common.ReadableRepositoryBase<Bookstore.EmployeesDepartment> // global::Common.RepositoryBase
        , IWritableRepository<Bookstore.EmployeesDepartment>, IValidateRepository/*DataStructureInfo RepositoryInterface Bookstore.EmployeesDepartment*/
    {
        private readonly Rhetos.Utilities.ILocalizer<Bookstore.EmployeesDepartment> _localizer;
        private readonly Rhetos.Utilities.ISqlUtility _sqlUtility;
        /*DataStructureInfo RepositoryPrivateMembers Bookstore.EmployeesDepartment*/

        public EmployeesDepartment_Repository(Common.DomRepository domRepository, Common.ExecutionContext executionContext, Rhetos.Utilities.ILocalizer<Bookstore.EmployeesDepartment> _localizer, Rhetos.Utilities.ISqlUtility _sqlUtility/*DataStructureInfo RepositoryConstructorArguments Bookstore.EmployeesDepartment*/)
        {
            _domRepository = domRepository;
            _executionContext = executionContext;
            this._localizer = _localizer;
            this._sqlUtility = _sqlUtility;
            /*DataStructureInfo RepositoryConstructorCode Bookstore.EmployeesDepartment*/
        }

        public static KeyValuePair<string, Type>[] GetReadParameterTypes()
        {
            return new KeyValuePair<string, Type>[]
            {
                new KeyValuePair<string, Type>(@"Bookstore.SystemRequiredEmployees", typeof(Bookstore.SystemRequiredEmployees)),
                /*DataStructureInfo ReadParameterTypes Bookstore.EmployeesDepartment*/
            };
        }
        
        public virtual void Save(IEnumerable<Bookstore.EmployeesDepartment> insertedNew, IEnumerable<Bookstore.EmployeesDepartment> updatedNew, IEnumerable<Bookstore.EmployeesDepartment> deletedIds, bool checkUserPermissions = false)
        {
            if (!DomHelper.InitializeSaveMethodItems(ref insertedNew, ref updatedNew, ref deletedIds))
                return;

            /*DataStructureInfo WritableOrm ClearContext Bookstore.EmployeesDepartment*/

            /*DataStructureInfo WritableOrm ArgumentValidation Bookstore.EmployeesDepartment*/

            /*DataStructureInfo WritableOrm Initialization Bookstore.EmployeesDepartment*/

            // Using old data, including lazy loading of navigation properties:

            IEnumerable<Common.Queryable.Bookstore_EmployeesDepartment> deleted = DomHelper.LoadOldDataWithNavigationProperties(deletedIds, this);
            IEnumerable<Common.Queryable.Bookstore_EmployeesDepartment> updated = DomHelper.LoadOldDataWithNavigationProperties(updatedNew, this);

            /*DataStructureInfo WritableOrm OldDataLoaded Bookstore.EmployeesDepartment*/

            {
                var invalid = insertedNew.Concat(updatedNew).FirstOrDefault(item => item.DepartmentID == null /*RequiredPropertyInfo OrCondition Bookstore.EmployeesDepartment.Department*/);
                if (invalid != null)
                    throw new Rhetos.UserException("It is not allowed to enter {0} because the required property {1} is not set.",
                        new[] { _localizer["Bookstore.EmployeesDepartment"], _localizer["Department"] },
                        "DataStructure:Bookstore.EmployeesDepartment,ID:" + invalid.ID.ToString() + ",Property:DepartmentID", null);
            }
            /*DataStructureInfo WritableOrm ProcessedOldData Bookstore.EmployeesDepartment*/

            {
                DomHelper.WriteToDatabase(insertedNew, updatedNew, deletedIds, _executionContext.PersistenceStorage, checkUserPermissions, _sqlUtility,
                    out Exception saveException, out Rhetos.RhetosException interpretedException);

                if (saveException != null)
                {
                    if (interpretedException is Rhetos.UserException && Rhetos.Utilities.MsSqlUtility.IsReferenceErrorOnInsertUpdate(interpretedException, @"Bookstore.Department", @"ID", @"FK_EmployeesDepartment_Department_DepartmentID"))
                        ((Rhetos.UserException)interpretedException).SystemMessage = @"DataStructure:Bookstore.EmployeesDepartment,Property:DepartmentID,Referenced:Bookstore.Department";
                    if (interpretedException is Rhetos.UserException && Rhetos.Utilities.MsSqlUtility.IsReferenceErrorOnInsertUpdate(interpretedException, @"Bookstore.Employees", @"ID", @"FK_EmployeesDepartment_Employees_EmployeesID"))
                        ((Rhetos.UserException)interpretedException).SystemMessage = @"DataStructure:Bookstore.EmployeesDepartment,Property:EmployeesID,Referenced:Bookstore.Employees";
                    if (interpretedException is Rhetos.UserException && Rhetos.Utilities.MsSqlUtility.IsUniqueError(interpretedException, @"Bookstore.EmployeesDepartment", @"IX_EmployeesDepartment_Employees_Department"))
                        ((Rhetos.UserException)interpretedException).SystemMessage = @"DataStructure:Bookstore.EmployeesDepartment,Property:Employees Department";
                    /*DataStructureInfo WritableOrm OnDatabaseError Bookstore.EmployeesDepartment*/
                    DomHelper.ThrowInterpretedException(checkUserPermissions, saveException, interpretedException, _sqlUtility, "Bookstore.EmployeesDepartment");
                }
            }

            deleted = null;
            updated = this.Query(updatedNew.Select(item => item.ID));
            IEnumerable<Common.Queryable.Bookstore_EmployeesDepartment> inserted = this.Query(insertedNew.Select(item => item.ID));

            bool allEffectsCompleted = false;
            try
            {
                /*DataStructureInfo WritableOrm OnSaveTag1 Bookstore.EmployeesDepartment*/

                /*DataStructureInfo WritableOrm OnSaveTag2 Bookstore.EmployeesDepartment*/

                Rhetos.Dom.DefaultConcepts.InvalidDataMessage.ValidateOnSave(insertedNew, updatedNew, this, "Bookstore.EmployeesDepartment");

                /*DataStructureInfo WritableOrm AfterSave Bookstore.EmployeesDepartment*/

                allEffectsCompleted = true;
            }
            finally
            {
                if (!allEffectsCompleted)
                    _executionContext.PersistenceTransaction.DiscardOnDispose();
            }
        }

        public IEnumerable<Rhetos.Dom.DefaultConcepts.InvalidDataMessage> Validate(IList<Guid> ids, bool onSave)
        {
            if (onSave)
            {
                var errorIds = this.Filter(this.Query(ids), new SystemRequiredEmployees()).Select(item => item.ID).ToArray();
                if (errorIds.Count() > 0)
                    foreach (var error in GetErrorMessage_SystemRequiredEmployees(errorIds))
                        yield return error;
            }
            /*DataStructureInfo WritableOrm OnSaveValidate Bookstore.EmployeesDepartment*/
            yield break;
        }

        public IEnumerable<InvalidDataMessage> GetErrorMessage_SystemRequiredEmployees(IEnumerable<Guid> invalidData_Ids)
        {
            IDictionary<string, object> metadata = new Dictionary<string, object>();
            metadata["Validation"] = @"SystemRequiredEmployees";
            metadata[@"Property"] = @"Employees";
            /*InvalidDataInfo ErrorMetadata Bookstore.EmployeesDepartment.SystemRequiredEmployees*/
            /*InvalidDataInfo CustomValidationResult Bookstore.EmployeesDepartment.SystemRequiredEmployees*/
            return invalidData_Ids.Select(id => new InvalidDataMessage
            {
                ID = id,
                Message = @"System required property {0} is not set.",
                MessageParameters = new object[] { @"Reference Bookstore.EmployeesDepartment.Employees" },
                Metadata = metadata
            });
        }

        public IQueryable<Common.Queryable.Bookstore_EmployeesDepartment> Filter(IQueryable<Common.Queryable.Bookstore_EmployeesDepartment> source, Bookstore.SystemRequiredEmployees parameter)
        {
            /*QueryFilterExpressionInfo BeforeFilter Bookstore.EmployeesDepartment.'Bookstore.SystemRequiredEmployees'*/
            return source.Where(item => item.Employees == null);
        }

        /*DataStructureInfo RepositoryMembers Bookstore.EmployeesDepartment*/
    }

    /*DataStructureInfo RepositoryAttributes Bookstore.ExpectedBookRating*/
    public partial class ExpectedBookRating_Repository : /*DataStructureInfo OverrideBaseType Bookstore.ExpectedBookRating*/ Common.ReadableRepositoryBase<Bookstore.ExpectedBookRating> // global::Common.RepositoryBase
        /*DataStructureInfo RepositoryInterface Bookstore.ExpectedBookRating*/
    {
        /*DataStructureInfo RepositoryPrivateMembers Bookstore.ExpectedBookRating*/

        public ExpectedBookRating_Repository(Common.DomRepository domRepository, Common.ExecutionContext executionContext/*DataStructureInfo RepositoryConstructorArguments Bookstore.ExpectedBookRating*/)
        {
            _domRepository = domRepository;
            _executionContext = executionContext;
            /*DataStructureInfo RepositoryConstructorCode Bookstore.ExpectedBookRating*/
        }

        public override global::Bookstore.ExpectedBookRating[] Load()
        {
            Func<Common.DomRepository/*DataStructureInfo AdditionalParametersType Bookstore.ExpectedBookRating*/, global::Bookstore.ExpectedBookRating[]> compute_Function =
            repository =>
        {
            var books = repository.Bookstore.Book.Query()
                .Select(b =>
                    new
                    {
                        b.ID,
                        b.Title,
                        IsForeign = b.Extension_ForeignBook.ID != null
                    })
                .ToList();

            var ratings = new List<ExpectedBookRating>();
            foreach (var book in books)
            {
                decimal rating = 0;

                if (book.Title?.IndexOf("super", StringComparison.InvariantCultureIgnoreCase) >= 0)
                    rating += 100;

                if (book.Title?.IndexOf("great", StringComparison.InvariantCultureIgnoreCase) >= 0)
                    rating += 50;

                if (book.IsForeign)
                    rating *= 1.2m;

                ratings.Add(new ExpectedBookRating { ID = book.ID, Rating = rating });
            }

            return ratings.ToArray();
        };

            return compute_Function(_domRepository/*DataStructureInfo AdditionalParametersArgument Bookstore.ExpectedBookRating*/);
        }

        public static KeyValuePair<string, Type>[] GetReadParameterTypes()
        {
            return new KeyValuePair<string, Type>[]
            {
                /*DataStructureInfo ReadParameterTypes Bookstore.ExpectedBookRating*/
            };
        }
        
        /*DataStructureInfo RepositoryMembers Bookstore.ExpectedBookRating*/
    }

    /*DataStructureInfo RepositoryAttributes Bookstore.ForeignBook*/
    public partial class ForeignBook_Repository : /*DataStructureInfo OverrideBaseType Bookstore.ForeignBook*/ Common.OrmRepositoryBase<Common.Queryable.Bookstore_ForeignBook, Bookstore.ForeignBook> // Common.QueryableRepositoryBase<Common.Queryable.Bookstore_ForeignBook, Bookstore.ForeignBook> // Common.ReadableRepositoryBase<Bookstore.ForeignBook> // global::Common.RepositoryBase
        , IWritableRepository<Bookstore.ForeignBook>, IValidateRepository/*DataStructureInfo RepositoryInterface Bookstore.ForeignBook*/
    {
        private readonly Rhetos.Utilities.ISqlUtility _sqlUtility;
        /*DataStructureInfo RepositoryPrivateMembers Bookstore.ForeignBook*/

        public ForeignBook_Repository(Common.DomRepository domRepository, Common.ExecutionContext executionContext, Rhetos.Utilities.ISqlUtility _sqlUtility/*DataStructureInfo RepositoryConstructorArguments Bookstore.ForeignBook*/)
        {
            _domRepository = domRepository;
            _executionContext = executionContext;
            this._sqlUtility = _sqlUtility;
            /*DataStructureInfo RepositoryConstructorCode Bookstore.ForeignBook*/
        }

        public static KeyValuePair<string, Type>[] GetReadParameterTypes()
        {
            return new KeyValuePair<string, Type>[]
            {
                /*DataStructureInfo ReadParameterTypes Bookstore.ForeignBook*/
            };
        }
        
        public virtual void Save(IEnumerable<Bookstore.ForeignBook> insertedNew, IEnumerable<Bookstore.ForeignBook> updatedNew, IEnumerable<Bookstore.ForeignBook> deletedIds, bool checkUserPermissions = false)
        {
            if (!DomHelper.InitializeSaveMethodItems(ref insertedNew, ref updatedNew, ref deletedIds))
                return;

            /*DataStructureInfo WritableOrm ClearContext Bookstore.ForeignBook*/

            /*DataStructureInfo WritableOrm ArgumentValidation Bookstore.ForeignBook*/

            /*DataStructureInfo WritableOrm Initialization Bookstore.ForeignBook*/

            // Using old data, including lazy loading of navigation properties:

            IEnumerable<Common.Queryable.Bookstore_ForeignBook> deleted = DomHelper.LoadOldDataWithNavigationProperties(deletedIds, this);
            IEnumerable<Common.Queryable.Bookstore_ForeignBook> updated = DomHelper.LoadOldDataWithNavigationProperties(updatedNew, this);

            foreach (var newItem in insertedNew.Concat(updatedNew))
                ShortStringPropertyCodeGenerator.CheckMaxLength(newItem.OriginalLanguage, newItem, "Bookstore", "ForeignBook", "OriginalLanguage");

            /*DataStructureInfo WritableOrm OldDataLoaded Bookstore.ForeignBook*/

            /*DataStructureInfo WritableOrm ProcessedOldData Bookstore.ForeignBook*/

            {
                DomHelper.WriteToDatabase(insertedNew, updatedNew, deletedIds, _executionContext.PersistenceStorage, checkUserPermissions, _sqlUtility,
                    out Exception saveException, out Rhetos.RhetosException interpretedException);

                if (saveException != null)
                {
                    if (interpretedException is Rhetos.UserException && Rhetos.Utilities.MsSqlUtility.IsReferenceErrorOnInsertUpdate(interpretedException, @"Bookstore.Person", @"ID", @"FK_ForeignBook_Person_AuthorID"))
                        ((Rhetos.UserException)interpretedException).SystemMessage = @"DataStructure:Bookstore.ForeignBook,Property:AuthorID,Referenced:Bookstore.Person";
                    if (interpretedException is Rhetos.UserException && Rhetos.Utilities.MsSqlUtility.IsReferenceErrorOnInsertUpdate(interpretedException, @"Bookstore.Translator", @"ID", @"FK_ForeignBook_Translator_TranslatorID"))
                        ((Rhetos.UserException)interpretedException).SystemMessage = @"DataStructure:Bookstore.ForeignBook,Property:TranslatorID,Referenced:Bookstore.Translator";
                    /*DataStructureInfo WritableOrm OnDatabaseError Bookstore.ForeignBook*/
                    DomHelper.ThrowInterpretedException(checkUserPermissions, saveException, interpretedException, _sqlUtility, "Bookstore.ForeignBook");
                }
            }

            deleted = null;
            updated = this.Query(updatedNew.Select(item => item.ID));
            IEnumerable<Common.Queryable.Bookstore_ForeignBook> inserted = this.Query(insertedNew.Select(item => item.ID));

            bool allEffectsCompleted = false;
            try
            {
                /*DataStructureInfo WritableOrm OnSaveTag1 Bookstore.ForeignBook*/

                /*DataStructureInfo WritableOrm OnSaveTag2 Bookstore.ForeignBook*/

                Rhetos.Dom.DefaultConcepts.InvalidDataMessage.ValidateOnSave(insertedNew, updatedNew, this, "Bookstore.ForeignBook");

                /*DataStructureInfo WritableOrm AfterSave Bookstore.ForeignBook*/

                allEffectsCompleted = true;
            }
            finally
            {
                if (!allEffectsCompleted)
                    _executionContext.PersistenceTransaction.DiscardOnDispose();
            }
        }

        public IEnumerable<Rhetos.Dom.DefaultConcepts.InvalidDataMessage> Validate(IList<Guid> ids, bool onSave)
        {
            /*DataStructureInfo WritableOrm OnSaveValidate Bookstore.ForeignBook*/
            yield break;
        }

        /*DataStructureInfo RepositoryMembers Bookstore.ForeignBook*/
    }

    /*DataStructureInfo RepositoryAttributes Bookstore.Genre*/
    public partial class Genre_Repository : /*DataStructureInfo OverrideBaseType Bookstore.Genre*/ Common.OrmRepositoryBase<Common.Queryable.Bookstore_Genre, Bookstore.Genre> // Common.QueryableRepositoryBase<Common.Queryable.Bookstore_Genre, Bookstore.Genre> // Common.ReadableRepositoryBase<Bookstore.Genre> // global::Common.RepositoryBase
        , IWritableRepository<Bookstore.Genre>, IValidateRepository/*DataStructureInfo RepositoryInterface Bookstore.Genre*/
    {
        private readonly Rhetos.Utilities.ILocalizer<Bookstore.Genre> _localizer;
        private readonly Rhetos.Utilities.ISqlUtility _sqlUtility;
        /*DataStructureInfo RepositoryPrivateMembers Bookstore.Genre*/

        public Genre_Repository(Common.DomRepository domRepository, Common.ExecutionContext executionContext, Rhetos.Utilities.ILocalizer<Bookstore.Genre> _localizer, Rhetos.Utilities.ISqlUtility _sqlUtility/*DataStructureInfo RepositoryConstructorArguments Bookstore.Genre*/)
        {
            _domRepository = domRepository;
            _executionContext = executionContext;
            this._localizer = _localizer;
            this._sqlUtility = _sqlUtility;
            /*DataStructureInfo RepositoryConstructorCode Bookstore.Genre*/
        }

        public static KeyValuePair<string, Type>[] GetReadParameterTypes()
        {
            return new KeyValuePair<string, Type>[]
            {
                /*DataStructureInfo ReadParameterTypes Bookstore.Genre*/
            };
        }
        
        public virtual void Save(IEnumerable<Bookstore.Genre> insertedNew, IEnumerable<Bookstore.Genre> updatedNew, IEnumerable<Bookstore.Genre> deletedIds, bool checkUserPermissions = false)
        {
            if (!DomHelper.InitializeSaveMethodItems(ref insertedNew, ref updatedNew, ref deletedIds))
                return;

            /*DataStructureInfo WritableOrm ClearContext Bookstore.Genre*/

            throw new Rhetos.UserException("It is not allowed to modify hard-coded data in {0}.", new [] { _localizer["Bookstore.Genre"] }, null, null);
            /*DataStructureInfo WritableOrm ArgumentValidation Bookstore.Genre*/

            /*DataStructureInfo WritableOrm Initialization Bookstore.Genre*/

            // Using old data, including lazy loading of navigation properties:

            IEnumerable<Common.Queryable.Bookstore_Genre> deleted = DomHelper.LoadOldDataWithNavigationProperties(deletedIds, this);
            IEnumerable<Common.Queryable.Bookstore_Genre> updated = DomHelper.LoadOldDataWithNavigationProperties(updatedNew, this);

            foreach (var newItem in insertedNew.Concat(updatedNew))
                ShortStringPropertyCodeGenerator.CheckMaxLength(newItem.Label, newItem, "Bookstore", "Genre", "Label");

            foreach (var newItem in insertedNew.Concat(updatedNew))
                ShortStringPropertyCodeGenerator.CheckMaxLength(newItem.Name, newItem, "Bookstore", "Genre", "Name");

            /*DataStructureInfo WritableOrm OldDataLoaded Bookstore.Genre*/

            /*DataStructureInfo WritableOrm ProcessedOldData Bookstore.Genre*/

            {
                DomHelper.WriteToDatabase(insertedNew, updatedNew, deletedIds, _executionContext.PersistenceStorage, checkUserPermissions, _sqlUtility,
                    out Exception saveException, out Rhetos.RhetosException interpretedException);

                if (saveException != null)
                {
                    /*DataStructureInfo WritableOrm OnDatabaseError Bookstore.Genre*/
                    DomHelper.ThrowInterpretedException(checkUserPermissions, saveException, interpretedException, _sqlUtility, "Bookstore.Genre");
                }
            }

            deleted = null;
            updated = this.Query(updatedNew.Select(item => item.ID));
            IEnumerable<Common.Queryable.Bookstore_Genre> inserted = this.Query(insertedNew.Select(item => item.ID));

            bool allEffectsCompleted = false;
            try
            {
                /*DataStructureInfo WritableOrm OnSaveTag1 Bookstore.Genre*/

                /*DataStructureInfo WritableOrm OnSaveTag2 Bookstore.Genre*/

                Rhetos.Dom.DefaultConcepts.InvalidDataMessage.ValidateOnSave(insertedNew, updatedNew, this, "Bookstore.Genre");

                /*DataStructureInfo WritableOrm AfterSave Bookstore.Genre*/

                allEffectsCompleted = true;
            }
            finally
            {
                if (!allEffectsCompleted)
                    _executionContext.PersistenceTransaction.DiscardOnDispose();
            }
        }

        public IEnumerable<Rhetos.Dom.DefaultConcepts.InvalidDataMessage> Validate(IList<Guid> ids, bool onSave)
        {
            /*DataStructureInfo WritableOrm OnSaveValidate Bookstore.Genre*/
            yield break;
        }

        /*DataStructureInfo RepositoryMembers Bookstore.Genre*/
    }

    /*DataStructureInfo RepositoryAttributes Bookstore.Managers*/
    public partial class Managers_Repository : /*DataStructureInfo OverrideBaseType Bookstore.Managers*/ Common.OrmRepositoryBase<Common.Queryable.Bookstore_Managers, Bookstore.Managers> // Common.QueryableRepositoryBase<Common.Queryable.Bookstore_Managers, Bookstore.Managers> // Common.ReadableRepositoryBase<Bookstore.Managers> // global::Common.RepositoryBase
        , IWritableRepository<Bookstore.Managers>, IValidateRepository/*DataStructureInfo RepositoryInterface Bookstore.Managers*/
    {
        private readonly Rhetos.Utilities.ISqlUtility _sqlUtility;
        /*DataStructureInfo RepositoryPrivateMembers Bookstore.Managers*/

        public Managers_Repository(Common.DomRepository domRepository, Common.ExecutionContext executionContext, Rhetos.Utilities.ISqlUtility _sqlUtility/*DataStructureInfo RepositoryConstructorArguments Bookstore.Managers*/)
        {
            _domRepository = domRepository;
            _executionContext = executionContext;
            this._sqlUtility = _sqlUtility;
            /*DataStructureInfo RepositoryConstructorCode Bookstore.Managers*/
        }

        public static KeyValuePair<string, Type>[] GetReadParameterTypes()
        {
            return new KeyValuePair<string, Type>[]
            {
                /*DataStructureInfo ReadParameterTypes Bookstore.Managers*/
            };
        }
        
        public virtual void Save(IEnumerable<Bookstore.Managers> insertedNew, IEnumerable<Bookstore.Managers> updatedNew, IEnumerable<Bookstore.Managers> deletedIds, bool checkUserPermissions = false)
        {
            if (!DomHelper.InitializeSaveMethodItems(ref insertedNew, ref updatedNew, ref deletedIds))
                return;

            /*DataStructureInfo WritableOrm ClearContext Bookstore.Managers*/

            /*DataStructureInfo WritableOrm ArgumentValidation Bookstore.Managers*/

            /*DataStructureInfo WritableOrm Initialization Bookstore.Managers*/

            // Using old data, including lazy loading of navigation properties:

            IEnumerable<Common.Queryable.Bookstore_Managers> deleted = DomHelper.LoadOldDataWithNavigationProperties(deletedIds, this);
            IEnumerable<Common.Queryable.Bookstore_Managers> updated = DomHelper.LoadOldDataWithNavigationProperties(updatedNew, this);

            /*DataStructureInfo WritableOrm OldDataLoaded Bookstore.Managers*/

            /*DataStructureInfo WritableOrm ProcessedOldData Bookstore.Managers*/

            {
                DomHelper.WriteToDatabase(insertedNew, updatedNew, deletedIds, _executionContext.PersistenceStorage, checkUserPermissions, _sqlUtility,
                    out Exception saveException, out Rhetos.RhetosException interpretedException);

                if (saveException != null)
                {
                    /*DataStructureInfo WritableOrm OnDatabaseError Bookstore.Managers*/
                    DomHelper.ThrowInterpretedException(checkUserPermissions, saveException, interpretedException, _sqlUtility, "Bookstore.Managers");
                }
            }

            deleted = null;
            updated = this.Query(updatedNew.Select(item => item.ID));
            IEnumerable<Common.Queryable.Bookstore_Managers> inserted = this.Query(insertedNew.Select(item => item.ID));

            bool allEffectsCompleted = false;
            try
            {
                /*DataStructureInfo WritableOrm OnSaveTag1 Bookstore.Managers*/

                /*DataStructureInfo WritableOrm OnSaveTag2 Bookstore.Managers*/

                Rhetos.Dom.DefaultConcepts.InvalidDataMessage.ValidateOnSave(insertedNew, updatedNew, this, "Bookstore.Managers");

                /*DataStructureInfo WritableOrm AfterSave Bookstore.Managers*/

                allEffectsCompleted = true;
            }
            finally
            {
                if (!allEffectsCompleted)
                    _executionContext.PersistenceTransaction.DiscardOnDispose();
            }
        }

        public IEnumerable<Rhetos.Dom.DefaultConcepts.InvalidDataMessage> Validate(IList<Guid> ids, bool onSave)
        {
            /*DataStructureInfo WritableOrm OnSaveValidate Bookstore.Managers*/
            yield break;
        }

        /*DataStructureInfo RepositoryMembers Bookstore.Managers*/
    }

    /*DataStructureInfo RepositoryAttributes Bookstore.Person*/
    public partial class Person_Repository : /*DataStructureInfo OverrideBaseType Bookstore.Person*/ Common.OrmRepositoryBase<Common.Queryable.Bookstore_Person, Bookstore.Person> // Common.QueryableRepositoryBase<Common.Queryable.Bookstore_Person, Bookstore.Person> // Common.ReadableRepositoryBase<Bookstore.Person> // global::Common.RepositoryBase
        , IWritableRepository<Bookstore.Person>, IValidateRepository/*DataStructureInfo RepositoryInterface Bookstore.Person*/
    {
        private readonly Rhetos.Utilities.ISqlUtility _sqlUtility;
        /*DataStructureInfo RepositoryPrivateMembers Bookstore.Person*/

        public Person_Repository(Common.DomRepository domRepository, Common.ExecutionContext executionContext, Rhetos.Utilities.ISqlUtility _sqlUtility/*DataStructureInfo RepositoryConstructorArguments Bookstore.Person*/)
        {
            _domRepository = domRepository;
            _executionContext = executionContext;
            this._sqlUtility = _sqlUtility;
            /*DataStructureInfo RepositoryConstructorCode Bookstore.Person*/
        }

        public static KeyValuePair<string, Type>[] GetReadParameterTypes()
        {
            return new KeyValuePair<string, Type>[]
            {
                /*DataStructureInfo ReadParameterTypes Bookstore.Person*/
            };
        }
        
        public virtual void Save(IEnumerable<Bookstore.Person> insertedNew, IEnumerable<Bookstore.Person> updatedNew, IEnumerable<Bookstore.Person> deletedIds, bool checkUserPermissions = false)
        {
            if (!DomHelper.InitializeSaveMethodItems(ref insertedNew, ref updatedNew, ref deletedIds))
                return;

            /*DataStructureInfo WritableOrm ClearContext Bookstore.Person*/

            /*DataStructureInfo WritableOrm ArgumentValidation Bookstore.Person*/

            /*DataStructureInfo WritableOrm Initialization Bookstore.Person*/

            // Using old data, including lazy loading of navigation properties:

            IEnumerable<Common.Queryable.Bookstore_Person> deleted = DomHelper.LoadOldDataWithNavigationProperties(deletedIds, this);
            IEnumerable<Common.Queryable.Bookstore_Person> updated = DomHelper.LoadOldDataWithNavigationProperties(updatedNew, this);

            foreach (var newItem in insertedNew.Concat(updatedNew))
                ShortStringPropertyCodeGenerator.CheckMaxLength(newItem.Name, newItem, "Bookstore", "Person", "Name");

            /*DataStructureInfo WritableOrm OldDataLoaded Bookstore.Person*/

            /*DataStructureInfo WritableOrm ProcessedOldData Bookstore.Person*/

            {
                DomHelper.WriteToDatabase(insertedNew, updatedNew, deletedIds, _executionContext.PersistenceStorage, checkUserPermissions, _sqlUtility,
                    out Exception saveException, out Rhetos.RhetosException interpretedException);

                if (saveException != null)
                {
                    if (interpretedException is Rhetos.UserException && Rhetos.Utilities.MsSqlUtility.IsReferenceErrorOnDelete(interpretedException, @"Bookstore.Book", @"AuthorID", @"FK_Book_Person_AuthorID"))
                        ((Rhetos.UserException)interpretedException).SystemMessage = @"DataStructure:Bookstore.Book,Property:AuthorID,Referenced:Bookstore.Person";
                    if (interpretedException is Rhetos.UserException && Rhetos.Utilities.MsSqlUtility.IsReferenceErrorOnDelete(interpretedException, @"Bookstore.ForeignBook", @"AuthorID", @"FK_ForeignBook_Person_AuthorID"))
                        ((Rhetos.UserException)interpretedException).SystemMessage = @"DataStructure:Bookstore.ForeignBook,Property:AuthorID,Referenced:Bookstore.Person";
                    /*DataStructureInfo WritableOrm OnDatabaseError Bookstore.Person*/
                    DomHelper.ThrowInterpretedException(checkUserPermissions, saveException, interpretedException, _sqlUtility, "Bookstore.Person");
                }
            }

            deleted = null;
            updated = this.Query(updatedNew.Select(item => item.ID));
            IEnumerable<Common.Queryable.Bookstore_Person> inserted = this.Query(insertedNew.Select(item => item.ID));

            bool allEffectsCompleted = false;
            try
            {
                /*DataStructureInfo WritableOrm OnSaveTag1 Bookstore.Person*/

                /*DataStructureInfo WritableOrm OnSaveTag2 Bookstore.Person*/

                Rhetos.Dom.DefaultConcepts.InvalidDataMessage.ValidateOnSave(insertedNew, updatedNew, this, "Bookstore.Person");

                /*DataStructureInfo WritableOrm AfterSave Bookstore.Person*/

                allEffectsCompleted = true;
            }
            finally
            {
                if (!allEffectsCompleted)
                    _executionContext.PersistenceTransaction.DiscardOnDispose();
            }
        }

        public IEnumerable<Rhetos.Dom.DefaultConcepts.InvalidDataMessage> Validate(IList<Guid> ids, bool onSave)
        {
            /*DataStructureInfo WritableOrm OnSaveValidate Bookstore.Person*/
            yield break;
        }

        /*DataStructureInfo RepositoryMembers Bookstore.Person*/
    }

    /*DataStructureInfo RepositoryAttributes Bookstore.Shipment*/
    public partial class Shipment_Repository : /*DataStructureInfo OverrideBaseType Bookstore.Shipment*/ Common.OrmRepositoryBase<Common.Queryable.Bookstore_Shipment, Bookstore.Shipment> // Common.QueryableRepositoryBase<Common.Queryable.Bookstore_Shipment, Bookstore.Shipment> // Common.ReadableRepositoryBase<Bookstore.Shipment> // global::Common.RepositoryBase
        , IWritableRepository<Bookstore.Shipment>, IValidateRepository/*DataStructureInfo RepositoryInterface Bookstore.Shipment*/
    {
        private readonly Rhetos.Utilities.ISqlUtility _sqlUtility;
        /*DataStructureInfo RepositoryPrivateMembers Bookstore.Shipment*/

        public Shipment_Repository(Common.DomRepository domRepository, Common.ExecutionContext executionContext, Rhetos.Utilities.ISqlUtility _sqlUtility/*DataStructureInfo RepositoryConstructorArguments Bookstore.Shipment*/)
        {
            _domRepository = domRepository;
            _executionContext = executionContext;
            this._sqlUtility = _sqlUtility;
            /*DataStructureInfo RepositoryConstructorCode Bookstore.Shipment*/
        }

        public static KeyValuePair<string, Type>[] GetReadParameterTypes()
        {
            return new KeyValuePair<string, Type>[]
            {
                /*DataStructureInfo ReadParameterTypes Bookstore.Shipment*/
            };
        }
        
        public virtual void Save(IEnumerable<Bookstore.Shipment> insertedNew, IEnumerable<Bookstore.Shipment> updatedNew, IEnumerable<Bookstore.Shipment> deletedIds, bool checkUserPermissions = false)
        {
            if (!DomHelper.InitializeSaveMethodItems(ref insertedNew, ref updatedNew, ref deletedIds))
                return;

            /*DataStructureInfo WritableOrm ClearContext Bookstore.Shipment*/

            /*DataStructureInfo WritableOrm ArgumentValidation Bookstore.Shipment*/

            /*DataStructureInfo WritableOrm Initialization Bookstore.Shipment*/

            // Using old data, including lazy loading of navigation properties:

            IEnumerable<Common.Queryable.Bookstore_Shipment> deleted = DomHelper.LoadOldDataWithNavigationProperties(deletedIds, this);
            IEnumerable<Common.Queryable.Bookstore_Shipment> updated = DomHelper.LoadOldDataWithNavigationProperties(updatedNew, this);

            /*DataStructureInfo WritableOrm OldDataLoaded Bookstore.Shipment*/

            /*DataStructureInfo WritableOrm ProcessedOldData Bookstore.Shipment*/

            {
                DomHelper.WriteToDatabase(insertedNew, updatedNew, deletedIds, _executionContext.PersistenceStorage, checkUserPermissions, _sqlUtility,
                    out Exception saveException, out Rhetos.RhetosException interpretedException);

                if (saveException != null)
                {
                    if (interpretedException is Rhetos.UserException && Rhetos.Utilities.MsSqlUtility.IsReferenceErrorOnDelete(interpretedException, @"Bookstore.ApproveShipment", @"ShipmentID", @"FK_ApproveShipment_Shipment_ShipmentID"))
                        ((Rhetos.UserException)interpretedException).SystemMessage = @"DataStructure:Bookstore.ApproveShipment,Property:ShipmentID,Referenced:Bookstore.Shipment";
                    /*DataStructureInfo WritableOrm OnDatabaseError Bookstore.Shipment*/
                    DomHelper.ThrowInterpretedException(checkUserPermissions, saveException, interpretedException, _sqlUtility, "Bookstore.Shipment");
                }
            }

            deleted = null;
            updated = this.Query(updatedNew.Select(item => item.ID));
            IEnumerable<Common.Queryable.Bookstore_Shipment> inserted = this.Query(insertedNew.Select(item => item.ID));

            bool allEffectsCompleted = false;
            try
            {
                /*DataStructureInfo WritableOrm OnSaveTag1 Bookstore.Shipment*/

                /*DataStructureInfo WritableOrm OnSaveTag2 Bookstore.Shipment*/

                Rhetos.Dom.DefaultConcepts.InvalidDataMessage.ValidateOnSave(insertedNew, updatedNew, this, "Bookstore.Shipment");

                /*DataStructureInfo WritableOrm AfterSave Bookstore.Shipment*/

                allEffectsCompleted = true;
            }
            finally
            {
                if (!allEffectsCompleted)
                    _executionContext.PersistenceTransaction.DiscardOnDispose();
            }
        }

        public IEnumerable<Rhetos.Dom.DefaultConcepts.InvalidDataMessage> Validate(IList<Guid> ids, bool onSave)
        {
            /*DataStructureInfo WritableOrm OnSaveValidate Bookstore.Shipment*/
            yield break;
        }

        /*DataStructureInfo RepositoryMembers Bookstore.Shipment*/
    }

    /*DataStructureInfo RepositoryAttributes Bookstore.ShipmentEvent*/
    public partial class ShipmentEvent_Repository : /*DataStructureInfo OverrideBaseType Bookstore.ShipmentEvent*/ Common.OrmRepositoryBase<Common.Queryable.Bookstore_ShipmentEvent, Bookstore.ShipmentEvent> // Common.QueryableRepositoryBase<Common.Queryable.Bookstore_ShipmentEvent, Bookstore.ShipmentEvent> // Common.ReadableRepositoryBase<Bookstore.ShipmentEvent> // global::Common.RepositoryBase
        /*DataStructureInfo RepositoryInterface Bookstore.ShipmentEvent*/
    {
        /*DataStructureInfo RepositoryPrivateMembers Bookstore.ShipmentEvent*/

        public ShipmentEvent_Repository(Common.DomRepository domRepository, Common.ExecutionContext executionContext/*DataStructureInfo RepositoryConstructorArguments Bookstore.ShipmentEvent*/)
        {
            _domRepository = domRepository;
            _executionContext = executionContext;
            /*DataStructureInfo RepositoryConstructorCode Bookstore.ShipmentEvent*/
        }

        public static KeyValuePair<string, Type>[] GetReadParameterTypes()
        {
            return new KeyValuePair<string, Type>[]
            {
                new KeyValuePair<string, Type>(@"Rhetos.Dom.DefaultConcepts.FilterSubtype", typeof(Rhetos.Dom.DefaultConcepts.FilterSubtype)),
                /*DataStructureInfo ReadParameterTypes Bookstore.ShipmentEvent*/
            };
        }
        
        public global::Bookstore.ShipmentEvent[] Load(Rhetos.Dom.DefaultConcepts.FilterSubtype filter_Parameter)
        {
            Func<Common.DomRepository, Rhetos.Dom.DefaultConcepts.FilterSubtype/*FilterByInfo AdditionalParametersType Bookstore.ShipmentEvent.'Rhetos.Dom.DefaultConcepts.FilterSubtype'*/, Bookstore.ShipmentEvent[]> filter_Function =
                (repository, parameter) =>
                {{
                    Expression<Func<Common.Queryable.Bookstore_ShipmentEvent, bool>> filterExpression = null;
                    parameter.ImplementationName = parameter.ImplementationName ?? "";
                    if (parameter.Subtype == @"Bookstore.ApproveShipment" && parameter.ImplementationName == @"")
                        filterExpression = item => item.ApproveShipmentID != null;
                    /*PolymorphicInfo SetFilterExpression Bookstore.ShipmentEvent*/
                    if (filterExpression == null)
                        throw new Rhetos.ClientException(string.Format("Invalid subtype name or implementation name provided: '{0}', '{1}'.",
                            parameter.Subtype, parameter.ImplementationName));
                    return Filter(Query().Where(filterExpression), parameter.Ids).ToSimple().ToArray();
                }};

            return filter_Function(_domRepository, filter_Parameter/*FilterByInfo AdditionalParametersArgument Bookstore.ShipmentEvent.'Rhetos.Dom.DefaultConcepts.FilterSubtype'*/);
        }

        /*DataStructureInfo RepositoryMembers Bookstore.ShipmentEvent*/
    }

    /*DataStructureInfo RepositoryAttributes Bookstore.ShipmentStatus*/
    public partial class ShipmentStatus_Repository : /*DataStructureInfo OverrideBaseType Bookstore.ShipmentStatus*/ Common.OrmRepositoryBase<Common.Queryable.Bookstore_ShipmentStatus, Bookstore.ShipmentStatus> // Common.QueryableRepositoryBase<Common.Queryable.Bookstore_ShipmentStatus, Bookstore.ShipmentStatus> // Common.ReadableRepositoryBase<Bookstore.ShipmentStatus> // global::Common.RepositoryBase
        , IWritableRepository<Bookstore.ShipmentStatus>, IValidateRepository/*DataStructureInfo RepositoryInterface Bookstore.ShipmentStatus*/
    {
        private readonly Rhetos.Utilities.ILocalizer<Bookstore.ShipmentStatus> _localizer;
        private readonly Rhetos.Utilities.ISqlUtility _sqlUtility;
        /*DataStructureInfo RepositoryPrivateMembers Bookstore.ShipmentStatus*/

        public ShipmentStatus_Repository(Common.DomRepository domRepository, Common.ExecutionContext executionContext, Rhetos.Utilities.ILocalizer<Bookstore.ShipmentStatus> _localizer, Rhetos.Utilities.ISqlUtility _sqlUtility/*DataStructureInfo RepositoryConstructorArguments Bookstore.ShipmentStatus*/)
        {
            _domRepository = domRepository;
            _executionContext = executionContext;
            this._localizer = _localizer;
            this._sqlUtility = _sqlUtility;
            /*DataStructureInfo RepositoryConstructorCode Bookstore.ShipmentStatus*/
        }

        public static KeyValuePair<string, Type>[] GetReadParameterTypes()
        {
            return new KeyValuePair<string, Type>[]
            {
                /*DataStructureInfo ReadParameterTypes Bookstore.ShipmentStatus*/
            };
        }
        
        public virtual void Save(IEnumerable<Bookstore.ShipmentStatus> insertedNew, IEnumerable<Bookstore.ShipmentStatus> updatedNew, IEnumerable<Bookstore.ShipmentStatus> deletedIds, bool checkUserPermissions = false)
        {
            if (!DomHelper.InitializeSaveMethodItems(ref insertedNew, ref updatedNew, ref deletedIds))
                return;

            /*DataStructureInfo WritableOrm ClearContext Bookstore.ShipmentStatus*/

            throw new Rhetos.UserException("It is not allowed to modify hard-coded data in {0}.", new [] { _localizer["Bookstore.ShipmentStatus"] }, null, null);
            /*DataStructureInfo WritableOrm ArgumentValidation Bookstore.ShipmentStatus*/

            /*DataStructureInfo WritableOrm Initialization Bookstore.ShipmentStatus*/

            // Using old data, including lazy loading of navigation properties:

            IEnumerable<Common.Queryable.Bookstore_ShipmentStatus> deleted = DomHelper.LoadOldDataWithNavigationProperties(deletedIds, this);
            IEnumerable<Common.Queryable.Bookstore_ShipmentStatus> updated = DomHelper.LoadOldDataWithNavigationProperties(updatedNew, this);

            foreach (var newItem in insertedNew.Concat(updatedNew))
                ShortStringPropertyCodeGenerator.CheckMaxLength(newItem.Name, newItem, "Bookstore", "ShipmentStatus", "Name");

            /*DataStructureInfo WritableOrm OldDataLoaded Bookstore.ShipmentStatus*/

            /*DataStructureInfo WritableOrm ProcessedOldData Bookstore.ShipmentStatus*/

            {
                DomHelper.WriteToDatabase(insertedNew, updatedNew, deletedIds, _executionContext.PersistenceStorage, checkUserPermissions, _sqlUtility,
                    out Exception saveException, out Rhetos.RhetosException interpretedException);

                if (saveException != null)
                {
                    /*DataStructureInfo WritableOrm OnDatabaseError Bookstore.ShipmentStatus*/
                    DomHelper.ThrowInterpretedException(checkUserPermissions, saveException, interpretedException, _sqlUtility, "Bookstore.ShipmentStatus");
                }
            }

            deleted = null;
            updated = this.Query(updatedNew.Select(item => item.ID));
            IEnumerable<Common.Queryable.Bookstore_ShipmentStatus> inserted = this.Query(insertedNew.Select(item => item.ID));

            bool allEffectsCompleted = false;
            try
            {
                /*DataStructureInfo WritableOrm OnSaveTag1 Bookstore.ShipmentStatus*/

                /*DataStructureInfo WritableOrm OnSaveTag2 Bookstore.ShipmentStatus*/

                Rhetos.Dom.DefaultConcepts.InvalidDataMessage.ValidateOnSave(insertedNew, updatedNew, this, "Bookstore.ShipmentStatus");

                /*DataStructureInfo WritableOrm AfterSave Bookstore.ShipmentStatus*/

                allEffectsCompleted = true;
            }
            finally
            {
                if (!allEffectsCompleted)
                    _executionContext.PersistenceTransaction.DiscardOnDispose();
            }
        }

        public IEnumerable<Rhetos.Dom.DefaultConcepts.InvalidDataMessage> Validate(IList<Guid> ids, bool onSave)
        {
            /*DataStructureInfo WritableOrm OnSaveValidate Bookstore.ShipmentStatus*/
            yield break;
        }

        /*DataStructureInfo RepositoryMembers Bookstore.ShipmentStatus*/
    }

    /*DataStructureInfo RepositoryAttributes Bookstore.Topic*/
    public partial class Topic_Repository : /*DataStructureInfo OverrideBaseType Bookstore.Topic*/ Common.OrmRepositoryBase<Common.Queryable.Bookstore_Topic, Bookstore.Topic> // Common.QueryableRepositoryBase<Common.Queryable.Bookstore_Topic, Bookstore.Topic> // Common.ReadableRepositoryBase<Bookstore.Topic> // global::Common.RepositoryBase
        , IWritableRepository<Bookstore.Topic>, IValidateRepository/*DataStructureInfo RepositoryInterface Bookstore.Topic*/
    {
        private readonly Rhetos.Utilities.ILocalizer<Bookstore.Topic> _localizer;
        private readonly Rhetos.Utilities.ISqlUtility _sqlUtility;
        /*DataStructureInfo RepositoryPrivateMembers Bookstore.Topic*/

        public Topic_Repository(Common.DomRepository domRepository, Common.ExecutionContext executionContext, Rhetos.Utilities.ILocalizer<Bookstore.Topic> _localizer, Rhetos.Utilities.ISqlUtility _sqlUtility/*DataStructureInfo RepositoryConstructorArguments Bookstore.Topic*/)
        {
            _domRepository = domRepository;
            _executionContext = executionContext;
            this._localizer = _localizer;
            this._sqlUtility = _sqlUtility;
            /*DataStructureInfo RepositoryConstructorCode Bookstore.Topic*/
        }

        public static KeyValuePair<string, Type>[] GetReadParameterTypes()
        {
            return new KeyValuePair<string, Type>[]
            {
                /*DataStructureInfo ReadParameterTypes Bookstore.Topic*/
            };
        }
        
        public virtual void Save(IEnumerable<Bookstore.Topic> insertedNew, IEnumerable<Bookstore.Topic> updatedNew, IEnumerable<Bookstore.Topic> deletedIds, bool checkUserPermissions = false)
        {
            if (!DomHelper.InitializeSaveMethodItems(ref insertedNew, ref updatedNew, ref deletedIds))
                return;

            /*DataStructureInfo WritableOrm ClearContext Bookstore.Topic*/

            /*DataStructureInfo WritableOrm ArgumentValidation Bookstore.Topic*/

            /*DataStructureInfo WritableOrm Initialization Bookstore.Topic*/

            // Using old data, including lazy loading of navigation properties:

            IEnumerable<Common.Queryable.Bookstore_Topic> deleted = DomHelper.LoadOldDataWithNavigationProperties(deletedIds, this);
            IEnumerable<Common.Queryable.Bookstore_Topic> updated = DomHelper.LoadOldDataWithNavigationProperties(updatedNew, this);

            foreach (var newItem in insertedNew.Concat(updatedNew))
                ShortStringPropertyCodeGenerator.CheckMaxLength(newItem.Name, newItem, "Bookstore", "Topic", "Name");

            /*DataStructureInfo WritableOrm OldDataLoaded Bookstore.Topic*/

            {
                var invalid = insertedNew.Concat(updatedNew).FirstOrDefault(item => item.Name == null || string.IsNullOrWhiteSpace(item.Name) /*RequiredPropertyInfo OrCondition Bookstore.Topic.Name*/);
                if (invalid != null)
                    throw new Rhetos.UserException("It is not allowed to enter {0} because the required property {1} is not set.",
                        new[] { _localizer["Bookstore.Topic"], _localizer["Name"] },
                        "DataStructure:Bookstore.Topic,ID:" + invalid.ID.ToString() + ",Property:Name", null);
            }
            /*DataStructureInfo WritableOrm ProcessedOldData Bookstore.Topic*/

            {
                DomHelper.WriteToDatabase(insertedNew, updatedNew, deletedIds, _executionContext.PersistenceStorage, checkUserPermissions, _sqlUtility,
                    out Exception saveException, out Rhetos.RhetosException interpretedException);

                if (saveException != null)
                {
                    if (interpretedException is Rhetos.UserException && Rhetos.Utilities.MsSqlUtility.IsReferenceErrorOnDelete(interpretedException, @"Bookstore.BookTopic", @"TopicID", @"FK_BookTopic_Topic_TopicID"))
                        ((Rhetos.UserException)interpretedException).SystemMessage = @"DataStructure:Bookstore.BookTopic,Property:TopicID,Referenced:Bookstore.Topic";
                    if (interpretedException is Rhetos.UserException && Rhetos.Utilities.MsSqlUtility.IsUniqueError(interpretedException, @"Bookstore.Topic", @"IX_Topic_Name"))
                        ((Rhetos.UserException)interpretedException).SystemMessage = @"DataStructure:Bookstore.Topic,Property:Name";
                    /*DataStructureInfo WritableOrm OnDatabaseError Bookstore.Topic*/
                    DomHelper.ThrowInterpretedException(checkUserPermissions, saveException, interpretedException, _sqlUtility, "Bookstore.Topic");
                }
            }

            deleted = null;
            updated = this.Query(updatedNew.Select(item => item.ID));
            IEnumerable<Common.Queryable.Bookstore_Topic> inserted = this.Query(insertedNew.Select(item => item.ID));

            bool allEffectsCompleted = false;
            try
            {
                /*DataStructureInfo WritableOrm OnSaveTag1 Bookstore.Topic*/

                /*DataStructureInfo WritableOrm OnSaveTag2 Bookstore.Topic*/

                Rhetos.Dom.DefaultConcepts.InvalidDataMessage.ValidateOnSave(insertedNew, updatedNew, this, "Bookstore.Topic");

                /*DataStructureInfo WritableOrm AfterSave Bookstore.Topic*/

                allEffectsCompleted = true;
            }
            finally
            {
                if (!allEffectsCompleted)
                    _executionContext.PersistenceTransaction.DiscardOnDispose();
            }
        }

        public IEnumerable<Rhetos.Dom.DefaultConcepts.InvalidDataMessage> Validate(IList<Guid> ids, bool onSave)
        {
            /*DataStructureInfo WritableOrm OnSaveValidate Bookstore.Topic*/
            yield break;
        }

        /*DataStructureInfo RepositoryMembers Bookstore.Topic*/
    }

    /*DataStructureInfo RepositoryAttributes Bookstore.Translator*/
    public partial class Translator_Repository : /*DataStructureInfo OverrideBaseType Bookstore.Translator*/ Common.OrmRepositoryBase<Common.Queryable.Bookstore_Translator, Bookstore.Translator> // Common.QueryableRepositoryBase<Common.Queryable.Bookstore_Translator, Bookstore.Translator> // Common.ReadableRepositoryBase<Bookstore.Translator> // global::Common.RepositoryBase
        , IWritableRepository<Bookstore.Translator>, IValidateRepository/*DataStructureInfo RepositoryInterface Bookstore.Translator*/
    {
        private readonly Rhetos.Utilities.ISqlUtility _sqlUtility;
        /*DataStructureInfo RepositoryPrivateMembers Bookstore.Translator*/

        public Translator_Repository(Common.DomRepository domRepository, Common.ExecutionContext executionContext, Rhetos.Utilities.ISqlUtility _sqlUtility/*DataStructureInfo RepositoryConstructorArguments Bookstore.Translator*/)
        {
            _domRepository = domRepository;
            _executionContext = executionContext;
            this._sqlUtility = _sqlUtility;
            /*DataStructureInfo RepositoryConstructorCode Bookstore.Translator*/
        }

        public static KeyValuePair<string, Type>[] GetReadParameterTypes()
        {
            return new KeyValuePair<string, Type>[]
            {
                /*DataStructureInfo ReadParameterTypes Bookstore.Translator*/
            };
        }
        
        public virtual void Save(IEnumerable<Bookstore.Translator> insertedNew, IEnumerable<Bookstore.Translator> updatedNew, IEnumerable<Bookstore.Translator> deletedIds, bool checkUserPermissions = false)
        {
            if (!DomHelper.InitializeSaveMethodItems(ref insertedNew, ref updatedNew, ref deletedIds))
                return;

            /*DataStructureInfo WritableOrm ClearContext Bookstore.Translator*/

            /*DataStructureInfo WritableOrm ArgumentValidation Bookstore.Translator*/

            /*DataStructureInfo WritableOrm Initialization Bookstore.Translator*/

            // Using old data, including lazy loading of navigation properties:

            IEnumerable<Common.Queryable.Bookstore_Translator> deleted = DomHelper.LoadOldDataWithNavigationProperties(deletedIds, this);
            IEnumerable<Common.Queryable.Bookstore_Translator> updated = DomHelper.LoadOldDataWithNavigationProperties(updatedNew, this);

            foreach (var newItem in insertedNew.Concat(updatedNew))
                ShortStringPropertyCodeGenerator.CheckMaxLength(newItem.Name, newItem, "Bookstore", "Translator", "Name");

            /*DataStructureInfo WritableOrm OldDataLoaded Bookstore.Translator*/

            /*DataStructureInfo WritableOrm ProcessedOldData Bookstore.Translator*/

            {
                DomHelper.WriteToDatabase(insertedNew, updatedNew, deletedIds, _executionContext.PersistenceStorage, checkUserPermissions, _sqlUtility,
                    out Exception saveException, out Rhetos.RhetosException interpretedException);

                if (saveException != null)
                {
                    if (interpretedException is Rhetos.UserException && Rhetos.Utilities.MsSqlUtility.IsReferenceErrorOnDelete(interpretedException, @"Bookstore.BookTranslator", @"TranslatorID", @"FK_BookTranslator_Translator_TranslatorID"))
                        ((Rhetos.UserException)interpretedException).SystemMessage = @"DataStructure:Bookstore.BookTranslator,Property:TranslatorID,Referenced:Bookstore.Translator";
                    if (interpretedException is Rhetos.UserException && Rhetos.Utilities.MsSqlUtility.IsReferenceErrorOnDelete(interpretedException, @"Bookstore.ForeignBook", @"TranslatorID", @"FK_ForeignBook_Translator_TranslatorID"))
                        ((Rhetos.UserException)interpretedException).SystemMessage = @"DataStructure:Bookstore.ForeignBook,Property:TranslatorID,Referenced:Bookstore.Translator";
                    /*DataStructureInfo WritableOrm OnDatabaseError Bookstore.Translator*/
                    DomHelper.ThrowInterpretedException(checkUserPermissions, saveException, interpretedException, _sqlUtility, "Bookstore.Translator");
                }
            }

            deleted = null;
            updated = this.Query(updatedNew.Select(item => item.ID));
            IEnumerable<Common.Queryable.Bookstore_Translator> inserted = this.Query(insertedNew.Select(item => item.ID));

            bool allEffectsCompleted = false;
            try
            {
                /*DataStructureInfo WritableOrm OnSaveTag1 Bookstore.Translator*/

                /*DataStructureInfo WritableOrm OnSaveTag2 Bookstore.Translator*/

                Rhetos.Dom.DefaultConcepts.InvalidDataMessage.ValidateOnSave(insertedNew, updatedNew, this, "Bookstore.Translator");

                /*DataStructureInfo WritableOrm AfterSave Bookstore.Translator*/

                allEffectsCompleted = true;
            }
            finally
            {
                if (!allEffectsCompleted)
                    _executionContext.PersistenceTransaction.DiscardOnDispose();
            }
        }

        public IEnumerable<Rhetos.Dom.DefaultConcepts.InvalidDataMessage> Validate(IList<Guid> ids, bool onSave)
        {
            /*DataStructureInfo WritableOrm OnSaveValidate Bookstore.Translator*/
            yield break;
        }

        /*DataStructureInfo RepositoryMembers Bookstore.Translator*/
    }

    /*DataStructureInfo RepositoryAttributes Bookstore.WishList*/
    public partial class WishList_Repository : /*DataStructureInfo OverrideBaseType Bookstore.WishList*/ Common.OrmRepositoryBase<Common.Queryable.Bookstore_WishList, Bookstore.WishList> // Common.QueryableRepositoryBase<Common.Queryable.Bookstore_WishList, Bookstore.WishList> // Common.ReadableRepositoryBase<Bookstore.WishList> // global::Common.RepositoryBase
        , IWritableRepository<Bookstore.WishList>, IValidateRepository/*DataStructureInfo RepositoryInterface Bookstore.WishList*/
    {
        private readonly Rhetos.Utilities.ISqlUtility _sqlUtility;
        /*DataStructureInfo RepositoryPrivateMembers Bookstore.WishList*/

        public WishList_Repository(Common.DomRepository domRepository, Common.ExecutionContext executionContext, Rhetos.Utilities.ISqlUtility _sqlUtility/*DataStructureInfo RepositoryConstructorArguments Bookstore.WishList*/)
        {
            _domRepository = domRepository;
            _executionContext = executionContext;
            this._sqlUtility = _sqlUtility;
            /*DataStructureInfo RepositoryConstructorCode Bookstore.WishList*/
        }

        public static KeyValuePair<string, Type>[] GetReadParameterTypes()
        {
            return new KeyValuePair<string, Type>[]
            {
                /*DataStructureInfo ReadParameterTypes Bookstore.WishList*/
            };
        }
        
        public virtual void Save(IEnumerable<Bookstore.WishList> insertedNew, IEnumerable<Bookstore.WishList> updatedNew, IEnumerable<Bookstore.WishList> deletedIds, bool checkUserPermissions = false)
        {
            if (!DomHelper.InitializeSaveMethodItems(ref insertedNew, ref updatedNew, ref deletedIds))
                return;

            /*DataStructureInfo WritableOrm ClearContext Bookstore.WishList*/

            /*DataStructureInfo WritableOrm ArgumentValidation Bookstore.WishList*/

            /*DataStructureInfo WritableOrm Initialization Bookstore.WishList*/

            // Using old data, including lazy loading of navigation properties:

            IEnumerable<Common.Queryable.Bookstore_WishList> deleted = DomHelper.LoadOldDataWithNavigationProperties(deletedIds, this);
            IEnumerable<Common.Queryable.Bookstore_WishList> updated = DomHelper.LoadOldDataWithNavigationProperties(updatedNew, this);

            foreach (var newItem in insertedNew.Concat(updatedNew))
                ShortStringPropertyCodeGenerator.CheckMaxLength(newItem.BookTitle, newItem, "Bookstore", "WishList", "BookTitle");

            /*DataStructureInfo WritableOrm OldDataLoaded Bookstore.WishList*/

            /*DataStructureInfo WritableOrm ProcessedOldData Bookstore.WishList*/

            {
                DomHelper.WriteToDatabase(insertedNew, updatedNew, deletedIds, _executionContext.PersistenceStorage, checkUserPermissions, _sqlUtility,
                    out Exception saveException, out Rhetos.RhetosException interpretedException);

                if (saveException != null)
                {
                    /*DataStructureInfo WritableOrm OnDatabaseError Bookstore.WishList*/
                    DomHelper.ThrowInterpretedException(checkUserPermissions, saveException, interpretedException, _sqlUtility, "Bookstore.WishList");
                }
            }

            deleted = null;
            updated = this.Query(updatedNew.Select(item => item.ID));
            IEnumerable<Common.Queryable.Bookstore_WishList> inserted = this.Query(insertedNew.Select(item => item.ID));

            bool allEffectsCompleted = false;
            try
            {
                /*DataStructureInfo WritableOrm OnSaveTag1 Bookstore.WishList*/

                /*DataStructureInfo WritableOrm OnSaveTag2 Bookstore.WishList*/

                Rhetos.Dom.DefaultConcepts.InvalidDataMessage.ValidateOnSave(insertedNew, updatedNew, this, "Bookstore.WishList");

                /*DataStructureInfo WritableOrm AfterSave Bookstore.WishList*/

                allEffectsCompleted = true;
            }
            finally
            {
                if (!allEffectsCompleted)
                    _executionContext.PersistenceTransaction.DiscardOnDispose();
            }
        }

        public IEnumerable<Rhetos.Dom.DefaultConcepts.InvalidDataMessage> Validate(IList<Guid> ids, bool onSave)
        {
            /*DataStructureInfo WritableOrm OnSaveValidate Bookstore.WishList*/
            yield break;
        }

        /*DataStructureInfo RepositoryMembers Bookstore.WishList*/
    }

    /*DataStructureInfo RepositoryAttributes Bookstore.BookGrid*/
    public partial class BookGrid_Repository : /*DataStructureInfo OverrideBaseType Bookstore.BookGrid*/ Common.OrmRepositoryBase<Common.Queryable.Bookstore_BookGrid, Bookstore.BookGrid> // Common.QueryableRepositoryBase<Common.Queryable.Bookstore_BookGrid, Bookstore.BookGrid> // Common.ReadableRepositoryBase<Bookstore.BookGrid> // global::Common.RepositoryBase
        /*DataStructureInfo RepositoryInterface Bookstore.BookGrid*/
    {
        /*DataStructureInfo RepositoryPrivateMembers Bookstore.BookGrid*/

        public BookGrid_Repository(Common.DomRepository domRepository, Common.ExecutionContext executionContext/*DataStructureInfo RepositoryConstructorArguments Bookstore.BookGrid*/)
        {
            _domRepository = domRepository;
            _executionContext = executionContext;
            /*DataStructureInfo RepositoryConstructorCode Bookstore.BookGrid*/
        }

        public static KeyValuePair<string, Type>[] GetReadParameterTypes()
        {
            return new KeyValuePair<string, Type>[]
            {
                new KeyValuePair<string, Type>(@"Bookstore.WantedBooks", typeof(Bookstore.WantedBooks)),
                /*DataStructureInfo ReadParameterTypes Bookstore.BookGrid*/
            };
        }
        
        public override IQueryable<Common.Queryable.Bookstore_BookGrid> Query()
        {
            /*DataStructureInfo RepositoryBeforeQuery Bookstore.BookGrid*/
            return Query(_domRepository.Bookstore.Book.Query());
        }

        public IQueryable<Common.Queryable.Bookstore_BookGrid> Query(IQueryable<Common.Queryable.Bookstore_Book> source)
        {
            return source.Select(item => new Common.Queryable.Bookstore_BookGrid
                {
                    ID = item.ID,
                    Base = item,
                    AuthorName = item.Author.Name,
                    Code = item.Code,
                    NumberOfComments = item.Extension_BookInfo.NumberOfComments,
                    Title = item.Title,
                    TranslatorName = item.Extension_ForeignBook.Translator.Name,
                    /*BrowseDataStructureInfo BrowseProperties Bookstore.BookGrid*/
                });
        }

        public IQueryable<Common.Queryable.Bookstore_BookGrid> Query(Bookstore.WantedBooks queryParameter)
        {
            /*QueryExpressionInfo BeforeQuery Bookstore.BookGrid.'Bookstore.WantedBooks'*/
            Func<Bookstore.WantedBooks, IQueryable<Common.Queryable.Bookstore_BookGrid>> queryFunction = parameter =>
            {
                var wishList = _domRepository.Bookstore.WishList.Query();
                if (parameter != null && parameter.HighPriorityOnly == true)
                    wishList = wishList.Where(item => item.HighPriority == true);

                var wantedBooks = wishList.Select(wish => new Common.Queryable.Bookstore_BookGrid
                {
                    // All properies must be declared here, otherwise EF will throw a NotSupportedException.
                    ID = wish.ID,
                    Code = null,
                    Title = wish.BookTitle,
                    AuthorName = "unknown",
                    TranslatorName = null,
                    //Description = null,
                    NumberOfComments = null
                });
                return wantedBooks;
            };
            var queryResult = queryFunction(queryParameter);
            /*QueryExpressionInfo AfterQuery Bookstore.BookGrid.'Bookstore.WantedBooks'*/
            return queryResult;
        }

        /*DataStructureInfo RepositoryMembers Bookstore.BookGrid*/
    }

    /*ModuleInfo HelperNamespaceMembers Bookstore*/

    #pragma warning restore // See configuration setting CommonConcepts:CompilerWarningsInGeneratedCode.
}

