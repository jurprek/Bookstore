Module Bookstore  //https://github.com/Rhetos/Rhetos/wiki/Data-model-and-relationships#entities-and-properties
{
    AutodetectSqlDependencies;

   Entity Book //One-to-many relationship (master-detail). "1 : N" relationship is declared by the Reference from the dependent entity to the other one.
   {
      ShortString Code { AutoCode; DenyUserEdit; }
      //ShortString Code { RegExMatch "\d{7,10}" "Code must have 7 to 10 digits."; }
      ShortString Title { Required; }
   
	  Integer NumberOfPages {MaxValue 999;}
      ItemFilter CommonMisspelling 'book => book.Title.Contains("curiousity")';
      InvalidData CommonMisspelling 'It is not allowed to enter misspelled word "curiousity".';
      
      Reference Author Bookstore.Person;

	  ItemFilter NameTooLong 'item => item.Title.Length > 100';
      //Lock NameTooLong 'item => item.Title.Length > 100';
      InvalidData NameTooLong '[Test] Longer than 100.'; // { AllowSave; }

      ItemFilter LongBooks 'item => item.NumberOfPages >= 500';
      
      ItemFilter ForeignAuthorXWithComments 'item => item.Author.Name.StartsWith("X") && item.Extension_ForeignBook.ID != null && _domRepository.Bookstore.Comment.Subquery.Where(c => c.BookID == item.ID).Count() >= 3';     //Write a filter that will return books that are foreign (if a record exists in the extension entity ForeignBook), but only if the author's name starts with X (see the referenced entity Person) and only if the book has at least 3 comments entered (in the detail entity Comment).
    
      ComposableFilterBy LongBooks2 '(query, repository, parameter) =>
      {
        return query.Where(item => item.NumberOfPages >= 300);
      }';
  
      Logging
      {
            Log Bookstore.Book.Title;
            Log Bookstore.Book.Code;
            // 'Description' property is long and not interesting, so we don't want to log its values.
      }
      
      //FilterBy concept    https://github.com/Rhetos/Rhetos/wiki/Filters-and-other-read-methods
      FilterBy ComplexSearch '(repository, parameter) =>
      {
          var query = repository.Bookstore.Book.Query(item => item.NumberOfPages >= parameter.MinimumPages);
          if (parameter.ForeignBooksOnly == true)
               query = query.Where(item => item.Extension_ForeignBook.ID != null);
          Book[] books = query.ToSimple().ToArray();
          
          if (parameter.MaskTitles == true)
              foreach (var book in books.Where(b => !string.IsNullOrEmpty(b.Title))) book.Title = book.Title.First() + "***" + book.Title.Last();
          return books;
      }';
   }

   Entity Disposal
   {
        Reference Book { Required; }
        LongString Explanation { Required; }
        DateTime EffectiveSince { CreationTime; }

        ItemFilter ImportantBookExplanation 'item => item.Book.Title.Contains("important") && item.Explanation.Length < 50';        
        ItemFilter HighRating 'item => item.Book.Extension_BookRating.Rating > 100';

        InvalidData HighRating 'You are not allowed to dispose a book with rating above 100.';
        InvalidData ImportantBookExplanation 'When disposing an important book, the explanation should be at least 50 characters long.';
   }

   Entity BookRating
   {
        Extends Bookstore.Book;
        Decimal Rating; // ComputedFrom Bookstore.ComputeBookRating
   }

   Parameter ComplexSearch
   {
        Integer MinimumPages;
        Bool ForeignBooksOnly;
        Bool MaskTitles;
   }  

   Parameter LongBooks2
   {
       Integer MinimumPages;
       Bool ForeignBooksOnly;
   }

   Entity Person
   {
      ShortString Name;
   }

   Entity Translator
   {
      ShortString Name;
   }

   Entity BookTranslator
   {
      Reference Book { Detail; }
      Reference Translator { Required; }

      UniqueMultiple 'Book Translator';
   }

   Entity Comment
   {
      Reference Book { Detail; }
      LongString Text;

      Logging { AllProperties; }
   }

   Entity ChildrensBook  //One-to-one relationship (extensions). One-to-one relationship is declared by the Extends concept.
   {
      Extends Bookstore.Book;

      Integer AgeFrom;
      Integer AgeTo;
      IntegerRange AgeFrom AgeTo; // A simple validation.
   }

   Entity ForeignBook
   {
      Extends Bookstore.Book;

      ShortString OriginalLanguage;
      Reference Translator Bookstore.Translator;
      Reference Author Bookstore.Person;
   }

   Entity Topic  //Many-to-many relationship (join table). "N : N" relationship is usually implemented as an associative table. 
   {
      ShortString Name { Unique; Required; }
   }

   Entity BookTopic
   {
      Reference Book { Detail; }
      Reference Topic { Required; }

      UniqueMultiple 'Book Topic';
   }

   Entity WishList
   {
        ShortString BookTitle;
        Bool HighPriority;
   }

   Browse BookGrid Bookstore.Book
   {
        Take Code;
        Take Title;
        Take 'Author.Name';
        Take TranslatorName 'Extension_ForeignBook.Translator.Name';
        //Take Description 'Extension_BookDescription.Description';
        Take NumberOfComments 'Extension_BookInfo.NumberOfComments';

        // This query is an alternative data source for BookGrid.
        // Instead of reading data from the `Bookstore.Book`, it provides the new data from WantedBooks.
        Query 'Bookstore.WantedBooks' 'parameter =>
            {
                var wishList = _domRepository.Bookstore.WishList.Query();
                if (parameter != null && parameter.HighPriorityOnly == true)
                    wishList = wishList.Where(item => item.HighPriority == true);

                var wantedBooks = wishList.Select(wish => new Common.Queryable.Bookstore_BookGrid
                {
                    // All properies must be declared here, otherwise EF will throw a NotSupportedException.
                    ID = wish.ID,
                    Code = null,
                    Title = wish.BookTitle,
                    AuthorName = "unknown",
                    TranslatorName = null,
                    //Description = null,
                    NumberOfComments = null
                });
                return wantedBooks;
            }';
   }

   Parameter WantedBooks
   {
        Bool HighPriorityOnly;
   }

   //SqlQueryable BookInfo
   //"
   //    SELECT
   //        b.ID,
   //        NumberOfComments = COUNT(c.ID)
   //    FROM    //        Bookstore.Book b
   //        LEFT JOIN Bookstore.Comment c ON c.BookID = b.ID
   //    GROUP BY
   //        b.ID
   //"
   //{
   //    Extends Bookstore.Book;
   //    Integer NumberOfComments;
   //
   //    AutodetectSqlDependencies;
   //}

   SqlQueryable BookInfo <SQL\BookInfo.sql>
   {
        Extends Bookstore.Book;
        Integer NumberOfComments;

        AutodetectSqlDependencies;
   }

   Computed ExpectedBookRating 'repository =>
        {
            var books = repository.Bookstore.Book.Query()
                .Select(b =>
                    new
                    {
                        b.ID,
                        b.Title,
                        IsForeign = b.Extension_ForeignBook.ID != null
                    })
                .ToList();

            var ratings = new List<ExpectedBookRating>();
            foreach (var book in books)
            {
                decimal rating = 0;

                if (book.Title?.IndexOf("super", StringComparison.InvariantCultureIgnoreCase) >= 0)
                    rating += 100;

                if (book.Title?.IndexOf("great", StringComparison.InvariantCultureIgnoreCase) >= 0)
                    rating += 50;

                if (book.IsForeign)
                    rating *= 1.2m;

                ratings.Add(new ExpectedBookRating { ID = book.ID, Rating = rating });
            }

            return ratings.ToArray();
        }'
    {
        Extends Bookstore.Book;
        Decimal Rating;
    }

    Hardcoded Genre
    {
        ShortString Label; // Short text displayed to user.
        LongString Description;
        Bool IsFiction;

        Entry ScienceFiction
        {
            Value Label 'Science fiction';
            Value Description 'A speculative fiction with imagined elements that are inspired by natural sciences or social sciences.';
            Value IsFiction 1;
        }

        Entry Biography
        {
            Value Label 'Biography';
            Value Description 'A written narrative of a person''s life.';
            Value IsFiction 0;
        }
    }

    Entity Shipment
    {
       
    }

    Hardcoded ShipmentStatus
    {
        Entry Preparing;
        Entry Approved;
        Entry Delivered;
    }

    Polymorphic ShipmentEvent
    {
        DateTime EffectiveSince;
        Reference Shipment;
        Reference NewStatus Bookstore.ShipmentStatus;
    }

    Entity ApproveShipment
    {
        DateTime EffectiveSince { CreationTime; }
        Reference Shipment;

        Is Bookstore.ShipmentEvent
        {
            Implements Bookstore.ShipmentEvent.NewStatus Bookstore.ShipmentStatus.Approved;

            // Slower alternative: Calling the database function:
            //Implements Bookstore.ShipmentEvent.NewStatus "Bookstore.ShipmentStatus_Approved()";
        }
    }
}

// Relationships summary
// The following DSL keywords are available for relationships between entities (and other data structures).
//  ------------------------------------------------------------------
//  |            Simple relationship	|    "Part-of" relationship  |
//  ==================================================================
//  |  1 : N	         Reference	    |      Reference { Detail; } |
//  ------------------------------------------------------------------
//  |  0..1 : 1     UniqueReference     |     	Extension            |
//  ------------------------------------------------------------------
                