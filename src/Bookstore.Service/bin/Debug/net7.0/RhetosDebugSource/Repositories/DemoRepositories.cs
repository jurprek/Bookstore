// <autogenerated />
namespace Demo.Repositories
{
    #pragma warning disable // See configuration setting CommonConcepts:CompilerWarningsInGeneratedCode.

    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Linq.Expressions;
    using System.Runtime.Serialization;
    using Rhetos.Dom.DefaultConcepts;
    using Rhetos.Utilities;

    /*ModuleInfo Using Demo*/

    public class ModuleRepository
    {
        private readonly Rhetos.Extensibility.INamedPlugins<IRepository> _repositories;

        public ModuleRepository(Rhetos.Extensibility.INamedPlugins<IRepository> repositories)
        {
            _repositories = repositories;
        }

        private BorrowMoney_Repository _BorrowMoney_Repository;
        public BorrowMoney_Repository BorrowMoney { get { return _BorrowMoney_Repository ?? (_BorrowMoney_Repository = (BorrowMoney_Repository)Rhetos.Extensibility.NamedPluginsExtensions.GetPlugin(_repositories, @"Demo.BorrowMoney")); } }

        private BorrowMoney2_Repository _BorrowMoney2_Repository;
        public BorrowMoney2_Repository BorrowMoney2 { get { return _BorrowMoney2_Repository ?? (_BorrowMoney2_Repository = (BorrowMoney2_Repository)Rhetos.Extensibility.NamedPluginsExtensions.GetPlugin(_repositories, @"Demo.BorrowMoney2")); } }

        private LendMoney_Repository _LendMoney_Repository;
        public LendMoney_Repository LendMoney { get { return _LendMoney_Repository ?? (_LendMoney_Repository = (LendMoney_Repository)Rhetos.Extensibility.NamedPluginsExtensions.GetPlugin(_repositories, @"Demo.LendMoney")); } }

        private LendMoney2_Repository _LendMoney2_Repository;
        public LendMoney2_Repository LendMoney2 { get { return _LendMoney2_Repository ?? (_LendMoney2_Repository = (LendMoney2_Repository)Rhetos.Extensibility.NamedPluginsExtensions.GetPlugin(_repositories, @"Demo.LendMoney2")); } }

        private LendMoneyAddendum_Repository _LendMoneyAddendum_Repository;
        public LendMoneyAddendum_Repository LendMoneyAddendum { get { return _LendMoneyAddendum_Repository ?? (_LendMoneyAddendum_Repository = (LendMoneyAddendum_Repository)Rhetos.Extensibility.NamedPluginsExtensions.GetPlugin(_repositories, @"Demo.LendMoneyAddendum")); } }

        private MoneyTransaction_Repository _MoneyTransaction_Repository;
        public MoneyTransaction_Repository MoneyTransaction { get { return _MoneyTransaction_Repository ?? (_MoneyTransaction_Repository = (MoneyTransaction_Repository)Rhetos.Extensibility.NamedPluginsExtensions.GetPlugin(_repositories, @"Demo.MoneyTransaction")); } }

        private MoneyTransaction_Materialized_Repository _MoneyTransaction_Materialized_Repository;
        public MoneyTransaction_Materialized_Repository MoneyTransaction_Materialized { get { return _MoneyTransaction_Materialized_Repository ?? (_MoneyTransaction_Materialized_Repository = (MoneyTransaction_Materialized_Repository)Rhetos.Extensibility.NamedPluginsExtensions.GetPlugin(_repositories, @"Demo.MoneyTransaction_Materialized")); } }

        private TransactionComment_Repository _TransactionComment_Repository;
        public TransactionComment_Repository TransactionComment { get { return _TransactionComment_Repository ?? (_TransactionComment_Repository = (TransactionComment_Repository)Rhetos.Extensibility.NamedPluginsExtensions.GetPlugin(_repositories, @"Demo.TransactionComment")); } }

        private TransferMoney_Repository _TransferMoney_Repository;
        public TransferMoney_Repository TransferMoney { get { return _TransferMoney_Repository ?? (_TransferMoney_Repository = (TransferMoney_Repository)Rhetos.Extensibility.NamedPluginsExtensions.GetPlugin(_repositories, @"Demo.TransferMoney")); } }

        /*ModuleInfo RepositoryMembers Demo*/
    }

    /*DataStructureInfo RepositoryAttributes Demo.BorrowMoney*/
    public partial class BorrowMoney_Repository : /*DataStructureInfo OverrideBaseType Demo.BorrowMoney*/ Common.OrmRepositoryBase<Common.Queryable.Demo_BorrowMoney, Demo.BorrowMoney> // Common.QueryableRepositoryBase<Common.Queryable.Demo_BorrowMoney, Demo.BorrowMoney> // Common.ReadableRepositoryBase<Demo.BorrowMoney> // global::Common.RepositoryBase
        , IWritableRepository<Demo.BorrowMoney>, IValidateRepository/*DataStructureInfo RepositoryInterface Demo.BorrowMoney*/
    {
        private readonly Rhetos.Dom.DefaultConcepts.CommonConceptsRuntimeOptions _commonConceptsRuntimeOptions;
        private readonly Rhetos.Utilities.ISqlUtility _sqlUtility;
        /*DataStructureInfo RepositoryPrivateMembers Demo.BorrowMoney*/

        public BorrowMoney_Repository(Common.DomRepository domRepository, Common.ExecutionContext executionContext, Rhetos.Dom.DefaultConcepts.CommonConceptsRuntimeOptions _commonConceptsRuntimeOptions, Rhetos.Utilities.ISqlUtility _sqlUtility/*DataStructureInfo RepositoryConstructorArguments Demo.BorrowMoney*/)
        {
            _domRepository = domRepository;
            _executionContext = executionContext;
            this._commonConceptsRuntimeOptions = _commonConceptsRuntimeOptions;
            this._sqlUtility = _sqlUtility;
            /*DataStructureInfo RepositoryConstructorCode Demo.BorrowMoney*/
        }

        public static KeyValuePair<string, Type>[] GetReadParameterTypes()
        {
            return new KeyValuePair<string, Type>[]
            {
                /*DataStructureInfo ReadParameterTypes Demo.BorrowMoney*/
            };
        }
        
        public virtual void Save(IEnumerable<Demo.BorrowMoney> insertedNew, IEnumerable<Demo.BorrowMoney> updatedNew, IEnumerable<Demo.BorrowMoney> deletedIds, bool checkUserPermissions = false)
        {
            if (!DomHelper.InitializeSaveMethodItems(ref insertedNew, ref updatedNew, ref deletedIds))
                return;

            /*DataStructureInfo WritableOrm ClearContext Demo.BorrowMoney*/

            /*DataStructureInfo WritableOrm ArgumentValidation Demo.BorrowMoney*/

            if (_commonConceptsRuntimeOptions.AutoRoundMoney)
            {
                foreach (var item in insertedNew.Concat(updatedNew))
                {
                    item.Amount = item.Amount != null ? (long)(item.Amount.Value * 100m) / 100m : null;
                    /*MoneyRoundingInfo MoneyRounding Properties Demo.BorrowMoney*/
                }
            }
            /*DataStructureInfo WritableOrm Initialization Demo.BorrowMoney*/

            // Using old data, including lazy loading of navigation properties:

            IEnumerable<Common.Queryable.Demo_BorrowMoney> deleted = DomHelper.LoadOldDataWithNavigationProperties(deletedIds, this);
            IEnumerable<Common.Queryable.Demo_BorrowMoney> updated = DomHelper.LoadOldDataWithNavigationProperties(updatedNew, this);

            foreach (var newItem in insertedNew.Concat(updatedNew))
                ShortStringPropertyCodeGenerator.CheckMaxLength(newItem.FromWhom, newItem, "Demo", "BorrowMoney", "FromWhom");

            Func<IEnumerable<Common.Queryable.Demo_BorrowMoney>, Rhetos.Dom.DefaultConcepts.FilterSubtype> filterLoadKeepSynchronizedOnChangedItemsMoneyTransaction_Materialized1 =
                changedItems => new Rhetos.Dom.DefaultConcepts.FilterSubtype
                        {
                            Ids = changedItems.Select(item => item.ID).ToArray(),
                            Subtype = @"Demo.BorrowMoney",
                            ImplementationName = @""
                        };
            Rhetos.Dom.DefaultConcepts.FilterSubtype filterKeepSynchronizedOnChangedItemsMoneyTransaction_Materialized1Old = filterLoadKeepSynchronizedOnChangedItemsMoneyTransaction_Materialized1(updated.Concat(deleted));

            /*DataStructureInfo WritableOrm OldDataLoaded Demo.BorrowMoney*/

            /*DataStructureInfo WritableOrm ProcessedOldData Demo.BorrowMoney*/

            {
                DomHelper.WriteToDatabase(insertedNew, updatedNew, deletedIds, _executionContext.PersistenceStorage, checkUserPermissions, _sqlUtility,
                    out Exception saveException, out Rhetos.RhetosException interpretedException);

                if (saveException != null)
                {
                    /*DataStructureInfo WritableOrm OnDatabaseError Demo.BorrowMoney*/
                    DomHelper.ThrowInterpretedException(checkUserPermissions, saveException, interpretedException, _sqlUtility, "Demo.BorrowMoney");
                }
            }

            deleted = null;
            updated = this.Query(updatedNew.Select(item => item.ID));
            IEnumerable<Common.Queryable.Demo_BorrowMoney> inserted = this.Query(insertedNew.Select(item => item.ID));

            bool allEffectsCompleted = false;
            try
            {
                /*OverrideRecompute KeepSynchronizedInfo Demo.MoneyTransaction_Materialized.Demo.MoneyTransaction.2*/
                {
                    var filteredNew = filterLoadKeepSynchronizedOnChangedItemsMoneyTransaction_Materialized1(inserted.Concat(updated));
                    Rhetos.Dom.DefaultConcepts.FilterSubtype optimizedFilter;
                    if (KeepSynchronizedHelper.OptimizeFiltersUnion(filteredNew, filterKeepSynchronizedOnChangedItemsMoneyTransaction_Materialized1Old, out optimizedFilter))
                        _domRepository.Demo.MoneyTransaction_Materialized.RecomputeFromMoneyTransaction(optimizedFilter);
                    else
                    {
                        _domRepository.Demo.MoneyTransaction_Materialized.RecomputeFromMoneyTransaction(filterKeepSynchronizedOnChangedItemsMoneyTransaction_Materialized1Old);
                        _domRepository.Demo.MoneyTransaction_Materialized.RecomputeFromMoneyTransaction(filteredNew);
                    }
                }

                /*DataStructureInfo WritableOrm OnSaveTag1 Demo.BorrowMoney*/

                /*DataStructureInfo WritableOrm OnSaveTag2 Demo.BorrowMoney*/

                Rhetos.Dom.DefaultConcepts.InvalidDataMessage.ValidateOnSave(insertedNew, updatedNew, this, "Demo.BorrowMoney");

                /*DataStructureInfo WritableOrm AfterSave Demo.BorrowMoney*/

                allEffectsCompleted = true;
            }
            finally
            {
                if (!allEffectsCompleted)
                    _executionContext.PersistenceTransaction.DiscardOnDispose();
            }
        }

        public IEnumerable<Rhetos.Dom.DefaultConcepts.InvalidDataMessage> Validate(IList<Guid> ids, bool onSave)
        {
            /*DataStructureInfo WritableOrm OnSaveValidate Demo.BorrowMoney*/
            yield break;
        }

        /*DataStructureInfo RepositoryMembers Demo.BorrowMoney*/
    }

    /*DataStructureInfo RepositoryAttributes Demo.BorrowMoney2*/
    public partial class BorrowMoney2_Repository : /*DataStructureInfo OverrideBaseType Demo.BorrowMoney2*/ Common.OrmRepositoryBase<Common.Queryable.Demo_BorrowMoney2, Demo.BorrowMoney2> // Common.QueryableRepositoryBase<Common.Queryable.Demo_BorrowMoney2, Demo.BorrowMoney2> // Common.ReadableRepositoryBase<Demo.BorrowMoney2> // global::Common.RepositoryBase
        , IWritableRepository<Demo.BorrowMoney2>, IValidateRepository/*DataStructureInfo RepositoryInterface Demo.BorrowMoney2*/
    {
        private readonly Rhetos.Dom.DefaultConcepts.CommonConceptsRuntimeOptions _commonConceptsRuntimeOptions;
        private readonly Rhetos.Utilities.ISqlUtility _sqlUtility;
        /*DataStructureInfo RepositoryPrivateMembers Demo.BorrowMoney2*/

        public BorrowMoney2_Repository(Common.DomRepository domRepository, Common.ExecutionContext executionContext, Rhetos.Dom.DefaultConcepts.CommonConceptsRuntimeOptions _commonConceptsRuntimeOptions, Rhetos.Utilities.ISqlUtility _sqlUtility/*DataStructureInfo RepositoryConstructorArguments Demo.BorrowMoney2*/)
        {
            _domRepository = domRepository;
            _executionContext = executionContext;
            this._commonConceptsRuntimeOptions = _commonConceptsRuntimeOptions;
            this._sqlUtility = _sqlUtility;
            /*DataStructureInfo RepositoryConstructorCode Demo.BorrowMoney2*/
        }

        public static KeyValuePair<string, Type>[] GetReadParameterTypes()
        {
            return new KeyValuePair<string, Type>[]
            {
                /*DataStructureInfo ReadParameterTypes Demo.BorrowMoney2*/
            };
        }
        
        public virtual void Save(IEnumerable<Demo.BorrowMoney2> insertedNew, IEnumerable<Demo.BorrowMoney2> updatedNew, IEnumerable<Demo.BorrowMoney2> deletedIds, bool checkUserPermissions = false)
        {
            if (!DomHelper.InitializeSaveMethodItems(ref insertedNew, ref updatedNew, ref deletedIds))
                return;

            /*DataStructureInfo WritableOrm ClearContext Demo.BorrowMoney2*/

            /*DataStructureInfo WritableOrm ArgumentValidation Demo.BorrowMoney2*/

            if (_commonConceptsRuntimeOptions.AutoRoundMoney)
            {
                foreach (var item in insertedNew.Concat(updatedNew))
                {
                    item.Amount = item.Amount != null ? (long)(item.Amount.Value * 100m) / 100m : null;
                    /*MoneyRoundingInfo MoneyRounding Properties Demo.BorrowMoney2*/
                }
            }
            /*DataStructureInfo WritableOrm Initialization Demo.BorrowMoney2*/

            // Using old data, including lazy loading of navigation properties:

            IEnumerable<Common.Queryable.Demo_BorrowMoney2> deleted = DomHelper.LoadOldDataWithNavigationProperties(deletedIds, this);
            IEnumerable<Common.Queryable.Demo_BorrowMoney2> updated = DomHelper.LoadOldDataWithNavigationProperties(updatedNew, this);

            foreach (var newItem in insertedNew.Concat(updatedNew))
                ShortStringPropertyCodeGenerator.CheckMaxLength(newItem.FromWhom, newItem, "Demo", "BorrowMoney2", "FromWhom");

            Func<IEnumerable<Common.Queryable.Demo_BorrowMoney2>, Rhetos.Dom.DefaultConcepts.FilterSubtype> filterLoadKeepSynchronizedOnChangedItemsMoneyTransaction_Materialized1 =
                changedItems => new Rhetos.Dom.DefaultConcepts.FilterSubtype
                        {
                            Ids = changedItems.Select(item => item.ID).ToArray(),
                            Subtype = @"Demo.BorrowMoney2",
                            ImplementationName = @""
                        };
            Rhetos.Dom.DefaultConcepts.FilterSubtype filterKeepSynchronizedOnChangedItemsMoneyTransaction_Materialized1Old = filterLoadKeepSynchronizedOnChangedItemsMoneyTransaction_Materialized1(updated.Concat(deleted));

            /*DataStructureInfo WritableOrm OldDataLoaded Demo.BorrowMoney2*/

            /*DataStructureInfo WritableOrm ProcessedOldData Demo.BorrowMoney2*/

            {
                DomHelper.WriteToDatabase(insertedNew, updatedNew, deletedIds, _executionContext.PersistenceStorage, checkUserPermissions, _sqlUtility,
                    out Exception saveException, out Rhetos.RhetosException interpretedException);

                if (saveException != null)
                {
                    /*DataStructureInfo WritableOrm OnDatabaseError Demo.BorrowMoney2*/
                    DomHelper.ThrowInterpretedException(checkUserPermissions, saveException, interpretedException, _sqlUtility, "Demo.BorrowMoney2");
                }
            }

            deleted = null;
            updated = this.Query(updatedNew.Select(item => item.ID));
            IEnumerable<Common.Queryable.Demo_BorrowMoney2> inserted = this.Query(insertedNew.Select(item => item.ID));

            bool allEffectsCompleted = false;
            try
            {
                /*OverrideRecompute KeepSynchronizedInfo Demo.MoneyTransaction_Materialized.Demo.MoneyTransaction.3*/
                {
                    var filteredNew = filterLoadKeepSynchronizedOnChangedItemsMoneyTransaction_Materialized1(inserted.Concat(updated));
                    Rhetos.Dom.DefaultConcepts.FilterSubtype optimizedFilter;
                    if (KeepSynchronizedHelper.OptimizeFiltersUnion(filteredNew, filterKeepSynchronizedOnChangedItemsMoneyTransaction_Materialized1Old, out optimizedFilter))
                        _domRepository.Demo.MoneyTransaction_Materialized.RecomputeFromMoneyTransaction(optimizedFilter);
                    else
                    {
                        _domRepository.Demo.MoneyTransaction_Materialized.RecomputeFromMoneyTransaction(filterKeepSynchronizedOnChangedItemsMoneyTransaction_Materialized1Old);
                        _domRepository.Demo.MoneyTransaction_Materialized.RecomputeFromMoneyTransaction(filteredNew);
                    }
                }

                /*DataStructureInfo WritableOrm OnSaveTag1 Demo.BorrowMoney2*/

                /*DataStructureInfo WritableOrm OnSaveTag2 Demo.BorrowMoney2*/

                Rhetos.Dom.DefaultConcepts.InvalidDataMessage.ValidateOnSave(insertedNew, updatedNew, this, "Demo.BorrowMoney2");

                /*DataStructureInfo WritableOrm AfterSave Demo.BorrowMoney2*/

                allEffectsCompleted = true;
            }
            finally
            {
                if (!allEffectsCompleted)
                    _executionContext.PersistenceTransaction.DiscardOnDispose();
            }
        }

        public IEnumerable<Rhetos.Dom.DefaultConcepts.InvalidDataMessage> Validate(IList<Guid> ids, bool onSave)
        {
            /*DataStructureInfo WritableOrm OnSaveValidate Demo.BorrowMoney2*/
            yield break;
        }

        /*DataStructureInfo RepositoryMembers Demo.BorrowMoney2*/
    }

    /*DataStructureInfo RepositoryAttributes Demo.LendMoney*/
    public partial class LendMoney_Repository : /*DataStructureInfo OverrideBaseType Demo.LendMoney*/ Common.OrmRepositoryBase<Common.Queryable.Demo_LendMoney, Demo.LendMoney> // Common.QueryableRepositoryBase<Common.Queryable.Demo_LendMoney, Demo.LendMoney> // Common.ReadableRepositoryBase<Demo.LendMoney> // global::Common.RepositoryBase
        , IWritableRepository<Demo.LendMoney>, IValidateRepository/*DataStructureInfo RepositoryInterface Demo.LendMoney*/
    {
        private readonly Rhetos.Dom.DefaultConcepts.CommonConceptsRuntimeOptions _commonConceptsRuntimeOptions;
        private readonly Rhetos.Utilities.ISqlUtility _sqlUtility;
        /*DataStructureInfo RepositoryPrivateMembers Demo.LendMoney*/

        public LendMoney_Repository(Common.DomRepository domRepository, Common.ExecutionContext executionContext, Rhetos.Dom.DefaultConcepts.CommonConceptsRuntimeOptions _commonConceptsRuntimeOptions, Rhetos.Utilities.ISqlUtility _sqlUtility/*DataStructureInfo RepositoryConstructorArguments Demo.LendMoney*/)
        {
            _domRepository = domRepository;
            _executionContext = executionContext;
            this._commonConceptsRuntimeOptions = _commonConceptsRuntimeOptions;
            this._sqlUtility = _sqlUtility;
            /*DataStructureInfo RepositoryConstructorCode Demo.LendMoney*/
        }

        public static KeyValuePair<string, Type>[] GetReadParameterTypes()
        {
            return new KeyValuePair<string, Type>[]
            {
                /*DataStructureInfo ReadParameterTypes Demo.LendMoney*/
            };
        }
        
        public virtual void Save(IEnumerable<Demo.LendMoney> insertedNew, IEnumerable<Demo.LendMoney> updatedNew, IEnumerable<Demo.LendMoney> deletedIds, bool checkUserPermissions = false)
        {
            if (!DomHelper.InitializeSaveMethodItems(ref insertedNew, ref updatedNew, ref deletedIds))
                return;

            /*DataStructureInfo WritableOrm ClearContext Demo.LendMoney*/

            /*DataStructureInfo WritableOrm ArgumentValidation Demo.LendMoney*/

            if (_commonConceptsRuntimeOptions.AutoRoundMoney)
            {
                foreach (var item in insertedNew.Concat(updatedNew))
                {
                    item.Amount = item.Amount != null ? (long)(item.Amount.Value * 100m) / 100m : null;
                    /*MoneyRoundingInfo MoneyRounding Properties Demo.LendMoney*/
                }
            }
            /*DataStructureInfo WritableOrm Initialization Demo.LendMoney*/

            // Using old data, including lazy loading of navigation properties:

            IEnumerable<Common.Queryable.Demo_LendMoney> deleted = DomHelper.LoadOldDataWithNavigationProperties(deletedIds, this);
            IEnumerable<Common.Queryable.Demo_LendMoney> updated = DomHelper.LoadOldDataWithNavigationProperties(updatedNew, this);

            foreach (var newItem in insertedNew.Concat(updatedNew))
                ShortStringPropertyCodeGenerator.CheckMaxLength(newItem.ToWhom, newItem, "Demo", "LendMoney", "ToWhom");

            Func<IEnumerable<Common.Queryable.Demo_LendMoney>, Rhetos.Dom.DefaultConcepts.FilterSubtype> filterLoadKeepSynchronizedOnChangedItemsMoneyTransaction_Materialized1 =
                changedItems => new Rhetos.Dom.DefaultConcepts.FilterSubtype
                        {
                            Ids = changedItems.Select(item => DomUtility.GetSubtypeImplementationId(item.ID, 346450379)).ToArray(),
                            Subtype = @"Demo.LendMoney",
                            ImplementationName = @"TotalAddendum"
                        };
            Rhetos.Dom.DefaultConcepts.FilterSubtype filterKeepSynchronizedOnChangedItemsMoneyTransaction_Materialized1Old = filterLoadKeepSynchronizedOnChangedItemsMoneyTransaction_Materialized1(updated.Concat(deleted));

            Func<IEnumerable<Common.Queryable.Demo_LendMoney>, Rhetos.Dom.DefaultConcepts.FilterSubtype> filterLoadKeepSynchronizedOnChangedItemsMoneyTransaction_Materialized2 =
                changedItems => new Rhetos.Dom.DefaultConcepts.FilterSubtype
                        {
                            Ids = changedItems.Select(item => item.ID).ToArray(),
                            Subtype = @"Demo.LendMoney",
                            ImplementationName = @""
                        };
            Rhetos.Dom.DefaultConcepts.FilterSubtype filterKeepSynchronizedOnChangedItemsMoneyTransaction_Materialized2Old = filterLoadKeepSynchronizedOnChangedItemsMoneyTransaction_Materialized2(updated.Concat(deleted));

            /*DataStructureInfo WritableOrm OldDataLoaded Demo.LendMoney*/

            /*DataStructureInfo WritableOrm ProcessedOldData Demo.LendMoney*/

            {
                DomHelper.WriteToDatabase(insertedNew, updatedNew, deletedIds, _executionContext.PersistenceStorage, checkUserPermissions, _sqlUtility,
                    out Exception saveException, out Rhetos.RhetosException interpretedException);

                if (saveException != null)
                {
                    if (interpretedException is Rhetos.UserException && Rhetos.Utilities.MsSqlUtility.IsReferenceErrorOnDelete(interpretedException, @"Demo.LendMoneyAddendum", @"LendMoneyID", @"FK_LendMoneyAddendum_LendMoney_LendMoneyID"))
                        ((Rhetos.UserException)interpretedException).SystemMessage = @"DataStructure:Demo.LendMoneyAddendum,Property:LendMoneyID,Referenced:Demo.LendMoney";
                    /*DataStructureInfo WritableOrm OnDatabaseError Demo.LendMoney*/
                    DomHelper.ThrowInterpretedException(checkUserPermissions, saveException, interpretedException, _sqlUtility, "Demo.LendMoney");
                }
            }

            deleted = null;
            updated = this.Query(updatedNew.Select(item => item.ID));
            IEnumerable<Common.Queryable.Demo_LendMoney> inserted = this.Query(insertedNew.Select(item => item.ID));

            bool allEffectsCompleted = false;
            try
            {
                /*OverrideRecompute KeepSynchronizedInfo Demo.MoneyTransaction_Materialized.Demo.MoneyTransaction.4*/
                {
                    var filteredNew = filterLoadKeepSynchronizedOnChangedItemsMoneyTransaction_Materialized1(inserted.Concat(updated));
                    Rhetos.Dom.DefaultConcepts.FilterSubtype optimizedFilter;
                    if (KeepSynchronizedHelper.OptimizeFiltersUnion(filteredNew, filterKeepSynchronizedOnChangedItemsMoneyTransaction_Materialized1Old, out optimizedFilter))
                        _domRepository.Demo.MoneyTransaction_Materialized.RecomputeFromMoneyTransaction(optimizedFilter);
                    else
                    {
                        _domRepository.Demo.MoneyTransaction_Materialized.RecomputeFromMoneyTransaction(filterKeepSynchronizedOnChangedItemsMoneyTransaction_Materialized1Old);
                        _domRepository.Demo.MoneyTransaction_Materialized.RecomputeFromMoneyTransaction(filteredNew);
                    }
                }

                /*OverrideRecompute KeepSynchronizedInfo Demo.MoneyTransaction_Materialized.Demo.MoneyTransaction.5*/
                {
                    var filteredNew = filterLoadKeepSynchronizedOnChangedItemsMoneyTransaction_Materialized2(inserted.Concat(updated));
                    Rhetos.Dom.DefaultConcepts.FilterSubtype optimizedFilter;
                    if (KeepSynchronizedHelper.OptimizeFiltersUnion(filteredNew, filterKeepSynchronizedOnChangedItemsMoneyTransaction_Materialized2Old, out optimizedFilter))
                        _domRepository.Demo.MoneyTransaction_Materialized.RecomputeFromMoneyTransaction(optimizedFilter);
                    else
                    {
                        _domRepository.Demo.MoneyTransaction_Materialized.RecomputeFromMoneyTransaction(filterKeepSynchronizedOnChangedItemsMoneyTransaction_Materialized2Old);
                        _domRepository.Demo.MoneyTransaction_Materialized.RecomputeFromMoneyTransaction(filteredNew);
                    }
                }

                /*DataStructureInfo WritableOrm OnSaveTag1 Demo.LendMoney*/

                /*DataStructureInfo WritableOrm OnSaveTag2 Demo.LendMoney*/

                Rhetos.Dom.DefaultConcepts.InvalidDataMessage.ValidateOnSave(insertedNew, updatedNew, this, "Demo.LendMoney");

                /*DataStructureInfo WritableOrm AfterSave Demo.LendMoney*/

                allEffectsCompleted = true;
            }
            finally
            {
                if (!allEffectsCompleted)
                    _executionContext.PersistenceTransaction.DiscardOnDispose();
            }
        }

        public IEnumerable<Rhetos.Dom.DefaultConcepts.InvalidDataMessage> Validate(IList<Guid> ids, bool onSave)
        {
            /*DataStructureInfo WritableOrm OnSaveValidate Demo.LendMoney*/
            yield break;
        }

        /*DataStructureInfo RepositoryMembers Demo.LendMoney*/
    }

    /*DataStructureInfo RepositoryAttributes Demo.LendMoney2*/
    public partial class LendMoney2_Repository : /*DataStructureInfo OverrideBaseType Demo.LendMoney2*/ Common.OrmRepositoryBase<Common.Queryable.Demo_LendMoney2, Demo.LendMoney2> // Common.QueryableRepositoryBase<Common.Queryable.Demo_LendMoney2, Demo.LendMoney2> // Common.ReadableRepositoryBase<Demo.LendMoney2> // global::Common.RepositoryBase
        , IWritableRepository<Demo.LendMoney2>, IValidateRepository/*DataStructureInfo RepositoryInterface Demo.LendMoney2*/
    {
        private readonly Rhetos.Dom.DefaultConcepts.CommonConceptsRuntimeOptions _commonConceptsRuntimeOptions;
        private readonly Rhetos.Utilities.ISqlUtility _sqlUtility;
        /*DataStructureInfo RepositoryPrivateMembers Demo.LendMoney2*/

        public LendMoney2_Repository(Common.DomRepository domRepository, Common.ExecutionContext executionContext, Rhetos.Dom.DefaultConcepts.CommonConceptsRuntimeOptions _commonConceptsRuntimeOptions, Rhetos.Utilities.ISqlUtility _sqlUtility/*DataStructureInfo RepositoryConstructorArguments Demo.LendMoney2*/)
        {
            _domRepository = domRepository;
            _executionContext = executionContext;
            this._commonConceptsRuntimeOptions = _commonConceptsRuntimeOptions;
            this._sqlUtility = _sqlUtility;
            /*DataStructureInfo RepositoryConstructorCode Demo.LendMoney2*/
        }

        public static KeyValuePair<string, Type>[] GetReadParameterTypes()
        {
            return new KeyValuePair<string, Type>[]
            {
                /*DataStructureInfo ReadParameterTypes Demo.LendMoney2*/
            };
        }
        
        public virtual void Save(IEnumerable<Demo.LendMoney2> insertedNew, IEnumerable<Demo.LendMoney2> updatedNew, IEnumerable<Demo.LendMoney2> deletedIds, bool checkUserPermissions = false)
        {
            if (!DomHelper.InitializeSaveMethodItems(ref insertedNew, ref updatedNew, ref deletedIds))
                return;

            /*DataStructureInfo WritableOrm ClearContext Demo.LendMoney2*/

            /*DataStructureInfo WritableOrm ArgumentValidation Demo.LendMoney2*/

            if (_commonConceptsRuntimeOptions.AutoRoundMoney)
            {
                foreach (var item in insertedNew.Concat(updatedNew))
                {
                    item.Amount = item.Amount != null ? (long)(item.Amount.Value * 100m) / 100m : null;
                    /*MoneyRoundingInfo MoneyRounding Properties Demo.LendMoney2*/
                }
            }
            /*DataStructureInfo WritableOrm Initialization Demo.LendMoney2*/

            // Using old data, including lazy loading of navigation properties:

            IEnumerable<Common.Queryable.Demo_LendMoney2> deleted = DomHelper.LoadOldDataWithNavigationProperties(deletedIds, this);
            IEnumerable<Common.Queryable.Demo_LendMoney2> updated = DomHelper.LoadOldDataWithNavigationProperties(updatedNew, this);

            foreach (var newItem in insertedNew.Concat(updatedNew))
                ShortStringPropertyCodeGenerator.CheckMaxLength(newItem.ToWhom, newItem, "Demo", "LendMoney2", "ToWhom");

            Func<IEnumerable<Common.Queryable.Demo_LendMoney2>, Rhetos.Dom.DefaultConcepts.FilterSubtype> filterLoadKeepSynchronizedOnChangedItemsMoneyTransaction_Materialized1 =
                changedItems => new Rhetos.Dom.DefaultConcepts.FilterSubtype
                        {
                            Ids = changedItems.Select(item => item.ID).ToArray(),
                            Subtype = @"Demo.LendMoney2",
                            ImplementationName = @""
                        };
            Rhetos.Dom.DefaultConcepts.FilterSubtype filterKeepSynchronizedOnChangedItemsMoneyTransaction_Materialized1Old = filterLoadKeepSynchronizedOnChangedItemsMoneyTransaction_Materialized1(updated.Concat(deleted));

            /*DataStructureInfo WritableOrm OldDataLoaded Demo.LendMoney2*/

            /*DataStructureInfo WritableOrm ProcessedOldData Demo.LendMoney2*/

            {
                DomHelper.WriteToDatabase(insertedNew, updatedNew, deletedIds, _executionContext.PersistenceStorage, checkUserPermissions, _sqlUtility,
                    out Exception saveException, out Rhetos.RhetosException interpretedException);

                if (saveException != null)
                {
                    /*DataStructureInfo WritableOrm OnDatabaseError Demo.LendMoney2*/
                    DomHelper.ThrowInterpretedException(checkUserPermissions, saveException, interpretedException, _sqlUtility, "Demo.LendMoney2");
                }
            }

            deleted = null;
            updated = this.Query(updatedNew.Select(item => item.ID));
            IEnumerable<Common.Queryable.Demo_LendMoney2> inserted = this.Query(insertedNew.Select(item => item.ID));

            bool allEffectsCompleted = false;
            try
            {
                /*OverrideRecompute KeepSynchronizedInfo Demo.MoneyTransaction_Materialized.Demo.MoneyTransaction.6*/
                {
                    var filteredNew = filterLoadKeepSynchronizedOnChangedItemsMoneyTransaction_Materialized1(inserted.Concat(updated));
                    Rhetos.Dom.DefaultConcepts.FilterSubtype optimizedFilter;
                    if (KeepSynchronizedHelper.OptimizeFiltersUnion(filteredNew, filterKeepSynchronizedOnChangedItemsMoneyTransaction_Materialized1Old, out optimizedFilter))
                        _domRepository.Demo.MoneyTransaction_Materialized.RecomputeFromMoneyTransaction(optimizedFilter);
                    else
                    {
                        _domRepository.Demo.MoneyTransaction_Materialized.RecomputeFromMoneyTransaction(filterKeepSynchronizedOnChangedItemsMoneyTransaction_Materialized1Old);
                        _domRepository.Demo.MoneyTransaction_Materialized.RecomputeFromMoneyTransaction(filteredNew);
                    }
                }

                /*DataStructureInfo WritableOrm OnSaveTag1 Demo.LendMoney2*/

                /*DataStructureInfo WritableOrm OnSaveTag2 Demo.LendMoney2*/

                Rhetos.Dom.DefaultConcepts.InvalidDataMessage.ValidateOnSave(insertedNew, updatedNew, this, "Demo.LendMoney2");

                /*DataStructureInfo WritableOrm AfterSave Demo.LendMoney2*/

                allEffectsCompleted = true;
            }
            finally
            {
                if (!allEffectsCompleted)
                    _executionContext.PersistenceTransaction.DiscardOnDispose();
            }
        }

        public IEnumerable<Rhetos.Dom.DefaultConcepts.InvalidDataMessage> Validate(IList<Guid> ids, bool onSave)
        {
            /*DataStructureInfo WritableOrm OnSaveValidate Demo.LendMoney2*/
            yield break;
        }

        /*DataStructureInfo RepositoryMembers Demo.LendMoney2*/
    }

    /*DataStructureInfo RepositoryAttributes Demo.LendMoneyAddendum*/
    public partial class LendMoneyAddendum_Repository : /*DataStructureInfo OverrideBaseType Demo.LendMoneyAddendum*/ Common.OrmRepositoryBase<Common.Queryable.Demo_LendMoneyAddendum, Demo.LendMoneyAddendum> // Common.QueryableRepositoryBase<Common.Queryable.Demo_LendMoneyAddendum, Demo.LendMoneyAddendum> // Common.ReadableRepositoryBase<Demo.LendMoneyAddendum> // global::Common.RepositoryBase
        , IWritableRepository<Demo.LendMoneyAddendum>, IValidateRepository/*DataStructureInfo RepositoryInterface Demo.LendMoneyAddendum*/
    {
        private readonly Rhetos.Dom.DefaultConcepts.CommonConceptsRuntimeOptions _commonConceptsRuntimeOptions;
        private readonly Rhetos.Utilities.ISqlUtility _sqlUtility;
        /*DataStructureInfo RepositoryPrivateMembers Demo.LendMoneyAddendum*/

        public LendMoneyAddendum_Repository(Common.DomRepository domRepository, Common.ExecutionContext executionContext, Rhetos.Dom.DefaultConcepts.CommonConceptsRuntimeOptions _commonConceptsRuntimeOptions, Rhetos.Utilities.ISqlUtility _sqlUtility/*DataStructureInfo RepositoryConstructorArguments Demo.LendMoneyAddendum*/)
        {
            _domRepository = domRepository;
            _executionContext = executionContext;
            this._commonConceptsRuntimeOptions = _commonConceptsRuntimeOptions;
            this._sqlUtility = _sqlUtility;
            /*DataStructureInfo RepositoryConstructorCode Demo.LendMoneyAddendum*/
        }

        public static KeyValuePair<string, Type>[] GetReadParameterTypes()
        {
            return new KeyValuePair<string, Type>[]
            {
                /*DataStructureInfo ReadParameterTypes Demo.LendMoneyAddendum*/
            };
        }
        
        public virtual void Save(IEnumerable<Demo.LendMoneyAddendum> insertedNew, IEnumerable<Demo.LendMoneyAddendum> updatedNew, IEnumerable<Demo.LendMoneyAddendum> deletedIds, bool checkUserPermissions = false)
        {
            if (!DomHelper.InitializeSaveMethodItems(ref insertedNew, ref updatedNew, ref deletedIds))
                return;

            /*DataStructureInfo WritableOrm ClearContext Demo.LendMoneyAddendum*/

            /*DataStructureInfo WritableOrm ArgumentValidation Demo.LendMoneyAddendum*/

            if (_commonConceptsRuntimeOptions.AutoRoundMoney)
            {
                foreach (var item in insertedNew.Concat(updatedNew))
                {
                    item.AdditionalAmount = item.AdditionalAmount != null ? (long)(item.AdditionalAmount.Value * 100m) / 100m : null;
                    /*MoneyRoundingInfo MoneyRounding Properties Demo.LendMoneyAddendum*/
                }
            }
            /*DataStructureInfo WritableOrm Initialization Demo.LendMoneyAddendum*/

            // Using old data, including lazy loading of navigation properties:

            IEnumerable<Common.Queryable.Demo_LendMoneyAddendum> deleted = DomHelper.LoadOldDataWithNavigationProperties(deletedIds, this);
            IEnumerable<Common.Queryable.Demo_LendMoneyAddendum> updated = DomHelper.LoadOldDataWithNavigationProperties(updatedNew, this);

            /*DataStructureInfo WritableOrm OldDataLoaded Demo.LendMoneyAddendum*/

            /*DataStructureInfo WritableOrm ProcessedOldData Demo.LendMoneyAddendum*/

            {
                DomHelper.WriteToDatabase(insertedNew, updatedNew, deletedIds, _executionContext.PersistenceStorage, checkUserPermissions, _sqlUtility,
                    out Exception saveException, out Rhetos.RhetosException interpretedException);

                if (saveException != null)
                {
                    if (interpretedException is Rhetos.UserException && Rhetos.Utilities.MsSqlUtility.IsReferenceErrorOnInsertUpdate(interpretedException, @"Demo.LendMoney", @"ID", @"FK_LendMoneyAddendum_LendMoney_LendMoneyID"))
                        ((Rhetos.UserException)interpretedException).SystemMessage = @"DataStructure:Demo.LendMoneyAddendum,Property:LendMoneyID,Referenced:Demo.LendMoney";
                    /*DataStructureInfo WritableOrm OnDatabaseError Demo.LendMoneyAddendum*/
                    DomHelper.ThrowInterpretedException(checkUserPermissions, saveException, interpretedException, _sqlUtility, "Demo.LendMoneyAddendum");
                }
            }

            deleted = null;
            updated = this.Query(updatedNew.Select(item => item.ID));
            IEnumerable<Common.Queryable.Demo_LendMoneyAddendum> inserted = this.Query(insertedNew.Select(item => item.ID));

            bool allEffectsCompleted = false;
            try
            {
                /*DataStructureInfo WritableOrm OnSaveTag1 Demo.LendMoneyAddendum*/

                /*DataStructureInfo WritableOrm OnSaveTag2 Demo.LendMoneyAddendum*/

                Rhetos.Dom.DefaultConcepts.InvalidDataMessage.ValidateOnSave(insertedNew, updatedNew, this, "Demo.LendMoneyAddendum");

                /*DataStructureInfo WritableOrm AfterSave Demo.LendMoneyAddendum*/

                allEffectsCompleted = true;
            }
            finally
            {
                if (!allEffectsCompleted)
                    _executionContext.PersistenceTransaction.DiscardOnDispose();
            }
        }

        public IEnumerable<Rhetos.Dom.DefaultConcepts.InvalidDataMessage> Validate(IList<Guid> ids, bool onSave)
        {
            /*DataStructureInfo WritableOrm OnSaveValidate Demo.LendMoneyAddendum*/
            yield break;
        }

        /*DataStructureInfo RepositoryMembers Demo.LendMoneyAddendum*/
    }

    /*DataStructureInfo RepositoryAttributes Demo.MoneyTransaction*/
    public partial class MoneyTransaction_Repository : /*DataStructureInfo OverrideBaseType Demo.MoneyTransaction*/ Common.OrmRepositoryBase<Common.Queryable.Demo_MoneyTransaction, Demo.MoneyTransaction> // Common.QueryableRepositoryBase<Common.Queryable.Demo_MoneyTransaction, Demo.MoneyTransaction> // Common.ReadableRepositoryBase<Demo.MoneyTransaction> // global::Common.RepositoryBase
        /*DataStructureInfo RepositoryInterface Demo.MoneyTransaction*/
    {
        /*DataStructureInfo RepositoryPrivateMembers Demo.MoneyTransaction*/

        public MoneyTransaction_Repository(Common.DomRepository domRepository, Common.ExecutionContext executionContext/*DataStructureInfo RepositoryConstructorArguments Demo.MoneyTransaction*/)
        {
            _domRepository = domRepository;
            _executionContext = executionContext;
            /*DataStructureInfo RepositoryConstructorCode Demo.MoneyTransaction*/
        }

        public static KeyValuePair<string, Type>[] GetReadParameterTypes()
        {
            return new KeyValuePair<string, Type>[]
            {
                new KeyValuePair<string, Type>(@"Rhetos.Dom.DefaultConcepts.FilterSubtype", typeof(Rhetos.Dom.DefaultConcepts.FilterSubtype)),
                /*DataStructureInfo ReadParameterTypes Demo.MoneyTransaction*/
            };
        }
        
        public global::Demo.MoneyTransaction[] Load(Rhetos.Dom.DefaultConcepts.FilterSubtype filter_Parameter)
        {
            Func<Common.DomRepository, Rhetos.Dom.DefaultConcepts.FilterSubtype/*FilterByInfo AdditionalParametersType Demo.MoneyTransaction.'Rhetos.Dom.DefaultConcepts.FilterSubtype'*/, Demo.MoneyTransaction[]> filter_Function =
                (repository, parameter) =>
                {{
                    Expression<Func<Common.Queryable.Demo_MoneyTransaction, bool>> filterExpression = null;
                    parameter.ImplementationName = parameter.ImplementationName ?? "";
                    if (parameter.Subtype == @"Demo.BorrowMoney" && parameter.ImplementationName == @"")
                        filterExpression = item => item.BorrowMoneyID != null;
                    if (parameter.Subtype == @"Demo.BorrowMoney2" && parameter.ImplementationName == @"")
                        filterExpression = item => item.BorrowMoney2ID != null;
                    if (parameter.Subtype == @"Demo.LendMoney" && parameter.ImplementationName == @"")
                        filterExpression = item => item.LendMoneyID != null;
                    if (parameter.Subtype == @"Demo.LendMoney" && parameter.ImplementationName == @"TotalAddendum")
                        filterExpression = item => item.LendMoneyTotalAddendumID != null;
                    if (parameter.Subtype == @"Demo.LendMoney2" && parameter.ImplementationName == @"")
                        filterExpression = item => item.LendMoney2ID != null;
                    if (parameter.Subtype == @"Demo.TransferMoney" && parameter.ImplementationName == @"")
                        filterExpression = item => item.TransferMoneyID != null;
                    if (parameter.Subtype == @"Demo.TransferMoney" && parameter.ImplementationName == @"Subtract")
                        filterExpression = item => item.TransferMoneySubtractID != null;
                    /*PolymorphicInfo SetFilterExpression Demo.MoneyTransaction*/
                    if (filterExpression == null)
                        throw new Rhetos.ClientException(string.Format("Invalid subtype name or implementation name provided: '{0}', '{1}'.",
                            parameter.Subtype, parameter.ImplementationName));
                    return Filter(Query().Where(filterExpression), parameter.Ids).ToSimple().ToArray();
                }};

            return filter_Function(_domRepository, filter_Parameter/*FilterByInfo AdditionalParametersArgument Demo.MoneyTransaction.'Rhetos.Dom.DefaultConcepts.FilterSubtype'*/);
        }

        /*DataStructureInfo RepositoryMembers Demo.MoneyTransaction*/
    }

    /*DataStructureInfo RepositoryAttributes Demo.MoneyTransaction_Materialized*/
    public partial class MoneyTransaction_Materialized_Repository : /*DataStructureInfo OverrideBaseType Demo.MoneyTransaction_Materialized*/ Common.OrmRepositoryBase<Common.Queryable.Demo_MoneyTransaction_Materialized, Demo.MoneyTransaction_Materialized> // Common.QueryableRepositoryBase<Common.Queryable.Demo_MoneyTransaction_Materialized, Demo.MoneyTransaction_Materialized> // Common.ReadableRepositoryBase<Demo.MoneyTransaction_Materialized> // global::Common.RepositoryBase
        , IWritableRepository<Demo.MoneyTransaction_Materialized>, IValidateRepository/*DataStructureInfo RepositoryInterface Demo.MoneyTransaction_Materialized*/
    {
        private readonly Rhetos.Utilities.ISqlUtility _sqlUtility;
        /*DataStructureInfo RepositoryPrivateMembers Demo.MoneyTransaction_Materialized*/

        public MoneyTransaction_Materialized_Repository(Common.DomRepository domRepository, Common.ExecutionContext executionContext, Rhetos.Utilities.ISqlUtility _sqlUtility/*DataStructureInfo RepositoryConstructorArguments Demo.MoneyTransaction_Materialized*/)
        {
            _domRepository = domRepository;
            _executionContext = executionContext;
            this._sqlUtility = _sqlUtility;
            /*DataStructureInfo RepositoryConstructorCode Demo.MoneyTransaction_Materialized*/
        }

        public static KeyValuePair<string, Type>[] GetReadParameterTypes()
        {
            return new KeyValuePair<string, Type>[]
            {
                new KeyValuePair<string, Type>(@"Rhetos.Dom.DefaultConcepts.FilterSubtype", typeof(Rhetos.Dom.DefaultConcepts.FilterSubtype)),
                /*DataStructureInfo ReadParameterTypes Demo.MoneyTransaction_Materialized*/
            };
        }
        
        public virtual void Save(IEnumerable<Demo.MoneyTransaction_Materialized> insertedNew, IEnumerable<Demo.MoneyTransaction_Materialized> updatedNew, IEnumerable<Demo.MoneyTransaction_Materialized> deletedIds, bool checkUserPermissions = false)
        {
            if (!DomHelper.InitializeSaveMethodItems(ref insertedNew, ref updatedNew, ref deletedIds))
                return;

            /*DataStructureInfo WritableOrm ClearContext Demo.MoneyTransaction_Materialized*/

            /*DataStructureInfo WritableOrm ArgumentValidation Demo.MoneyTransaction_Materialized*/

            /*DataStructureInfo WritableOrm Initialization Demo.MoneyTransaction_Materialized*/

            // Using old data, including lazy loading of navigation properties:

            IEnumerable<Common.Queryable.Demo_MoneyTransaction_Materialized> deleted = DomHelper.LoadOldDataWithNavigationProperties(deletedIds, this);
            IEnumerable<Common.Queryable.Demo_MoneyTransaction_Materialized> updated = DomHelper.LoadOldDataWithNavigationProperties(updatedNew, this);

            /*DataStructureInfo WritableOrm OldDataLoaded Demo.MoneyTransaction_Materialized*/

            /*DataStructureInfo WritableOrm ProcessedOldData Demo.MoneyTransaction_Materialized*/

            {
                DomHelper.WriteToDatabase(insertedNew, updatedNew, deletedIds, _executionContext.PersistenceStorage, checkUserPermissions, _sqlUtility,
                    out Exception saveException, out Rhetos.RhetosException interpretedException);

                if (saveException != null)
                {
                    /*DataStructureInfo WritableOrm OnDatabaseError Demo.MoneyTransaction_Materialized*/
                    DomHelper.ThrowInterpretedException(checkUserPermissions, saveException, interpretedException, _sqlUtility, "Demo.MoneyTransaction_Materialized");
                }
            }

            deleted = null;
            updated = this.Query(updatedNew.Select(item => item.ID));
            IEnumerable<Common.Queryable.Demo_MoneyTransaction_Materialized> inserted = this.Query(insertedNew.Select(item => item.ID));

            bool allEffectsCompleted = false;
            try
            {
                /*DataStructureInfo WritableOrm OnSaveTag1 Demo.MoneyTransaction_Materialized*/

                /*DataStructureInfo WritableOrm OnSaveTag2 Demo.MoneyTransaction_Materialized*/

                Rhetos.Dom.DefaultConcepts.InvalidDataMessage.ValidateOnSave(insertedNew, updatedNew, this, "Demo.MoneyTransaction_Materialized");

                /*DataStructureInfo WritableOrm AfterSave Demo.MoneyTransaction_Materialized*/

                allEffectsCompleted = true;
            }
            finally
            {
                if (!allEffectsCompleted)
                    _executionContext.PersistenceTransaction.DiscardOnDispose();
            }
        }

        public IEnumerable<Rhetos.Dom.DefaultConcepts.InvalidDataMessage> Validate(IList<Guid> ids, bool onSave)
        {
            /*DataStructureInfo WritableOrm OnSaveValidate Demo.MoneyTransaction_Materialized*/
            yield break;
        }

        public IEnumerable<Demo.MoneyTransaction_Materialized> RecomputeFromMoneyTransaction(object filterLoad = null, Func<IEnumerable<Demo.MoneyTransaction_Materialized>, IEnumerable<Demo.MoneyTransaction_Materialized>> filterSave = null)
        {
            /*EntityComputedFromInfo OverrideDefaultFilters Demo.MoneyTransaction_Materialized.Demo.MoneyTransaction*/
            filterSave = filterSave ?? FilterSaveKeepSynchronizedOnChangedItems_Demo_MoneyTransaction;
            filterLoad = filterLoad ?? new FilterAll();
            filterSave = filterSave ?? (x => x);

            var sourceRepository = _executionContext.GenericRepositories.GetGenericRepository<Demo.MoneyTransaction>();
            var sourceItems = sourceRepository.Load(filterLoad);
            var newItems = sourceItems.Select(sourceItem => new Demo.MoneyTransaction_Materialized {
                ID = sourceItem.ID,
                /*EntityComputedFromInfo CloneProperty Demo.MoneyTransaction_Materialized.Demo.MoneyTransaction*/ }).ToList();

            var destinationRepository = _executionContext.GenericRepositories.GetGenericRepository<Demo.MoneyTransaction_Materialized>();
            destinationRepository.InsertOrUpdateOrDelete(
                newItems,
                sameRecord: /*EntityComputedFromInfo OverrideKeyComparer Demo.MoneyTransaction_Materialized.Demo.MoneyTransaction*/ null, // Default is comparison by ID.
                sameValue: (x, y) =>
                {
                    /*EntityComputedFromInfo CompareValueProperty Demo.MoneyTransaction_Materialized.Demo.MoneyTransaction*/
                    return true;
                },
                filterLoad: filterLoad,
                assign: (destination, source) =>
                {
                    /*EntityComputedFromInfo AssignProperty Demo.MoneyTransaction_Materialized.Demo.MoneyTransaction*/
                },
                beforeSave: (ref IEnumerable<Demo.MoneyTransaction_Materialized> toInsert, ref IEnumerable<Demo.MoneyTransaction_Materialized> toUpdate, ref IEnumerable<Demo.MoneyTransaction_Materialized> toDelete) =>
                {
                    toInsert = filterSave(toInsert);
                    toUpdate = filterSave(toUpdate);
                    toDelete = filterSave(toDelete);
                });
            return newItems;
        }
        
        public global::Demo.MoneyTransaction_Materialized[] Load(Rhetos.Dom.DefaultConcepts.FilterSubtype filter_Parameter)
        {
            Func<Common.DomRepository, Rhetos.Dom.DefaultConcepts.FilterSubtype/*FilterByInfo AdditionalParametersType Demo.MoneyTransaction_Materialized.'Rhetos.Dom.DefaultConcepts.FilterSubtype'*/, Demo.MoneyTransaction_Materialized[]> filter_Function =
                (repository, parameter) => Filter(parameter.Ids);

            return filter_Function(_domRepository, filter_Parameter/*FilterByInfo AdditionalParametersArgument Demo.MoneyTransaction_Materialized.'Rhetos.Dom.DefaultConcepts.FilterSubtype'*/);
        }

        public IEnumerable<Demo.MoneyTransaction_Materialized> FilterSaveKeepSynchronizedOnChangedItems_Demo_MoneyTransaction(IEnumerable<Demo.MoneyTransaction_Materialized> filterSave_items)
        {
            return filterSave_items;
        }

        /*DataStructureInfo RepositoryMembers Demo.MoneyTransaction_Materialized*/
    }

    /*DataStructureInfo RepositoryAttributes Demo.TransactionComment*/
    public partial class TransactionComment_Repository : /*DataStructureInfo OverrideBaseType Demo.TransactionComment*/ Common.OrmRepositoryBase<Common.Queryable.Demo_TransactionComment, Demo.TransactionComment> // Common.QueryableRepositoryBase<Common.Queryable.Demo_TransactionComment, Demo.TransactionComment> // Common.ReadableRepositoryBase<Demo.TransactionComment> // global::Common.RepositoryBase
        , IWritableRepository<Demo.TransactionComment>, IValidateRepository/*DataStructureInfo RepositoryInterface Demo.TransactionComment*/
    {
        private readonly Rhetos.Utilities.ISqlUtility _sqlUtility;
        /*DataStructureInfo RepositoryPrivateMembers Demo.TransactionComment*/

        public TransactionComment_Repository(Common.DomRepository domRepository, Common.ExecutionContext executionContext, Rhetos.Utilities.ISqlUtility _sqlUtility/*DataStructureInfo RepositoryConstructorArguments Demo.TransactionComment*/)
        {
            _domRepository = domRepository;
            _executionContext = executionContext;
            this._sqlUtility = _sqlUtility;
            /*DataStructureInfo RepositoryConstructorCode Demo.TransactionComment*/
        }

        public static KeyValuePair<string, Type>[] GetReadParameterTypes()
        {
            return new KeyValuePair<string, Type>[]
            {
                /*DataStructureInfo ReadParameterTypes Demo.TransactionComment*/
            };
        }
        
        public virtual void Save(IEnumerable<Demo.TransactionComment> insertedNew, IEnumerable<Demo.TransactionComment> updatedNew, IEnumerable<Demo.TransactionComment> deletedIds, bool checkUserPermissions = false)
        {
            if (!DomHelper.InitializeSaveMethodItems(ref insertedNew, ref updatedNew, ref deletedIds))
                return;

            /*DataStructureInfo WritableOrm ClearContext Demo.TransactionComment*/

            /*DataStructureInfo WritableOrm ArgumentValidation Demo.TransactionComment*/

            /*DataStructureInfo WritableOrm Initialization Demo.TransactionComment*/

            // Using old data, including lazy loading of navigation properties:

            IEnumerable<Common.Queryable.Demo_TransactionComment> deleted = DomHelper.LoadOldDataWithNavigationProperties(deletedIds, this);
            IEnumerable<Common.Queryable.Demo_TransactionComment> updated = DomHelper.LoadOldDataWithNavigationProperties(updatedNew, this);

            /*DataStructureInfo WritableOrm OldDataLoaded Demo.TransactionComment*/

            /*DataStructureInfo WritableOrm ProcessedOldData Demo.TransactionComment*/

            {
                DomHelper.WriteToDatabase(insertedNew, updatedNew, deletedIds, _executionContext.PersistenceStorage, checkUserPermissions, _sqlUtility,
                    out Exception saveException, out Rhetos.RhetosException interpretedException);

                if (saveException != null)
                {
                    if (interpretedException is Rhetos.UserException && Rhetos.Utilities.MsSqlUtility.IsReferenceErrorOnInsertUpdate(interpretedException, @"Demo.MoneyTransaction", @"ID", @"FK_TransactionComment_MoneyTransaction_MoneyTransactionID"))
                        ((Rhetos.UserException)interpretedException).SystemMessage = @"DataStructure:Demo.TransactionComment,Property:MoneyTransactionID,Referenced:Demo.MoneyTransaction";
                    /*DataStructureInfo WritableOrm OnDatabaseError Demo.TransactionComment*/
                    DomHelper.ThrowInterpretedException(checkUserPermissions, saveException, interpretedException, _sqlUtility, "Demo.TransactionComment");
                }
            }

            deleted = null;
            updated = this.Query(updatedNew.Select(item => item.ID));
            IEnumerable<Common.Queryable.Demo_TransactionComment> inserted = this.Query(insertedNew.Select(item => item.ID));

            bool allEffectsCompleted = false;
            try
            {
                /*DataStructureInfo WritableOrm OnSaveTag1 Demo.TransactionComment*/

                /*DataStructureInfo WritableOrm OnSaveTag2 Demo.TransactionComment*/

                Rhetos.Dom.DefaultConcepts.InvalidDataMessage.ValidateOnSave(insertedNew, updatedNew, this, "Demo.TransactionComment");

                /*DataStructureInfo WritableOrm AfterSave Demo.TransactionComment*/

                allEffectsCompleted = true;
            }
            finally
            {
                if (!allEffectsCompleted)
                    _executionContext.PersistenceTransaction.DiscardOnDispose();
            }
        }

        public IEnumerable<Rhetos.Dom.DefaultConcepts.InvalidDataMessage> Validate(IList<Guid> ids, bool onSave)
        {
            /*DataStructureInfo WritableOrm OnSaveValidate Demo.TransactionComment*/
            yield break;
        }

        /*DataStructureInfo RepositoryMembers Demo.TransactionComment*/
    }

    /*DataStructureInfo RepositoryAttributes Demo.TransferMoney*/
    public partial class TransferMoney_Repository : /*DataStructureInfo OverrideBaseType Demo.TransferMoney*/ Common.OrmRepositoryBase<Common.Queryable.Demo_TransferMoney, Demo.TransferMoney> // Common.QueryableRepositoryBase<Common.Queryable.Demo_TransferMoney, Demo.TransferMoney> // Common.ReadableRepositoryBase<Demo.TransferMoney> // global::Common.RepositoryBase
        , IWritableRepository<Demo.TransferMoney>, IValidateRepository/*DataStructureInfo RepositoryInterface Demo.TransferMoney*/
    {
        private readonly Rhetos.Dom.DefaultConcepts.CommonConceptsRuntimeOptions _commonConceptsRuntimeOptions;
        private readonly Rhetos.Utilities.ISqlUtility _sqlUtility;
        /*DataStructureInfo RepositoryPrivateMembers Demo.TransferMoney*/

        public TransferMoney_Repository(Common.DomRepository domRepository, Common.ExecutionContext executionContext, Rhetos.Dom.DefaultConcepts.CommonConceptsRuntimeOptions _commonConceptsRuntimeOptions, Rhetos.Utilities.ISqlUtility _sqlUtility/*DataStructureInfo RepositoryConstructorArguments Demo.TransferMoney*/)
        {
            _domRepository = domRepository;
            _executionContext = executionContext;
            this._commonConceptsRuntimeOptions = _commonConceptsRuntimeOptions;
            this._sqlUtility = _sqlUtility;
            /*DataStructureInfo RepositoryConstructorCode Demo.TransferMoney*/
        }

        public static KeyValuePair<string, Type>[] GetReadParameterTypes()
        {
            return new KeyValuePair<string, Type>[]
            {
                /*DataStructureInfo ReadParameterTypes Demo.TransferMoney*/
            };
        }
        
        public virtual void Save(IEnumerable<Demo.TransferMoney> insertedNew, IEnumerable<Demo.TransferMoney> updatedNew, IEnumerable<Demo.TransferMoney> deletedIds, bool checkUserPermissions = false)
        {
            if (!DomHelper.InitializeSaveMethodItems(ref insertedNew, ref updatedNew, ref deletedIds))
                return;

            /*DataStructureInfo WritableOrm ClearContext Demo.TransferMoney*/

            /*DataStructureInfo WritableOrm ArgumentValidation Demo.TransferMoney*/

            if (_commonConceptsRuntimeOptions.AutoRoundMoney)
            {
                foreach (var item in insertedNew.Concat(updatedNew))
                {
                    item.Amount = item.Amount != null ? (long)(item.Amount.Value * 100m) / 100m : null;
                    /*MoneyRoundingInfo MoneyRounding Properties Demo.TransferMoney*/
                }
            }
            /*DataStructureInfo WritableOrm Initialization Demo.TransferMoney*/

            // Using old data, including lazy loading of navigation properties:

            IEnumerable<Common.Queryable.Demo_TransferMoney> deleted = DomHelper.LoadOldDataWithNavigationProperties(deletedIds, this);
            IEnumerable<Common.Queryable.Demo_TransferMoney> updated = DomHelper.LoadOldDataWithNavigationProperties(updatedNew, this);

            foreach (var newItem in insertedNew.Concat(updatedNew))
                ShortStringPropertyCodeGenerator.CheckMaxLength(newItem.TransferFrom, newItem, "Demo", "TransferMoney", "TransferFrom");

            foreach (var newItem in insertedNew.Concat(updatedNew))
                ShortStringPropertyCodeGenerator.CheckMaxLength(newItem.TransferTo, newItem, "Demo", "TransferMoney", "TransferTo");

            Func<IEnumerable<Common.Queryable.Demo_TransferMoney>, Rhetos.Dom.DefaultConcepts.FilterSubtype> filterLoadKeepSynchronizedOnChangedItemsMoneyTransaction_Materialized1 =
                changedItems => new Rhetos.Dom.DefaultConcepts.FilterSubtype
                        {
                            Ids = changedItems.Select(item => DomUtility.GetSubtypeImplementationId(item.ID, -435939589)).ToArray(),
                            Subtype = @"Demo.TransferMoney",
                            ImplementationName = @"Subtract"
                        };
            Rhetos.Dom.DefaultConcepts.FilterSubtype filterKeepSynchronizedOnChangedItemsMoneyTransaction_Materialized1Old = filterLoadKeepSynchronizedOnChangedItemsMoneyTransaction_Materialized1(updated.Concat(deleted));

            Func<IEnumerable<Common.Queryable.Demo_TransferMoney>, Rhetos.Dom.DefaultConcepts.FilterSubtype> filterLoadKeepSynchronizedOnChangedItemsMoneyTransaction_Materialized2 =
                changedItems => new Rhetos.Dom.DefaultConcepts.FilterSubtype
                        {
                            Ids = changedItems.Select(item => item.ID).ToArray(),
                            Subtype = @"Demo.TransferMoney",
                            ImplementationName = @""
                        };
            Rhetos.Dom.DefaultConcepts.FilterSubtype filterKeepSynchronizedOnChangedItemsMoneyTransaction_Materialized2Old = filterLoadKeepSynchronizedOnChangedItemsMoneyTransaction_Materialized2(updated.Concat(deleted));

            /*DataStructureInfo WritableOrm OldDataLoaded Demo.TransferMoney*/

            /*DataStructureInfo WritableOrm ProcessedOldData Demo.TransferMoney*/

            {
                DomHelper.WriteToDatabase(insertedNew, updatedNew, deletedIds, _executionContext.PersistenceStorage, checkUserPermissions, _sqlUtility,
                    out Exception saveException, out Rhetos.RhetosException interpretedException);

                if (saveException != null)
                {
                    /*DataStructureInfo WritableOrm OnDatabaseError Demo.TransferMoney*/
                    DomHelper.ThrowInterpretedException(checkUserPermissions, saveException, interpretedException, _sqlUtility, "Demo.TransferMoney");
                }
            }

            deleted = null;
            updated = this.Query(updatedNew.Select(item => item.ID));
            IEnumerable<Common.Queryable.Demo_TransferMoney> inserted = this.Query(insertedNew.Select(item => item.ID));

            bool allEffectsCompleted = false;
            try
            {
                /*OverrideRecompute KeepSynchronizedInfo Demo.MoneyTransaction_Materialized.Demo.MoneyTransaction.7*/
                {
                    var filteredNew = filterLoadKeepSynchronizedOnChangedItemsMoneyTransaction_Materialized1(inserted.Concat(updated));
                    Rhetos.Dom.DefaultConcepts.FilterSubtype optimizedFilter;
                    if (KeepSynchronizedHelper.OptimizeFiltersUnion(filteredNew, filterKeepSynchronizedOnChangedItemsMoneyTransaction_Materialized1Old, out optimizedFilter))
                        _domRepository.Demo.MoneyTransaction_Materialized.RecomputeFromMoneyTransaction(optimizedFilter);
                    else
                    {
                        _domRepository.Demo.MoneyTransaction_Materialized.RecomputeFromMoneyTransaction(filterKeepSynchronizedOnChangedItemsMoneyTransaction_Materialized1Old);
                        _domRepository.Demo.MoneyTransaction_Materialized.RecomputeFromMoneyTransaction(filteredNew);
                    }
                }

                /*OverrideRecompute KeepSynchronizedInfo Demo.MoneyTransaction_Materialized.Demo.MoneyTransaction.8*/
                {
                    var filteredNew = filterLoadKeepSynchronizedOnChangedItemsMoneyTransaction_Materialized2(inserted.Concat(updated));
                    Rhetos.Dom.DefaultConcepts.FilterSubtype optimizedFilter;
                    if (KeepSynchronizedHelper.OptimizeFiltersUnion(filteredNew, filterKeepSynchronizedOnChangedItemsMoneyTransaction_Materialized2Old, out optimizedFilter))
                        _domRepository.Demo.MoneyTransaction_Materialized.RecomputeFromMoneyTransaction(optimizedFilter);
                    else
                    {
                        _domRepository.Demo.MoneyTransaction_Materialized.RecomputeFromMoneyTransaction(filterKeepSynchronizedOnChangedItemsMoneyTransaction_Materialized2Old);
                        _domRepository.Demo.MoneyTransaction_Materialized.RecomputeFromMoneyTransaction(filteredNew);
                    }
                }

                /*DataStructureInfo WritableOrm OnSaveTag1 Demo.TransferMoney*/

                /*DataStructureInfo WritableOrm OnSaveTag2 Demo.TransferMoney*/

                Rhetos.Dom.DefaultConcepts.InvalidDataMessage.ValidateOnSave(insertedNew, updatedNew, this, "Demo.TransferMoney");

                /*DataStructureInfo WritableOrm AfterSave Demo.TransferMoney*/

                allEffectsCompleted = true;
            }
            finally
            {
                if (!allEffectsCompleted)
                    _executionContext.PersistenceTransaction.DiscardOnDispose();
            }
        }

        public IEnumerable<Rhetos.Dom.DefaultConcepts.InvalidDataMessage> Validate(IList<Guid> ids, bool onSave)
        {
            /*DataStructureInfo WritableOrm OnSaveValidate Demo.TransferMoney*/
            yield break;
        }

        /*DataStructureInfo RepositoryMembers Demo.TransferMoney*/
    }

    /*ModuleInfo HelperNamespaceMembers Demo*/

    #pragma warning restore // See configuration setting CommonConcepts:CompilerWarningsInGeneratedCode.
}

